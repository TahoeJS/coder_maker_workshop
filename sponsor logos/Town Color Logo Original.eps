%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: towncolor logo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: annaliese miller
%%CreationDate: 4/9/10
%%BoundingBox: 0 0 838 409
%%HiResBoundingBox: 0 0 837.2793 408.0079
%%CropBox: 0 0 837.2793 408.0079
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (PANTONE 2708 CV)
%%+ (PANTONE 122 CV)
%%+ (PANTONE Red 032 CV)
%%+ (PANTONE 357 CV)
%%+ (PANTONE 278 CV)
%%CMYKCustomColor: 0.1000 0.0300 0 0 (PANTONE 2708 CV)
%%+ 0 0.0700 0.3300 0 (PANTONE 122 CV)
%%+ 0 0.5500 0.5200 0 (PANTONE Red 032 CV)
%%+ 0.7900 0 0.8700 0.5600 (PANTONE 357 CV)
%%+ 0.3800 0.1500 0 0 (PANTONE 278 CV)
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                       
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">town full color logo</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-04-09T11:31-07:00</xap:CreateDate>
         <xap:ModifyDate>2010-04-09T11:31:01-07:00</xap:ModifyDate>
         <xap:MetadataDate>2010-04-09T11:31:01-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>128</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq0&#xA;7oiM7sFRQSzE0AA3JJOKsO1z85Pyu0QsuoeZbISLs8UEn1qRT4FLcSsPuxVgOsf85c/lxaArp1pq&#xA;GpSA/CyxpDGR48pH5/8ACYrSQ/8AQzP5i6yf+dW8gyyxkfDLJ9YulpXqTFHCoH+yyEskY8zTIRJ5&#xA;JNqX5s/85DzljcT6N5aXevry2EBUntwu5ppO/wDLkfGj7/gU8BYze+efzHnJfVPzWsrT+ZLSW5dq&#xA;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&#xA;FXYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:E8242F8D5745DF118C26842657AB0C0A</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:E9242F8D5745DF118C26842657AB0C0A</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:44461f09-f5f4-e344-ae49-36bb5023a442</stRef:instanceID>
            <stRef:documentID>uuid:46FE2C90A8A8DC11B36ABBE8DC052423</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>17.000000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
               <rdf:li>PANTONE 122 CV</rdf:li>
               <rdf:li>PANTONE 278 CV</rdf:li>
               <rdf:li>PANTONE Red 032 CV</rdf:li>
               <rdf:li>PANTONE 2708 CV</rdf:li>
               <rdf:li>PANTONE 357 CV</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 122 CV</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>7.000000</xapG:magenta>
                           <xapG:yellow>33.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 2708 CV</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>10.000000</xapG:cyan>
                           <xapG:magenta>3.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 278 CV</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>38.000000</xapG:cyan>
                           <xapG:magenta>14.999999</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 357 CV</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>79.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>87.000000</xapG:yellow>
                           <xapG:black>56.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Red 032 CV</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>55.000000</xapG:magenta>
                           <xapG:yellow>52.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -408.008 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 408.008 li
837.279 408.008 li
837.279 0 li
cp
clp
[1 0 0 1 0 0 ]ct
804.168 96.1763 mo
789.695 145.784 781.632 196.688 818.495 258.896 cv
751.68 292.377 li
639.432 292.377 li
467.424 294.824 li
355.32 321.104 li
295.632 306.776 li
223.992 301.952 li
145.152 326 li
25.7759 266.169 li
42.48 213.536 43.3438 160.904 28.1519 108.128 cv
286.776 -21.5435 545.328 -3.97559 804.168 96.1763 cv
cp
false sop
/0 
<<
/Name (PANTONE 278 CV)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.38 0.15 0 0 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
level3{
gsave
[-1.51951e-05 -347.624 347.624 -1.51951e-05 422.135 326.4 ]ct
<<
/PatternType 2
/Shading
/0 
<<
/ShadingType 2 
/ColorSpace [/Separation /sep_colorspace_dict AGMCORE_gget dup /Name get exch /MappedCSA get /sep_colorspace_proc load]
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [0 ]
/C1 [1 ]
/N 1 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>> /Gradient add_res /0 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-1.51951e-05 -347.624 347.624 -1.51951e-05 422.135 326.4 ]ct
/0 {
<<
/NumSamples 256 
/NumComp 1 
/Scaling[[0.00392157 0 ]]
/Samples[
<~!!!$$!sAc3#7(VC$OdIS%hK<c',2/s(Dn#.)]Tk>+!;^N,:"Q^-R^Dn.kE8)0/,+91GgsI2`NfY4$5Yi
5<qM$6UX@47n?3D92&&T:Jand;cHat='/U/>?kH??XR;O@q9._B4u!oCM[j*DfB]:F*)PJGBeCZH[L6j
It3*%K7nr5LPUeEMi<XUO-#KePE_>uQ^F20S"-%@T:hmPUSO``Vl6SpX/rG+YHY:;Za@-K\%&u[]=bhk
^VI\&_o0O6a2lBFbKS5Vcd:(fe'uq!f@\d1gYCWAhr*JQj5f=akNM0qlg4$,n*ol<oCV_Lp\=R\qu$El
~>
]
>>
0 0 1 0 []true true []
/Separation
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/0 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
176.112 295.257 mo
185.4 291.008 li
189.504 291.008 li
195.192 287.408 li
206.28 286.832 li
223.776 279.416 li
231.552 281.217 li
245.88 286.832 li
260.136 289.568 li
272.448 291.873 li
282.816 295.688 li
289.152 291.008 li
292.752 291.008 li
295.056 288.632 li
308.808 288.057 li
315.648 291.008 li
330.912 289.856 li
334.152 291.873 li
329.328 296.336 li
327.888 299.937 li
328.464 309.512 li
319.248 320.816 320.112 331.328 330.912 341.192 cv
330.264 348.896 li
326.088 349.832 li
325.8 351.92 li
320.112 351.92 li
317.16 354.008 li
308.448 353.36 li
268.704 349.04 229.032 338.744 189.504 326.793 cv
176.112 295.257 li
cp
/1 
<<
/Name (PANTONE 357 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.79 0 0.87 0.56 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
ef
436.968 285.248 mo
447.695 281.576 li
456.695 279.2 li
460.871 277.977 li
475.128 279.776 li
476.568 277.688 li
485.279 275.024 li
496.871 272 li
512.424 277.688 li
519.336 277.688 li
529.416 281.217 li
537.479 279.776 li
571.752 272 li
590.832 271.424 li
600.336 274.665 li
601.56 285.969 li
595.871 302.096 li
591.191 306.849 li
592.056 309.801 li
589.032 324.488 li
583.92 326.289 li
562.176 320.889 li
481.392 302.385 li
448.344 295.185 li
446.256 291.873 442.079 288.488 436.968 285.248 cv
cp
ef
329.184 264.008 mo
338.472 261.849 li
338.472 261.128 li
339.336 258.969 li
349.056 258.969 li
355.752 264.801 li
354.6 266.169 li
338.904 264.801 li
328.32 264.944 li
329.184 264.008 li
cp
0 0 0 0.3 cmyk
ef
327.528 407.433 mo
326.952 405.272 328.608 407.433 329.76 405.849 cv
326.376 406.424 li
321.048 406.856 li
324.288 404.696 li
326.376 404.192 li
328.032 403.688 li
330.264 403.112 li
332.424 402.536 li
334.512 401.961 li
336.168 401.457 li
338.832 401.024 li
340.56 400.448 li
342.72 399.873 li
344.808 399.297 li
346.968 398.72 li
348.624 398.289 li
350.784 397.712 li
352.944 397.209 li
355.248 396.632 li
356.76 396.057 li
358.992 395.553 li
361.08 394.977 li
362.808 394.4 li
364.896 393.824 li
366.984 393.393 li
369.216 392.889 li
371.448 392.313 li
373.032 391.736 li
375.12 391.16 li
377.28 390.585 li
379.584 390.225 li
381.672 389.648 li
383.328 389.072 li
385.416 388.497 li
387.72 387.92 li
389.232 387.416 li
391.392 386.84 li
393.552 386.265 li
395.28 385.832 li
397.368 385.257 li
399.528 384.753 li
401.688 384.177 li
403.271 383.601 li
405.432 383.024 li
407.52 382.448 li
405.432 382.448 li
403.271 383.024 li
401.184 383.601 li
399.528 384.177 li
397.368 384.753 li
395.28 385.257 li
393.048 385.832 li
390.888 386.265 li
388.656 386.84 li
386.568 387.416 li
384.408 387.92 li
382.248 388.497 li
380.016 389.072 li
377.856 389.648 li
376.271 390.225 li
373.608 390.585 li
371.448 391.16 li
369.216 391.736 li
366.984 392.313 li
364.896 392.889 li
362.808 393.393 li
360.576 393.824 li
358.416 394.4 li
356.76 394.977 li
354.096 395.553 li
352.368 396.057 li
350.28 396.632 li
348.048 397.209 li
345.96 397.712 li
343.8 398.289 li
341.568 398.72 li
339.408 399.297 li
337.248 399.873 li
335.088 400.448 li
333.432 401.024 li
330.696 401.457 li
329.184 401.961 li
326.952 402.536 li
324.864 403.112 li
322.56 403.688 li
318.384 404.696 li
321.624 402.536 li
324.288 401.961 li
326.376 401.457 li
328.608 401.024 li
330.696 400.448 li
333 399.873 li
335.088 399.297 li
337.248 398.72 li
340.56 397.712 li
331.848 396.632 322.56 394.4 314.064 393.824 cv
303.696 394.4 li
302.112 393.393 li
303.696 387.416 306.936 381.873 308.016 376.544 cv
309.672 371.072 310.176 367.4 310.176 363.008 cv
320.472 349.977 li
325.368 350.553 li
325.368 347.889 li
330.264 347.889 li
330.264 342.992 li
329.76 340.328 li
325.368 337.017 323.136 333.776 322.2 330.536 cv
321.624 327.801 li
321.048 321.32 321.624 315.416 327.528 308.793 cv
327.528 298.568 li
331.848 292.16 li
333.432 292.16 li
333.432 279.705 li
333 277.473 li
326.952 267.681 li
325.944 266.096 li
326.376 263.937 329.76 262.856 331.848 260.696 cv
333.432 259.544 li
334.008 254.145 li
346.968 254.145 li
350.784 256.377 li
350.28 258.536 li
357.336 266.096 li
349.2 259.544 li
339.984 259.112 li
338.832 262.28 li
342.144 262.28 li
331.848 263.937 li
329.76 264.512 li
332.424 264.512 li
355.608 265.521 li
350.784 274.809 li
350.28 297.992 li
359.424 299.72 li
359.424 292.16 li
360 292.16 li
359.424 288.272 li
362.232 286.185 li
366.048 283.521 li
366.048 281.289 li
369.792 285.608 li
374.616 289.424 li
374.112 295.328 li
374.616 299.72 li
375.696 285.608 li
376.271 283.521 li
380.592 281.793 li
383.328 281.289 li
384.912 280.712 li
387.144 280.209 li
388.656 278.048 li
389.232 273.656 li
390.384 269.912 li
394.128 271.568 li
394.128 273.081 li
394.704 276.32 li
395.28 278.048 li
396.792 278.625 li
406.584 278.048 415.152 278.048 424.8 280.209 cv
432.936 282.368 440.495 285.032 447.552 291.585 cv
450.216 294.824 li
581.328 324.632 li
584.568 325.064 li
582.407 324.057 li
582.407 321.896 li
583.56 321.32 li
587.232 320.816 li
584.568 320.816 li
582.983 318.081 li
584.568 318.081 li
589.968 317.504 li
589.392 316.568 li
583.56 315.992 li
583.991 314.265 li
587.808 314.265 li
589.392 313.761 li
589.392 312.177 li
583.991 311.601 li
586.224 309.944 li
588.384 309.368 li
591.119 308.433 li
585.72 308.433 li
586.656 306.705 li
588.384 305.625 li
592.128 304.04 li
589.968 304.04 li
587.232 304.616 li
584.568 305.121 li
589.968 301.809 li
587.232 301.305 li
591.695 299.72 li
593.783 299.145 li
596.52 296.408 li
594.792 296.408 li
591.695 296.984 li
588.384 294.32 li
588.384 292.592 li
593.208 292.592 li
598.104 292.16 li
597.023 291.585 li
593.208 291.585 li
594.792 287.769 li
596.52 287.769 li
599.256 285.608 li
595.367 282.944 li
599.832 283.521 li
599.832 282.368 li
598.104 282.368 li
599.832 280.712 li
600.191 276.32 li
591.695 274.809 li
588.384 273.081 li
573.191 273.081 li
571.535 273.656 li
567.72 274.232 li
565.056 275.385 li
561.744 276.32 li
559.656 276.896 li
557.495 277.473 li
554.184 278.048 li
551.52 278.625 li
548.855 279.128 li
545.111 279.705 li
542.808 280.209 li
539.64 280.712 li
537.912 281.289 li
546.048 284.024 li
555.336 285.608 li
546.623 286.761 li
539.063 284.024 532.584 282.944 525.6 282.368 cv
516.312 279.128 li
512.64 279.705 li
507.672 278.048 li
498.455 273.656 li
495.216 273.081 li
488.664 275.744 li
486 276.32 li
482.256 276.896 li
479.52 278.048 li
476.855 279.128 li
477.863 280.209 li
482.832 280.712 li
483.84 280.712 li
490.896 285.608 li
502.199 288.272 li
488.664 287.769 li
481.68 283.521 li
470.88 280.209 li
460.079 279.128 li
457.848 279.705 li
452.951 281.289 li
450.792 281.793 li
449.208 282.368 li
446.472 282.944 li
444.384 283.521 li
445.392 281.289 li
448.056 280.712 li
450.216 279.705 li
452.951 279.128 li
459.504 276.896 li
473.544 277.473 li
476.279 276.896 li
482.832 274.232 li
486.504 273.656 li
489.816 272.576 li
494.64 270.992 li
499.032 270.416 li
504.936 272.576 li
509.328 274.809 li
510.912 275.385 li
516.312 275.744 li
520.128 275.744 li
525.023 279.128 li
530.928 279.705 li
535.824 279.128 li
538.488 278.625 li
540.144 278.048 li
542.376 277.473 li
545.111 276.896 li
548.279 276.32 li
550.512 275.744 li
552.672 275.385 li
554.76 274.809 li
557.495 274.232 li
559.079 273.656 li
561.312 273.081 li
563.472 272.576 li
565.632 272.145 li
567.359 271.568 li
570.023 270.992 li
571.535 270.416 li
574.92 269.912 li
583.991 269.912 li
585.72 269.336 li
589.968 268.761 li
600.191 271.568 li
600.191 268.257 li
601.92 272.145 li
610.991 275.385 620.855 275.385 630 278.048 cv
631.152 275.744 li
630 276.32 li
627.264 276.32 li
625.176 275.385 li
626.256 273.081 li
632.304 273.081 li
634.968 272.145 li
637.056 271.568 li
631.152 269.912 li
631.728 265.521 li
629.568 265.521 li
632.736 263.937 li
633.816 262.28 li
637.056 262.28 li
636.552 260.121 li
638.712 257.457 li
639.287 256.881 641.376 257.457 640.439 255.801 cv
640.8 251.984 li
640.439 249.896 li
642.527 246.081 li
641.951 248.24 li
642.527 253.136 li
644.039 253.136 li
644.616 255.801 643.535 254.72 642.527 255.297 cv
645.191 255.801 li
643.535 259.112 li
648 259.112 li
644.616 262.856 li
643.535 264.512 li
651.24 264.512 li
648.504 266.672 li
646.271 267.248 li
644.039 268.257 li
648.936 268.761 li
653.904 268.257 li
651.24 269.912 li
648 272.576 li
645.191 273.081 li
650.664 273.656 li
654.407 274.232 li
652.752 277.473 li
650.664 278.625 li
652.176 278.625 li
655.488 278.048 li
653.904 280.712 li
665.783 276.896 li
668.448 276.32 li
671.76 275.744 li
672.336 273.081 li
669.6 273.081 li
670.607 270.992 li
674.424 270.992 li
679.32 268.257 li
675.575 267.681 li
672.912 268.257 li
674.424 266.672 li
677.088 266.096 li
681.479 264.512 li
680.472 263.937 li
675.575 263.937 li
675 261.776 li
673.848 262.28 li
671.76 260.696 li
675 257.961 li
673.271 257.457 li
673.848 255.801 li
678.816 255.801 li
679.896 255.297 li
676.584 252.561 li
683.136 253.712 li
683.712 252.561 li
682.56 252.561 li
682.56 248.744 li
683.712 248.24 li
685.224 248.24 li
686.376 243.272 li
685.8 237.944 li
687.455 240.608 li
688.032 245.576 li
691.848 246.081 li
688.535 250.977 li
692.783 250.977 li
692.783 255.297 li
689.616 255.801 li
692.352 257.457 li
696.096 257.961 li
694.512 260.121 li
693.359 260.696 li
690.695 260.696 li
689.616 261.776 li
693.936 261.776 li
698.256 262.856 li
696.096 264.944 li
697.248 267.681 li
700.92 268.257 li
696.672 271.568 li
693.936 272.145 li
697.824 272.576 li
696.672 274.232 li
699.912 273.656 li
702.072 273.081 li
706.32 272.576 li
705.384 274.232 li
701.495 276.32 li
703.152 276.32 li
706.32 275.744 li
705.384 277.473 li
716.184 279.128 727.56 280.712 738.864 281.289 cv
796.248 249.32 li
795.744 247.16 li
794.736 243.849 li
794.16 241.761 li
793.584 239.096 li
793.079 236.864 li
792.504 234.2 li
791.928 232.04 li
791.352 229.305 li
790.775 226.064 li
790.416 222.824 li
789.84 218.504 li
789.264 214.112 li
788.688 209.289 li
788.111 203.816 li
787.607 191.576 li
787.176 189.344 li
787.176 165.008 788.111 140.672 794.736 116.265 cv
677.88 57.5122 546.552 26.6245 415.656 27.5605 cv
412.991 28.0645 li
395.856 28.0645 li
383.832 28.4966 li
373.608 29.0723 li
366.479 29.6484 li
358.992 30.2246 li
352.368 30.8003 li
346.968 31.1602 li
342.144 31.7363 li
336.744 32.3125 li
332.424 32.8887 li
327.528 33.4644 li
323.136 33.9683 li
318.816 34.5444 li
315 35.0483 li
310.752 35.6245 li
307.512 36.2002 li
303.696 36.6323 li
299.952 37.2085 li
296.712 37.7842 li
293.4 38.3604 li
290.664 38.8643 li
287.424 39.2964 li
284.256 39.8726 li
280.44 40.4482 li
278.28 41.0244 li
274.968 41.6006 li
272.304 42.0322 li
269.064 42.6084 li
266.328 43.1846 li
263.664 43.7603 li
260.928 44.3364 li
258.192 44.7686 li
255.528 45.3442 li
253.296 45.8486 li
250.632 46.4243 li
247.968 47.0005 li
245.736 47.4326 li
243.072 48.0083 li
240.84 48.5845 li
238.104 49.1602 li
236.592 49.6646 li
233.856 50.1685 li
231.696 50.7441 li
228.96 51.3203 li
227.304 51.8965 li
225.144 52.4727 li
223.056 52.8325 li
220.32 53.4082 li
218.736 53.9844 li
216.072 54.5605 li
214.344 55.1362 li
212.256 55.5684 li
210.024 56.1445 li
207.936 56.6484 li
205.632 57.2246 li
204.12 57.8003 li
201.888 58.3042 li
199.8 58.8804 li
197.496 59.4565 li
194.328 60.6084 li
192.096 60.9683 li
190.512 61.5444 li
188.352 62.1206 li
186.264 62.6963 li
183.024 63.6323 li
180.792 64.2085 li
177.552 65.3604 li
175.464 65.9365 li
170.496 67.5923 li
168.264 68.1685 li
161.855 70.2563 li
159.624 70.8325 li
156.456 71.9844 li
153.792 72.9204 li
151.488 73.4966 li
105.552 90.8486 li
102.744 91.3525 li
50.832 114.68 li
48.0957 115.256 li
42.1919 119 li
42.1919 120.656 li
42.6958 122.816 li
44.3516 127.641 li
44.9277 130.304 li
45.3599 132.537 li
45.9355 136.353 li
46.5117 139.592 li
47.0879 143.336 li
47.6641 147.152 li
48.0957 151.473 li
48.6719 155.864 li
49.2476 162.272 li
49.8237 170.913 li
50.3276 197.984 50.3276 225.488 42.6958 252.561 cv
41.688 257.961 li
70.272 274.809 99.5039 289.928 128.231 302.961 cv
133.704 303.465 li
137.448 301.809 li
139.607 301.305 li
142.992 300.729 li
145.08 299.145 li
148.32 298.568 li
150.48 297.992 li
148.32 295.904 li
152.064 296.408 li
149.399 295.328 li
153.216 293.169 li
151.488 293.169 li
154.224 291.585 li
155.952 289.928 li
148.32 290.504 li
149.399 288.849 li
151.056 287.769 li
153.792 287.192 li
156.96 286.761 li
159.191 286.185 li
159.191 285.032 li
157.464 285.032 li
154.224 285.608 li
155.952 281.793 li
161.28 280.209 li
160.2 279.705 li
154.8 279.705 li
154.224 276.896 155.376 278.048 156.456 277.473 cv
159.624 276.32 li
161.28 275.744 li
159.191 275.744 li
153.792 275.744 li
153.792 273.081 li
158.04 272.145 li
156.456 269.912 li
158.616 270.992 159.191 272.145 160.2 270.992 cv
162.936 267.681 li
162.36 266.096 li
166.176 264.944 li
165.023 263.937 li
166.176 261.272 li
167.76 261.272 li
168.264 256.377 li
169.416 257.457 li
169.992 260.696 li
172.656 262.28 li
173.736 264.944 li
172.08 265.521 li
171.072 267.681 li
172.08 267.681 li
177.552 268.761 li
175.464 272.145 li
177.552 271.568 li
178.128 274.809 li
177.552 276.896 li
181.296 278.048 li
180.216 280.209 li
183.96 280.209 li
183.528 282.368 li
186.264 282.944 li
185.112 287.192 li
180.792 289.424 li
185.112 289.928 li
187.848 289.424 li
189.432 289.928 li
194.832 287.192 li
198.072 286.761 li
200.808 286.185 li
202.968 285.608 li
206.784 285.032 li
212.256 282.944 li
214.344 282.368 li
216.432 280.712 218.16 279.705 219.744 279.128 cv
221.4 278.048 li
227.304 278.048 li
236.592 282.368 li
242.496 284.457 li
249.48 286.185 li
253.296 286.761 li
256.104 286.185 li
260.352 287.769 li
269.064 288.272 li
271.152 289.424 li
274.968 291.585 li
283.68 293.169 li
288.576 289.928 li
291.24 289.424 li
293.4 287.769 li
294.48 287.192 li
299.376 287.192 li
302.616 286.761 li
303.192 286.761 li
309.096 286.185 li
313.488 288.272 li
331.271 289.928 li
328.608 291.585 li
325.368 292.16 li
319.392 291.585 li
316.728 292.592 li
314.064 292.592 li
308.592 289.928 li
299.376 289.928 li
296.136 290.504 li
292.896 292.592 li
289.728 292.592 li
286.344 294.824 li
283.104 297.992 li
276.624 304.616 li
274.464 305.121 li
271.152 308.433 li
258.768 314.265 li
255.528 318.081 li
249.12 320.816 li
244.728 324.632 li
238.104 326.793 li
234.432 327.368 li
230.544 328.377 li
233.28 325.641 li
236.016 325.064 li
238.104 324.632 li
240.84 323.553 li
246.816 318.656 li
253.296 315.416 li
257.184 309.368 262.584 309.944 267.48 306.128 cv
270.72 302.961 li
273.456 301.809 li
280.44 295.904 li
276.12 295.328 li
272.304 293.169 li
266.328 292.592 li
256.104 289.928 li
253.296 290.504 li
248.544 288.849 li
241.92 287.769 236.592 286.761 230.04 282.368 cv
223.056 281.289 li
210.024 286.761 li
207.936 287.192 li
205.632 287.769 li
201.888 288.272 li
199.224 288.849 li
194.328 289.424 li
193.248 289.928 li
190.008 292.16 li
185.112 293.169 li
179.208 296.984 li
180.216 297.561 li
185.688 296.984 li
188.352 296.408 li
184.536 300.297 li
185.112 301.305 li
187.272 302.385 li
183.96 304.04 li
186.696 304.04 li
188.352 303.465 li
192.096 302.385 li
190.008 304.616 li
188.928 307.856 li
187.272 308.433 li
191.088 308.433 li
193.824 307.28 191.664 309.944 191.088 311.096 cv
192.672 311.096 li
192.096 313.761 li
190.512 315.992 li
193.248 315.992 li
189.432 319.736 li
194.832 318.656 li
192.672 321.896 li
190.512 322.4 li
192.096 322.4 li
195.984 321.896 li
191.664 325.641 li
231.696 337.017 li
258.768 343.568 284.256 349.977 310.752 353.216 cv
304.776 364.088 li
300.96 381.512 li
271.728 376.04 li
271.728 374.889 li
183.024 360.849 93.6719 323.553 4.75146 268.761 cv
5.32764 264.944 li
7.48779 258.536 9.64746 253.136 10.7998 246.656 cv
16.1997 223.904 18.2881 203.24 18.2881 181.784 cv
17.7837 173.72 li
17.3516 167.672 li
16.7759 162.849 li
16.1997 158.601 li
15.624 154.712 li
15.0479 151.473 li
14.6157 148.736 li
14.0396 146 li
13.4639 143.336 li
12.8877 141.249 li
12.312 138.44 li
11.8799 136.353 li
11.3037 134.265 li
10.7998 131.96 li
10.2236 129.8 li
9.64746 128.216 li
9.21582 126.057 li
0 102.729 li
35.1357 85.4482 70.272 70.2563 105.552 56.6484 cv
109.368 56.1445 li
139.607 44.7686 li
141.84 44.3364 li
146.664 42.6084 li
148.824 42.0322 li
153.792 40.4482 li
155.952 39.8726 li
158.04 39.2964 li
161.28 38.3604 li
163.512 37.7842 li
165.023 37.2085 li
167.328 36.6323 li
170.496 35.6245 li
172.656 35.0483 li
174.312 34.5444 li
176.399 33.9683 li
178.632 33.4644 li
180.216 32.8887 li
182.448 32.3125 li
183.96 31.7363 li
186.264 31.1602 li
188.352 30.8003 li
190.512 30.2246 li
192.096 29.6484 li
194.832 29.0723 li
196.56 28.4966 li
198.648 28.0645 li
200.808 27.5605 li
203.544 26.9844 li
205.128 26.4082 li
207.936 25.8325 li
210.024 25.3286 li
212.688 24.7524 li
214.344 24.1763 li
217.008 23.6006 li
218.736 23.0962 li
221.4 22.6646 li
224.136 22.0884 li
226.296 21.5122 li
228.96 20.9365 li
231.696 20.3604 li
234.432 20.0005 li
237.168 19.4243 li
239.832 18.8486 li
241.92 18.2725 li
245.304 17.6963 li
248.544 17.1924 li
251.208 16.6162 li
254.448 16.1123 li
257.184 15.5361 li
259.92 14.9604 li
263.088 14.5283 li
265.752 13.9521 li
269.064 13.3765 li
272.304 12.8003 li
276.12 12.2964 li
279.288 11.8643 li
283.104 11.2886 li
286.92 10.7124 li
290.664 10.1362 li
293.904 9.56055 li
297.792 9.12842 li
301.536 8.55225 li
305.352 7.97656 li
309.672 7.40039 li
314.064 6.82422 li
318.384 6.39258 li
323.712 5.81641 li
328.032 5.3125 li
333.432 4.73633 li
338.832 4.16016 li
344.232 3.72852 li
350.784 3.15234 li
357.912 2.57617 li
364.896 2.00049 li
373.608 1.49658 li
383.328 0.992188 li
396.792 0.416504 li
479.016 -2.24756 561.744 7.97656 644.039 28.0645 cv
657.648 31.1602 li
670.104 34.5444 li
725.256 49.1602 779.399 72.3442 834.191 94.5923 cv
823.824 123.32 820.152 150.896 818.495 179.048 cv
819.072 193.736 li
819.647 200 li
820.152 204.969 li
820.584 208.712 li
821.16 213.104 li
821.736 216.849 li
822.312 219.512 li
822.888 222.824 li
823.248 225.488 li
823.824 228.225 li
824.399 230.385 li
824.976 232.473 li
825.552 234.776 li
826.056 236.864 li
826.632 239.096 li
827.208 240.608 li
827.783 242.912 li
834.191 259.112 li
834.768 260.121 li
834.191 262.856 li
786.888 290.648 711.72 335 658.224 346.232 cv
654.983 347.673 li
652.176 348.465 li
650.088 349.04 li
648 349.977 li
644.039 351.128 li
638.712 352.784 li
637.056 353.216 li
634.968 353.793 li
630 355.448 li
627.84 356.024 li
623.016 357.536 li
620.855 358.112 li
619.128 358.688 li
617.039 359.265 li
615.455 359.84 li
613.296 360.272 li
611.568 360.849 li
609.479 361.424 li
607.968 361.928 li
605.664 362.504 li
603.504 363.008 li
601.92 363.585 li
599.832 364.088 li
597.527 364.665 li
595.367 365.24 li
593.208 365.673 li
591.119 366.248 li
588.96 366.824 li
586.224 367.4 li
583.991 367.977 li
581.904 368.408 li
579.672 368.984 li
577.008 369.488 li
574.92 370.064 li
571.535 370.641 li
569.448 371.072 li
567.359 371.648 li
564.479 372.225 li
561.744 372.801 li
559.656 373.377 li
556.92 373.809 li
554.184 374.385 li
551.52 374.889 li
548.855 375.465 li
545.544 376.04 li
542.808 376.544 li
539.64 377.12 li
536.976 377.696 li
534.312 378.2 li
530.928 378.776 li
527.688 379.209 li
524.448 379.784 li
521.208 380.36 li
518.039 380.937 li
513.575 381.512 li
510.336 381.873 li
506.016 382.448 li
502.199 383.024 li
498.455 383.601 li
493.703 384.177 li
489.24 384.753 li
484.991 385.257 li
480.096 385.832 li
474.119 386.265 li
468.72 386.84 li
462.744 387.416 li
456.191 387.92 li
448.056 388.497 li
438.407 389.072 li
426.455 389.648 li
416.232 390.225 li
404.279 390.585 li
402.768 391.16 li
400.032 392.313 li
397.944 391.16 397.944 390.225 397.944 389.072 cv
396.216 389.072 li
397.368 391.16 395.856 390.585 394.704 389.648 cv
393.552 389.648 li
395.28 390.225 395.28 392.313 397.368 391.736 cv
392.472 391.16 li
391.896 392.313 389.232 392.313 390.888 393.824 cv
389.232 393.393 li
388.656 390.585 li
386.568 391.736 li
388.08 392.889 li
388.08 396.057 li
389.808 393.393 379.584 401.024 385.992 394.4 cv
385.992 392.889 li
385.416 396.057 li
382.752 397.209 li
383.832 393.393 li
383.328 392.313 li
382.752 394.977 li
380.592 393.393 li
380.016 398.289 li
378.432 398.72 li
378.432 396.632 li
378.432 393.824 li
375.12 394.4 li
375.696 396.057 li
377.856 396.057 li
378.432 397.209 377.28 399.873 376.271 398.289 cv
374.616 396.632 li
374.112 398.289 li
373.032 400.448 li
371.88 395.553 li
371.448 397.712 li
369.216 396.057 li
370.296 400.448 li
368.136 400.448 li
366.479 398.289 li
364.896 399.297 li
364.896 397.712 li
364.32 397.712 362.808 398.289 363.744 398.72 cv
360 398.72 li
357.912 401.457 li
356.184 399.873 li
354.672 400.448 li
357.336 403.688 li
357.336 405.272 li
354.096 402.536 li
351.36 402.536 li
352.368 404.696 li
346.536 402.536 li
345.384 403.112 li
345.384 404.696 li
342.144 404.192 li
339.984 405.849 li
336.744 405.272 li
335.088 405.849 li
333 406.424 li
328.608 408.008 li
327.528 407.433 li
cp
0 0 0 1 cmyk
ef
361.008 401.528 mo
359.928 399.873 364.248 400.448 362.736 401.961 cv
361.008 401.528 li
cp
ef
365.4 401.528 mo
364.248 399.873 368.64 400.448 366.984 401.961 cv
365.4 401.528 li
cp
ef
336.096 395.624 mo
332.352 395.048 li
339.912 395.048 li
336.096 395.624 li
cp
0 0 0 0 cmyk
ef
305.856 391.809 mo
310.68 383.673 312.264 376.112 315.504 367.4 cv
317.736 366.824 li
319.824 366.248 li
322.488 365.744 li
324.792 365.313 li
327.456 364.736 li
330.192 364.16 li
332.352 363.585 li
334.44 363.008 li
337.176 362.576 li
339.336 362.001 li
341.496 361.497 li
344.16 360.92 li
346.896 360.344 li
349.128 359.84 li
351.792 359.265 li
354.024 358.761 li
356.688 358.185 li
361.008 357.608 li
357.264 376.112 li
356.688 379.28 li
351.792 385.257 344.736 386.336 339.336 388.568 cv
336.672 389.072 li
334.44 389.648 li
331.776 390.225 li
329.112 390.656 li
326.304 391.232 li
323.064 391.809 li
318.744 392.385 li
305.856 391.809 li
cp
/2 
<<
/Name (PANTONE Red 032 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0.55 0.52 0 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
0.6 sep
ef
349.632 392.313 mo
342.648 391.16 li
352.872 391.736 li
349.632 392.313 li
cp
0 0 0 0 cmyk
ef
309.096 390.225 mo
311.76 384.177 315 378.2 316.152 371.648 cv
317.808 373.809 li
313.488 387.92 li
316.728 381.944 318.816 375.465 319.896 369.488 cv
319.392 381.944 li
318.384 385.832 li
321.624 377.696 li
323.136 368.984 li
322.2 385.257 li
324.864 379.209 325.944 373.377 326.952 367.977 cv
325.368 386.84 li
328.608 378.2 li
329.184 374.385 330.264 370.641 330.264 366.824 cv
329.184 386.265 li
331.848 379.784 333.432 373.377 333.432 366.824 cv
333 385.257 li
335.664 379.209 336.744 373.377 337.248 366.824 cv
337.248 384.177 li
338.832 383.024 li
339.984 377.696 340.56 372.225 341.064 366.824 cv
341.568 382.448 li
342.72 382.448 li
345.384 366.824 li
344.808 363.585 li
346.536 365.24 li
345.96 380.937 li
346.968 379.784 li
348.048 374.385 348.624 369.488 348.624 364.16 cv
350.28 365.673 li
350.28 379.209 li
351.36 373.809 351.864 368.408 351.864 363.008 cv
353.52 370.641 li
355.248 361.928 li
354.096 360.344 li
358.416 359.84 li
355.248 379.784 li
351.864 381.512 349.704 381.944 346.968 383.024 cv
343.8 384.177 li
337.248 386.265 li
334.512 386.84 li
332.424 387.416 li
329.76 387.92 li
326.952 388.497 li
323.712 389.072 li
319.896 389.648 li
315.576 390.225 li
309.096 390.225 li
cp
0 0 0 1 cmyk
ef
402.12 389.072 mo
403.271 388.497 li
402.12 389.072 li
cp
0 0 0 0 cmyk
ef
360.576 389.072 mo
350.784 387.92 li
363.744 388.497 li
360.576 389.072 li
cp
ef
404.783 388.497 mo
404.208 385.761 li
407.016 385.257 li
408.023 386.265 li
408.6 389.072 407.016 387.92 405.936 388.497 cv
404.783 388.497 li
cp
ef
410.832 386.336 mo
410.832 384.177 li
413.495 386.912 li
410.832 386.336 li
cp
ef
374.544 385.832 mo
358.848 383.601 li
376.2 385.257 li
374.544 385.832 li
cp
ef
414.648 385.832 mo
413.495 383.024 li
415.656 383.024 li
414.648 385.832 li
cp
ef
416.808 384.824 mo
416.808 382.521 li
418.464 385.257 li
416.808 384.824 li
cp
ef
418.896 383.673 mo
418.896 381.944 li
422.64 380.937 li
423.72 381.944 li
423.72 380.433 li
423.72 381.512 426.96 381.512 425.304 383.096 cv
421.488 383.673 li
420.336 383.096 li
418.896 383.673 li
cp
ef
410.256 381.008 mo
412.92 381.585 li
410.256 381.008 li
cp
ef
426.96 381.512 mo
426.384 380.937 li
426.96 379.209 li
430.199 381.873 li
426.96 381.512 li
cp
ef
405.359 380.36 mo
405.359 379.209 li
407.016 379.209 li
408.023 378.128 li
409.176 372.225 li
411.912 368.984 li
411.407 373.736 li
410.832 375.465 li
407.016 380.937 li
405.359 380.36 li
cp
0 0 0 0.3 cmyk
ef
431.783 380.36 mo
430.848 378.128 li
433.512 377.624 li
431.783 380.36 li
cp
0 0 0 0 cmyk
ef
434.52 379.209 mo
434.52 377.048 li
436.607 376.473 435.672 378.705 436.248 379.784 cv
434.52 379.209 li
cp
ef
436.68 378.776 mo
436.68 376.544 li
440.495 378.2 li
436.68 378.776 li
cp
ef
441.575 376.544 mo
442.079 374.889 443.232 377.624 442.656 377.624 cv
441.575 376.544 li
cp
ef
444.384 376.112 mo
442.656 375.536 445.392 374.385 444.816 375.536 cv
444.384 376.112 li
cp
ef
446.472 375.465 mo
446.472 373.736 li
446.472 375.465 li
cp
ef
311.256 374.961 mo
312.336 364.736 li
313.992 370.641 li
311.256 374.961 li
cp
ef
449.136 374.961 mo
450.216 373.809 li
449.136 374.961 li
cp
ef
430.271 373.448 mo
431.855 370.641 li
432.359 364.16 li
434.592 364.16 li
434.592 367.4 li
434.016 369.057 li
431.352 373.809 li
430.271 373.448 li
cp
0 0 0 0.3 cmyk
ef
452.52 373.809 mo
452.52 372.225 li
454.607 371.648 453.527 373.377 454.104 374.385 cv
452.52 373.809 li
cp
0 0 0 0 cmyk
ef
375.624 373.448 mo
377.28 370.064 li
377.856 363.008 li
376.776 359.84 li
375.048 356.601 li
376.776 356.601 li
379.944 356.024 li
383.256 355.448 li
386.496 355.448 li
387.648 358.185 li
388.08 360.92 li
387.648 371.145 li
383.76 371.72 li
382.176 372.297 li
379.944 372.873 li
377.856 373.448 li
375.624 373.448 li
cp
0 0 0 0.3 cmyk
ef
457.271 371.72 mo
457.271 370.641 li
459.504 370.641 li
457.271 371.72 li
cp
0 0 0 0 cmyk
ef
393.552 369.057 mo
394.704 367.4 li
397.944 367.4 li
397.944 369.488 li
396.216 370.064 li
393.552 369.057 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
398.952 368.48 mo
398.952 366.824 li
402.12 366.824 li
405.359 366.248 li
409.176 365.673 li
411.983 365.313 li
411.983 367.4 li
408.6 367.4 li
405.936 367.977 li
402.12 368.48 li
398.952 368.48 li
cp
ef
365.4 366.824 mo
362.736 365.673 li
362.736 356.601 li
367.488 357.104 li
367.488 356.024 li
362.736 355.448 li
364.248 352.784 li
365.4 352.209 li
369.72 353.216 li
368.063 359.265 li
368.063 360.272 li
368.063 367.4 li
365.4 366.824 li
cp
0 0 0 0.3 cmyk
ef
475.128 366.824 mo
476.855 365.673 li
475.128 366.824 li
cp
0 0 0 0 cmyk
ef
412.991 366.248 mo
414.144 364.665 li
417.384 364.665 li
421.056 364.088 li
421.056 365.673 li
418.464 365.673 li
415.224 366.248 li
412.991 366.248 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
313.992 365.673 mo
313.416 363.512 li
317.16 355.952 li
319.392 353.793 li
316.08 364.088 li
318.312 364.088 li
320.976 363.512 li
323.64 362.937 li
325.872 362.504 li
327.96 361.928 li
330.624 361.424 li
332.928 360.849 li
335.016 360.272 li
337.824 359.769 li
340.488 359.265 li
343.152 358.688 li
345.312 358.112 li
348.048 357.536 li
350.712 357.104 li
352.872 356.528 li
357.264 355.952 li
356.688 357.104 li
354.6 357.536 li
352.296 358.112 li
349.632 358.688 li
347.472 359.265 li
344.808 359.769 li
343.152 360.272 li
340.488 360.849 li
337.824 361.424 li
335.016 361.928 li
332.352 362.504 li
330.624 362.937 li
327.96 363.512 li
325.872 364.088 li
323.064 364.665 li
320.976 365.24 li
318.816 365.673 li
313.992 365.673 li
cp
0 0 0 0.3 cmyk
ef
422.64 364.736 mo
422.64 363.585 li
425.808 363.585 li
429.624 363.008 li
432.287 362.504 li
433.943 363.008 li
430.199 363.585 li
428.112 364.16 li
425.304 364.736 li
422.64 364.736 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
364.32 363.585 mo
363.384 362.504 li
363.384 359.84 li
364.32 358.112 li
366.552 359.265 li
366.552 361.424 li
364.32 363.585 li
cp
0 0 0 1 cmyk
ef
394.056 363.008 mo
395.208 361.424 li
397.872 361.424 li
394.056 363.008 li
cp
ef
398.52 362.576 mo
398.52 361.497 li
400.104 360.92 li
404.279 360.92 li
407.52 360.344 li
406.008 362.576 li
401.688 362.576 li
398.52 362.576 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
409.176 361.497 mo
411.407 359.84 li
411.407 360.92 410.832 361.497 410.256 361.928 cv
409.176 361.497 li
cp
ef
491.976 360.92 mo
491.976 360.92 493.703 361.497 492.552 361.928 cv
491.976 360.92 li
cp
0 0 0 0 cmyk
ef
412.344 360.92 mo
412.344 359.84 li
414.648 359.84 li
418.896 359.265 li
421.56 358.688 li
421.56 360.92 li
416.736 360.92 li
412.344 360.92 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
398.952 360.344 mo
398.952 358.112 li
399.528 356.601 li
402.695 351.705 li
403.848 351.128 li
408.096 352.209 li
410.832 358.112 li
408.6 359.84 li
407.52 356.601 li
405.936 354.368 li
407.52 359.84 li
405.936 359.84 li
400.032 360.344 li
398.952 360.344 li
cp
0 0 0 0.3 cmyk
ef
423.144 359.265 mo
423.144 358.112 li
423.72 356.024 li
426.384 351.705 li
428.112 350.553 li
429.048 350.553 li
432.863 353.216 li
433.439 354.368 li
431.279 357.104 li
430.775 353.793 li
429.048 352.209 li
430.775 356.024 li
429.624 357.536 li
426.384 357.536 li
430.199 358.112 li
430.199 359.84 li
426.384 359.84 li
423.144 359.265 li
cp
ef
162.36 358.761 mo
164.592 358.185 li
162.36 358.761 li
cp
0 0 0 0 cmyk
ef
443.232 359.265 mo
443.232 357.536 li
445.896 356.528 445.896 360.849 444.384 359.84 cv
443.232 359.265 li
cp
0 0 0 0.3 cmyk
ef
472.392 359.265 mo
472.392 355.448 li
474.119 354.368 471.455 356.024 472.392 353.793 cv
471.96 337.521 li
480.6 337.521 li
494.64 337.017 li
481.104 336.512 li
471.96 337.017 li
471.96 334.28 li
489.24 334.28 li
471.96 333.705 li
471.96 328.377 li
472.968 327.801 li
471.96 315.416 li
478.943 315.92 li
478.943 323.48 li
479.016 326.217 li
478.943 328.377 li
486 328.881 li
485.928 327.801 li
485.928 316.928 li
491.399 317.504 li
491.399 328.881 li
497.304 329.457 li
496.728 328.377 li
496.728 318.081 li
501.191 318.656 li
501.191 329.457 li
510.336 330.032 li
510.336 333.705 li
491.976 333.705 li
505.439 334.28 li
510.336 334.28 li
509.328 336.512 li
496.367 336.512 li
510.336 337.017 li
509.904 347.889 li
510.336 351.128 li
507.168 351.705 li
504.504 352.209 li
502.199 352.712 li
500.112 353.216 li
497.88 353.793 li
495.216 354.368 li
493.128 354.873 li
490.896 355.448 li
488.232 356.024 li
485.928 356.528 li
483.84 357.104 li
481.104 357.536 li
478.943 358.112 li
476.855 358.688 li
474.119 359.265 li
472.392 359.265 li
cp
ef
431.783 358.761 mo
431.783 357.608 li
434.52 357.608 li
431.783 358.761 li
cp
1 /2 /CSD get_res sepcs
0.6 sep
ef
445.896 358.761 mo
445.896 354.44 li
445.896 349.473 li
445.32 340.977 li
447.048 340.4 li
446.472 320.889 li
446.472 318.152 li
447.552 316.568 li
465.407 321.969 li
465.407 344.145 li
465.407 347.961 li
465.983 353.864 li
462.744 355.521 li
460.584 356.024 li
457.848 356.601 li
455.616 357.177 li
453.455 357.608 li
450.792 358.185 li
447.983 358.761 li
445.896 358.761 li
cp
0 0 0 0.3 cmyk
ef
442.656 356.601 mo
442.656 354.873 li
445.32 357.177 li
442.656 356.601 li
cp
ef
375.624 355.448 mo
375.624 352.712 li
377.28 352.209 li
379.944 352.209 li
382.68 351.705 li
382.68 354.873 li
380.52 354.873 li
376.776 355.448 li
375.624 355.448 li
cp
ef
449.712 354.944 mo
449.712 338.169 li
449.712 334.928 li
449.136 320.313 li
462.744 324.705 li
462.744 330.536 li
462.744 341.336 li
463.248 353.289 li
461.16 353.289 li
458.352 353.864 li
455.616 354.44 li
453.455 354.944 li
449.712 354.944 li
cp
0 0 0 1 cmyk
ef
475.128 354.944 mo
474.048 353.289 478.367 353.864 476.855 355.521 cv
475.128 354.944 li
cp
ef
477.792 354.368 mo
476.855 352.712 481.032 353.216 479.52 354.801 cv
477.792 354.368 li
cp
ef
442.656 353.864 mo
442.656 352.784 li
445.32 352.784 li
442.656 353.864 li
cp
0 0 0 0.3 cmyk
ef
480.527 353.864 mo
479.448 352.209 483.768 352.784 482.184 354.44 cv
480.527 353.864 li
cp
0 0 0 1 cmyk
ef
342.648 353.289 mo
334.44 352.784 li
334.44 342.488 li
341.496 342.488 li
345.312 341.912 li
345.888 343.568 li
345.888 353.864 li
342.648 353.289 li
cp
0 0 0 0.3 cmyk
ef
483.264 353.289 mo
482.184 351.705 486.504 352.209 484.991 353.864 cv
483.264 353.289 li
cp
0 0 0 1 cmyk
ef
346.464 352.784 mo
346.464 341.84 li
348.048 341.84 li
354.024 341.336 li
356.112 340.904 li
356.112 350.553 li
353.448 351.705 li
351.288 352.209 li
349.632 352.784 li
346.464 352.784 li
cp
0 0 0 0.3 cmyk
ef
485.928 352.784 mo
484.991 351.128 489.168 351.705 487.656 353.216 cv
485.928 352.784 li
cp
0 0 0 1 cmyk
ef
488.592 352.209 mo
488.16 350.553 489.168 351.705 490.32 351.128 cv
495.144 349.977 li
493.056 351.705 li
490.32 352.209 li
488.592 352.209 li
cp
ef
372.96 351.705 mo
372.96 349.977 li
372.96 311.528 li
375.048 314.265 li
375.048 352.136 li
372.96 351.705 li
cp
0 0 0 0.3 cmyk
ef
443.232 350.553 mo
444.816 351.632 li
443.232 350.553 li
cp
0 0 0 0 cmyk
ef
496.296 350.553 mo
495.144 348.969 499.464 349.4 497.88 351.128 cv
496.296 350.553 li
cp
0 0 0 1 cmyk
ef
498.96 350.048 mo
497.808 348.465 502.128 349.04 500.616 350.624 cv
498.96 350.048 li
cp
ef
512.495 350.048 mo
512.928 346.809 li
512.495 337.017 li
518.904 337.017 li
522.72 337.017 li
539.568 336.512 li
539.568 341.912 li
537.264 341.912 li
539.568 341.912 li
539.568 344.648 li
537.264 344.648 li
535.176 345.225 li
533.016 345.729 li
530.855 346.305 li
528.191 346.809 li
526.032 347.313 li
523.296 347.889 li
521.136 348.465 li
518.904 349.04 li
516.24 349.473 li
512.495 350.048 li
cp
0 0 0 0.3 cmyk
ef
501.768 349.473 mo
500.616 347.889 504.936 348.465 503.352 350.048 cv
501.768 349.473 li
cp
0 0 0 1 cmyk
ef
376.271 349.04 mo
376.271 346.232 li
375.696 342.416 li
377.928 342.416 li
383.328 341.84 li
389.304 341.265 li
391.392 341.84 li
391.392 347.313 li
387.72 347.889 li
383.832 348.465 li
380.016 349.04 li
376.271 349.04 li
cp
0 0 0 0.3 cmyk
ef
391.896 349.04 mo
391.896 330.032 li
391.32 332.192 li
390.384 333.776 li
379.008 333.776 li
375.696 333.2 li
375.696 311.096 li
370.296 304.616 li
371.88 304.616 li
375.12 303.465 li
379.584 304.616 li
382.752 304.616 li
385.992 305.048 li
389.232 309.944 li
389.808 312.608 li
387.144 312.608 li
389.232 313.185 li
390.816 314.265 li
390.816 324.057 li
391.32 320.24 li
393.048 320.816 li
393.552 314.265 li
404.855 315.416 li
406.512 316.497 li
406.512 328.377 li
406.512 333.2 li
396.216 333.2 li
395.208 333.776 394.128 332.769 394.128 331.616 cv
393.552 349.4 li
391.896 349.04 li
cp
ef
442.656 349.04 mo
442.656 347.889 442.656 347.313 444.384 347.313 cv
442.656 349.04 li
cp
ef
504.432 349.04 mo
503.279 347.313 507.6 347.889 506.016 349.4 cv
504.432 349.04 li
cp
0 0 0 1 cmyk
ef
394.056 346.305 mo
394.056 340.904 li
395.784 340.328 li
399.96 340.328 li
407.016 339.753 li
407.016 345.225 li
405.359 345.729 li
402.12 345.729 li
398.448 346.305 li
394.056 346.305 li
cp
0 0 0 0.3 cmyk
ef
442.656 346.305 mo
442.656 344.648 li
445.32 343.568 445.32 347.889 443.808 346.736 cv
442.656 346.305 li
cp
ef
548.783 345.729 mo
550.512 345.225 li
548.783 345.729 li
cp
0 0 0 0 cmyk
ef
550.943 345.225 mo
552.672 343.568 li
552.672 345.656 551.52 344.648 552.096 346.232 cv
550.943 345.225 li
cp
0 0 0 1 cmyk
ef
407.448 345.225 mo
407.448 341.265 li
406.943 338.169 li
403.775 338.601 li
398.448 339.177 li
394.056 339.753 li
394.056 337.017 li
396.72 337.017 li
404.783 336.512 li
408.6 336.512 li
407.448 345.225 li
cp
0 0 0 0.3 cmyk
ef
554.111 344.648 mo
556.344 342.416 li
554.111 344.648 li
cp
0 0 0 0 cmyk
ef
409.176 344.145 mo
409.176 339.248 li
410.832 339.248 li
416.16 338.673 li
422.64 338.169 li
422.64 341.912 li
421.56 343.641 li
418.392 343.641 li
414.072 344.145 li
409.176 344.145 li
cp
0 0 0 0.3 cmyk
ef
557.495 343.568 mo
558.648 342.416 li
557.495 343.568 li
cp
0 0 0 0 cmyk
ef
559.008 344.145 mo
561.672 341.336 li
563.399 342.488 li
559.008 344.145 li
cp
0 0 0 1 cmyk
ef
423.72 343.064 mo
423.144 342.488 li
423.144 319.232 li
422.64 317 li
421.56 314.84 li
418.968 311.096 li
418.968 309.44 li
418.968 291.656 li
411.407 289.424 li
411.407 306.705 li
409.176 306.2 li
401.616 305.121 li
401.616 287.84 li
399.528 284.096 li
408.023 284.096 416.16 285.032 424.8 291.656 cv
425.376 304.616 li
425.376 307.856 li
425.808 343.641 li
423.72 343.064 li
cp
0 0 0 0.5 cmyk
ef
442.656 343.064 mo
444.744 340.904 li
444.744 342.488 445.32 344.072 443.808 343.641 cv
442.656 343.064 li
cp
0 0 0 0.3 cmyk
ef
541.224 343.064 mo
541.224 342.488 540.648 340.904 542.376 341.336 cv
541.224 341.336 li
541.224 336.512 li
560.16 336.512 li
561.672 336.008 li
562.248 339.248 li
558.575 339.824 li
556.344 340.328 li
554.111 340.904 li
552.023 341.336 li
549.359 341.912 li
546.048 342.488 li
544.464 343.064 li
541.224 343.064 li
cp
ef
564.479 342.488 mo
567.72 339.753 li
564.479 342.488 li
cp
0 0 0 0 cmyk
ef
568.296 341.336 mo
568.296 340.328 li
568.296 341.336 li
cp
ef
426.384 341.336 mo
426.384 293.169 li
442.079 295.328 li
445.896 296.408 li
445.896 307.28 li
446.472 308.433 li
447.983 307.856 li
447.048 306.705 li
450.216 306.705 li
449.712 308.793 450.72 309.368 451.296 309.368 cv
452.448 310.521 452.88 311.096 453.455 311.601 cv
453.455 310.521 455.112 309.368 456.119 310.521 cv
457.271 314.84 li
457.848 314.265 458.855 313.761 459.432 313.761 cv
462.096 316.928 li
461.52 318.081 463.248 319.232 463.824 318.656 cv
450.72 316.568 li
446.472 314.265 li
446.472 312.681 li
446.472 339.177 li
443.232 339.753 li
439.416 340.328 li
435.672 340.904 li
431.279 341.336 li
426.384 341.336 li
cp
0 0 0 0.3 cmyk
ef
570.312 340.904 mo
571.464 338.601 li
574.199 338.096 li
576.359 337.521 li
576.359 339.177 li
579.6 335.937 li
581.184 335.937 li
578.448 340.328 li
573.048 340.904 li
570.312 340.904 li
cp
0 0 0 1 cmyk
ef
335.016 340.904 mo
333.432 340.904 li
326.88 336.512 li
325.296 334.28 li
323.64 329.961 li
323.064 327.297 li
324.216 316.497 li
329.688 309.368 li
336.096 309.944 li
338.328 307.856 li
342.072 309.368 li
346.464 313.761 li
348.048 318.081 li
348.552 320.24 li
347.472 332.192 li
346.464 335.433 341.496 340.328 338.328 340.904 cv
335.016 340.904 li
cp
0 0 0 0.3 cmyk
ef
375.624 340.904 mo
375.624 338.096 li
378.936 338.096 li
387.648 337.521 li
391.32 336.944 li
391.32 340.328 li
388.08 340.328 li
383.76 340.904 li
375.624 340.904 li
cp
ef
346.896 340.4 mo
352.368 333.2 li
353.448 329.457 354.024 325.641 354.024 321.969 cv
353.448 318.656 li
352.944 314.84 349.632 310.017 345.384 307.353 cv
353.448 311.601 li
355.176 310.592 li
362.16 315.416 li
363.744 319.736 li
364.248 321.969 li
364.248 328.952 li
363.744 330.536 li
358.92 337.593 li
354.6 339.248 li
352.368 339.824 li
348.624 340.4 li
346.896 340.4 li
cp
ef
429.119 339.248 mo
429.119 338.673 li
428.544 313.832 li
435.168 315.416 li
438.407 315.992 li
442.152 317 li
444.384 318.656 li
444.384 337.593 li
442.656 338.169 li
438.983 338.169 li
435.168 338.673 li
430.848 339.248 li
429.119 339.248 li
cp
0 0 0 1 cmyk
ef
580.752 338.169 mo
582.407 337.593 li
580.752 338.169 li
cp
0 0 0 0 cmyk
ef
582.407 338.601 mo
585.072 335.864 li
585.648 337.521 584.495 338.601 583.56 338.601 cv
582.407 338.601 li
cp
0 0 0 1 cmyk
ef
563.399 338.169 mo
563.399 338.169 563.976 337.593 564.479 337.017 cv
567.72 336.512 li
570.96 335.937 li
570.384 337.017 li
568.296 337.593 li
565.632 338.169 li
563.399 338.169 li
cp
0 0 0 0.3 cmyk
ef
409.176 337.665 mo
409.176 336.008 li
414.072 336.008 li
422.64 335.504 li
419.472 337.088 li
414.648 337.665 li
409.176 337.665 li
cp
ef
332.928 335.504 mo
333.432 334.353 li
330.696 334.928 li
327.528 330.536 li
326.376 327.368 li
325.872 324.128 li
325.872 319.736 li
326.376 318.081 li
330.264 312.681 li
332.928 311.601 li
335.016 310.521 li
336.096 312.177 li
336.096 310.521 li
338.76 309.44 338.76 313.761 337.248 312.681 cv
339.912 315.416 li
341.064 318.656 li
341.568 320.889 li
342.648 319.232 344.808 320.889 343.152 321.896 cv
341.064 327.873 li
340.488 329.457 li
337.248 333.2 li
334.512 334.353 li
335.016 334.928 334.512 335.504 334.008 335.937 cv
332.928 335.504 li
cp
0 0 0 1 cmyk
ef
336.672 335.504 mo
336.096 334.928 li
337.824 333.2 338.4 334.928 338.4 335.937 cv
336.672 335.504 li
cp
ef
407.448 335.504 mo
406.943 334.928 li
406.943 318.081 li
408.023 322.4 li
407.448 335.504 li
cp
0 0 0 0.3 cmyk
ef
512.495 335.504 mo
512.495 334.353 li
520.632 334.353 li
512.495 333.776 li
512.495 325.064 li
512.495 320.313 li
517.392 320.889 li
517.392 330.032 li
515.16 330.032 li
521.64 330.32 li
521.568 329.457 li
521.568 321.32 li
525.888 322.04 li
526.032 330.536 li
536.976 330.969 li
536.976 328.521 li
536.976 323.984 li
539.568 324.416 li
539.568 333.776 li
526.464 333.776 li
528.768 333.776 li
539.568 334.353 li
512.495 335.504 li
cp
ef
541.224 335.504 mo
541.224 331.688 li
548.208 331.688 li
548.352 325.209 li
550.728 325.641 li
550.871 331.688 li
559.008 332.265 li
559.008 326.72 li
562.104 327.008 li
561.672 335.504 li
558.575 335.937 li
556.92 335.504 li
552.023 335.504 li
541.224 335.504 li
cp
ef
563.399 334.928 mo
563.399 333.776 li
566.712 334.353 li
571.535 334.353 li
563.399 334.928 li
cp
ef
578.088 334.353 mo
579.672 334.353 li
578.088 334.353 li
cp
0 0 0 0 cmyk
ef
543.384 334.353 mo
542.448 332.769 546.623 333.2 545.111 334.928 cv
543.384 334.353 li
cp
0 0 0 1 cmyk
ef
338.76 333.776 mo
338.76 333.2 338.328 331.616 339.912 332.192 cv
338.76 333.776 li
cp
ef
410.832 332.84 mo
409.248 332.84 li
409.248 316.568 li
420.048 317.576 li
421.56 318.656 li
422.136 319.736 li
422.136 322.977 li
422.712 332.84 li
411.983 332.84 li
410.832 332.84 li
cp
0 0 0 0.3 cmyk
ef
580.752 332.84 mo
580.752 331.112 li
584.495 331.112 li
587.16 333.2 li
580.752 332.84 li
cp
0 0 0 1 cmyk
ef
568.296 332.265 mo
567.359 332.265 li
567.359 328.16 li
569.951 328.665 li
569.951 332.48 li
568.296 332.265 li
cp
0 0 0 0.3 cmyk
ef
570.96 332.408 mo
570.96 328.809 li
572.688 328.881 li
573.048 332.625 li
570.96 332.408 li
cp
ef
574.344 332.265 mo
574.344 328.448 li
577.008 332.84 li
574.344 332.265 li
cp
ef
578.088 332.265 mo
578.088 328.881 li
580.176 332.84 li
578.088 332.265 li
cp
ef
336.096 331.112 mo
337.248 328.881 li
337.824 320.313 li
336.672 317.504 li
334.008 314.265 li
335.592 313.761 li
339.336 316.928 li
339.912 318.656 li
340.488 319.736 li
339.912 326.217 li
338.4 331.112 li
336.096 331.112 li
cp
ef
563.399 331.688 mo
563.399 327.44 li
565.632 327.873 li
565.632 332.265 li
563.399 331.688 li
cp
ef
330.696 331.112 mo
329.184 328.377 li
331.848 328.377 li
334.008 323.553 li
333.432 319.232 li
333 318.081 li
329.184 315.992 li
330.264 315.416 li
332.424 314.84 li
335.664 317.504 li
336.168 320.313 li
336.744 326.793 li
335.088 330.536 li
330.696 331.112 li
cp
ef
340.488 331.112 mo
340.488 329.457 li
343.152 330.536 342.72 332.192 341.568 331.688 cv
340.488 331.112 li
cp
0 0 0 1 cmyk
ef
544.464 331.112 mo
541.224 331.112 li
541.224 324.128 li
544.535 324.632 li
544.464 331.112 li
cp
0 0 0 0.3 cmyk
ef
553.68 331.112 mo
553.68 326.217 li
556.056 326.36 li
556.056 331.544 li
553.68 331.112 li
cp
ef
529.92 330.177 mo
529.775 322.688 li
533.088 323.048 li
533.088 330.465 li
529.92 330.177 li
cp
ef
508.176 329.457 mo
506.016 329.457 li
506.016 319.232 li
509.904 319.665 li
509.904 321.32 li
510.264 328.377 li
508.176 329.457 li
cp
ef
581.256 328.952 mo
578.52 328.448 li
578.52 326.217 li
583.56 326.793 li
585.072 328.952 li
581.256 328.952 li
cp
0 0 0 1 cmyk
ef
342.144 328.448 mo
341.568 327.873 li
343.224 326.217 343.8 327.873 343.8 328.881 cv
342.144 328.448 li
cp
ef
620.208 327.873 mo
621.864 327.368 li
621.864 326.217 li
614.304 326.217 li
614.304 325.064 li
617.544 324.705 li
619.056 324.128 li
621.359 323.553 li
621.864 325.064 li
624.527 326.217 li
620.208 327.873 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
575.424 326.793 mo
468.72 310.521 li
461.592 306.705 li
500.616 312.177 li
577.512 325.641 li
575.424 326.793 li
cp
0 0 0 0.3 cmyk
ef
342.648 325.064 mo
344.232 322.904 li
342.648 325.064 li
cp
0 0 0 1 cmyk
ef
549.287 319.736 mo
536.904 317.504 li
549.864 319.232 li
549.287 319.736 li
cp
0 0 0 0 cmyk
ef
550.439 320.313 mo
536.904 317.504 li
550.439 320.313 li
cp
ef
550.943 320.313 mo
536.976 317.504 li
550.943 320.313 li
cp
ef
614.88 319.736 mo
614.304 318.081 615.455 319.232 616.464 318.656 cv
619.703 317.504 li
620.783 320.313 li
614.88 319.736 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
505.943 318.152 mo
497.808 317 li
506.52 317.576 li
505.943 318.152 li
cp
0 0 0 0 cmyk
ef
507.096 318.656 mo
497.88 316.928 li
507.096 318.656 li
cp
ef
507.6 318.656 mo
497.88 316.928 li
507.6 318.656 li
cp
ef
508.176 318.656 mo
497.88 316.928 li
508.176 318.656 li
cp
ef
508.752 318.656 mo
497.88 316.928 li
508.752 318.656 li
cp
ef
509.328 318.656 mo
497.88 316.928 li
509.328 318.656 li
cp
0 0 0 0.3 cmyk
ef
599.184 317.504 mo
601.848 316.497 li
599.184 317.504 li
cp
0 0 0 0 cmyk
ef
462.744 317.504 mo
462.744 315.92 li
462.744 317.504 li
cp
ef
341.064 317 mo
341.064 315.416 li
343.728 316.568 343.152 318.081 342.144 317.576 cv
341.064 317 li
cp
0 0 0 1 cmyk
ef
458.928 317 mo
457.848 315.416 462.168 315.992 460.656 317.576 cv
458.928 317 li
cp
ef
533.736 317 mo
506.088 312.681 li
503.928 309.44 li
535.32 315.992 li
533.736 317 li
cp
0 0 0 0.3 cmyk
ef
416.808 316.568 mo
409.752 315.992 li
403.344 307.28 li
408.672 306.128 415.656 308.793 420.479 315.992 cv
416.808 316.568 li
cp
ef
493.991 316.568 mo
474.048 314.265 li
471.888 312.177 li
496.296 315.416 li
493.991 316.568 li
cp
ef
616.464 315.992 mo
618.768 314.84 li
617.616 313.761 li
621.432 314.84 li
619.128 316.928 li
616.464 315.992 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
441.144 315.2 mo
437.039 314.265 li
437.184 304.688 li
437.184 297.632 li
443.232 299.289 li
443.232 316.064 li
441.144 315.2 li
cp
/3 
<<
/Name (PANTONE 122 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0.07 0.33 0 ] 
>>
/CSD add_res
1 /3 /CSD get_res sepcs
0.4 sep
ef
1.1064 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
441.144 315.2 mo
437.039 314.265 li
437.184 304.688 li
437.184 297.632 li
443.232 299.289 li
443.232 316.064 li
441.144 315.2 li
cp
0 0 0 1 cmyk
@
404.783 314.84 mo
394.632 313.761 li
391.896 309.944 li
387.072 304.04 li
397.296 305.048 li
401.112 306.705 404.208 309.944 405.936 313.185 cv
404.783 314.84 li
cp
0 0 0 0.3 cmyk
ef
659.736 314.336 mo
660.888 313.257 li
657.648 312.177 li
661.464 310.017 li
658.8 308.433 li
662.039 308.433 li
665.783 307.928 li
669.6 306.776 li
668.448 308.433 li
665.208 310.017 li
667.871 311.601 li
659.736 314.336 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
339.408 313.761 mo
341.136 312.104 li
339.408 313.761 li
cp
0 0 0 1 cmyk
ef
433.439 313.257 mo
428.472 312.177 li
429.048 303.465 li
429.048 299.72 li
428.976 296.408 li
433.079 297.057 li
435.672 297.561 li
435.455 313.544 li
433.439 313.257 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
433.439 313.257 mo
428.472 312.177 li
429.048 303.465 li
429.048 299.72 li
428.976 296.408 li
433.079 297.057 li
435.672 297.561 li
435.455 313.544 li
433.439 313.257 li
cp
0 0 0 1 cmyk
@
271.728 312.681 mo
271.152 310.521 272.304 312.681 273.456 311.096 cv
271.728 312.681 li
cp
ef
382.752 312.681 mo
382.752 311.601 li
385.416 310.521 385.416 314.265 383.832 313.257 cv
382.752 312.681 li
cp
ef
379.512 312.177 mo
378.36 310.521 382.68 311.096 381.096 312.608 cv
379.512 312.177 li
cp
ef
610.92 312.177 mo
609.407 311.096 li
612.072 311.096 li
613.656 310.521 li
616.968 309.368 li
618.623 311.096 li
616.392 312.608 li
610.92 312.177 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
445.32 311.096 mo
445.896 311.096 446.472 310.521 447.048 309.944 cv
445.32 311.096 li
cp
0 0 0 1 cmyk
ef
498.96 311.096 mo
457.775 303.465 li
457.775 300.297 li
502.703 308.793 li
502.703 311.528 li
498.96 311.096 li
cp
0 0 0 0.3 cmyk
ef
280.944 310.592 mo
280.944 310.017 281.952 308.864 283.032 308.864 cv
280.944 310.592 li
cp
0 0 0 1 cmyk
ef
144.432 310.017 mo
135.216 306.2 li
136.872 304.04 li
140.04 303.465 li
142.919 303.032 li
145.008 301.305 li
146.088 300.729 li
151.416 300.729 li
151.992 303.465 li
149.328 304.04 li
148.751 305.696 li
147.672 307.28 li
150.48 308.433 li
148.751 308.433 li
145.008 308.864 li
144.432 310.017 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
229.968 310.017 mo
226.8 306.776 li
226.224 305.121 li
224.568 305.696 li
221.4 306.776 li
227.304 303.465 li
227.88 305.121 li
230.544 308.433 li
232.272 306.2 li
229.968 310.017 li
cp
0 0 0 1 cmyk
ef
337.752 310.017 mo
336.6 308.433 340.992 308.864 339.336 310.592 cv
337.752 310.017 li
cp
ef
352.296 310.017 mo
345.312 304.04 li
351.792 307.28 li
350.208 301.305 li
352.296 303.032 353.448 304.616 354.024 306.2 cv
352.296 310.017 li
cp
0 0 0 0.3 cmyk
ef
371.808 310.017 mo
368.063 306.2 363.312 303.465 358.92 301.881 cv
362.736 301.881 368.063 304.616 373.536 309.44 cv
371.808 310.017 li
cp
ef
297.144 308.433 mo
299.232 307.28 li
303.048 304.616 li
304.704 305.625 li
307.944 303.465 li
312.264 305.625 li
315.504 305.625 li
319.32 306.128 li
315.504 306.705 li
312.84 306.705 li
309.024 305.048 li
306.792 306.128 li
305.856 306.705 li
302.544 306.128 li
297.144 308.433 li
cp
0 0 0 1 cmyk
ef
331.2 308.433 mo
328.536 306.705 li
328.536 298.568 li
329.688 296.984 li
335.016 296.984 li
335.016 306.128 li
330.624 305.625 li
330.624 306.705 li
334.44 306.705 li
333.936 308.793 li
331.2 308.433 li
cp
1 /3 /CSD get_res sepcs
0.8 sep
ef
616.968 308.433 mo
616.032 308.433 li
615.455 307.28 li
609.407 307.856 li
605.088 307.856 li
606.168 306.128 li
612.648 306.128 li
616.968 304.04 li
618.119 302.961 li
617.544 302.385 li
610.991 302.961 li
608.832 300.656 li
609.983 300.297 li
615.455 294.824 li
610.991 293.672 li
612.648 292.16 li
608.832 291.585 li
606.168 290.433 li
606.744 288.849 li
606.168 287.192 li
608.832 286.185 li
608.832 284.024 li
607.896 284.457 li
604.008 284.457 li
605.088 282.873 li
601.848 280.712 li
601.848 276.32 li
612.648 278.048 622.439 278.625 632.664 280.209 cv
630.504 281.793 li
627.768 282.368 li
626.256 282.873 li
625.68 284.024 li
626.832 285.032 li
630.504 285.608 li
620.208 286.185 li
622.439 287.192 li
624.096 287.769 li
620.783 290.433 li
618.695 290.433 li
619.632 291.008 li
623.016 291.585 li
625.68 292.592 li
630.504 292.16 li
627.191 294.248 li
624.527 294.824 li
623.016 295.328 li
622.439 297.488 li
624.527 297.488 li
626.256 300.297 li
624.527 300.656 li
620.208 299.145 li
623.52 301.809 li
619.056 301.809 li
620.208 302.385 li
620.208 305.625 li
622.439 306.705 li
619.056 307.856 li
616.968 308.433 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
193.176 307.856 mo
192.6 306.128 195.408 306.705 196.488 306.128 cv
193.176 307.856 li
cp
0 0 0 1 cmyk
ef
208.872 307.856 mo
208.296 307.28 li
207.936 306.128 li
205.632 306.705 li
204.624 307.28 202.464 307.856 202.968 306.128 cv
204.624 306.128 li
205.632 305.625 li
209.448 305.048 li
218.16 301.809 li
217.008 303.465 li
208.872 307.856 li
cp
ef
241.344 307.353 mo
238.68 305.121 li
243.072 306.2 li
244.08 303.536 li
248.472 303.536 li
253.872 304.112 li
258.192 305.121 li
259.848 304.616 li
263.592 304.112 li
264.744 305.121 li
262.008 305.696 li
260.928 305.696 li
259.848 306.2 li
256.032 305.121 li
253.296 305.121 li
244.656 305.121 li
241.344 307.353 li
cp
ef
292.824 306.776 mo
291.744 305.121 296.064 305.696 294.48 307.353 cv
292.824 306.776 li
cp
ef
496.296 306.2 mo
497.88 307.28 li
496.296 306.2 li
cp
0 0 0 0 cmyk
ef
234.936 306.2 mo
233.784 304.616 238.104 305.121 236.592 306.776 cv
234.936 306.2 li
cp
0 0 0 1 cmyk
ef
343.152 306.2 mo
341.568 304.616 li
342.648 305.121 344.808 305.121 344.232 306.776 cv
343.152 306.2 li
cp
0 0 0 0.3 cmyk
ef
493.632 305.696 mo
495.216 306.705 li
493.632 305.696 li
cp
0 0 0 0 cmyk
ef
490.896 305.121 mo
492.552 306.128 li
490.896 305.121 li
cp
ef
661.968 305.696 mo
661.968 305.121 li
656.063 304.04 li
666.287 303.465 li
665.136 305.696 li
661.968 305.696 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
487.656 305.121 mo
485.928 304.04 li
487.656 305.121 li
cp
0 0 0 0 cmyk
ef
488.592 305.696 mo
485.928 304.04 li
488.592 305.696 li
cp
ef
489.168 305.696 mo
485.928 304.04 li
489.168 305.696 li
cp
ef
489.744 305.696 mo
486.504 305.121 li
489.744 305.696 li
cp
ef
483.264 303.536 mo
484.991 304.616 li
483.264 303.536 li
cp
ef
330.264 303.536 mo
330.264 303.032 li
330.696 299.217 li
334.008 300.368 li
332.928 304.112 li
330.264 303.536 li
cp
0 0 0 1 cmyk
ef
346.464 303.536 mo
345.312 303.536 li
345.312 278.696 li
348.552 278.121 li
348.552 300.729 li
348.552 304.112 li
346.464 303.536 li
cp
0 0 0 0.3 cmyk
ef
398.52 303.536 mo
390.384 300.368 li
390.384 299.217 li
389.808 295.977 li
391.968 292.232 li
396.792 292.592 li
396.792 294.32 li
397.944 293.744 li
399.6 294.896 li
400.104 295.977 li
400.104 304.112 li
398.52 303.536 li
cp
ef
480.096 303.536 mo
460.079 299.793 li
456.695 297.561 li
480.6 303.032 li
480.096 303.536 li
cp
0 0 0 0 cmyk
ef
481.104 304.04 mo
460.079 299.72 li
456.768 297.488 li
481.104 304.04 li
cp
ef
481.607 304.04 mo
460.008 299.72 li
456.695 297.488 li
481.607 304.04 li
cp
ef
482.184 304.04 mo
460.008 299.72 li
456.695 297.488 li
482.184 304.04 li
cp
0 0 0 0.3 cmyk
ef
366.984 302.961 mo
366.984 301.809 li
371.448 301.809 li
373.536 301.232 li
371.88 303.393 li
366.984 302.961 li
cp
ef
379.008 302.457 mo
378.432 301.881 li
379.584 299.217 li
382.248 298.641 li
379.584 298.641 li
379.584 294.32 li
381.096 296.408 li
383.832 299.217 li
381.672 303.032 li
379.008 302.457 li
cp
ef
341.064 301.881 mo
341.064 296.984 li
340.488 294.32 li
339.912 278.625 li
344.808 278.625 li
344.808 302.457 li
341.064 301.881 li
cp
ef
526.176 300.801 mo
523.439 295.977 li
522.287 296.48 li
520.199 297.057 li
519.623 294.393 li
518.039 292.232 li
521.208 295.4 li
522.287 294.896 li
525.6 295.977 li
527.184 299.793 li
534.744 296.48 li
526.176 300.801 li
cp
0 0 0 1 cmyk
ef
366.984 300.297 mo
366.479 299.72 li
366.048 298.568 li
366.984 294.248 li
368.712 296.912 li
369.216 294.824 li
373.536 296.336 li
372.456 300.656 li
366.984 300.297 li
cp
0 0 0 0.3 cmyk
ef
385.416 300.297 mo
385.416 294.824 li
386.568 293.096 li
387.72 300.656 li
385.416 300.297 li
cp
ef
655.488 299.793 mo
655.488 298.064 li
650.592 298.064 li
646.775 298.641 li
645.191 295.977 li
647.928 296.984 li
651.168 296.984 li
653.328 296.408 li
657.575 296.408 li
658.728 295.977 li
660.312 293.744 li
657.575 293.744 li
659.304 292.232 li
654.912 291.656 li
654.336 289.928 li
648.936 290.504 li
651.168 288.849 li
657.072 286.185 li
658.728 284.528 li
650.088 284.528 li
650.088 283.521 li
652.752 282.944 li
655.488 282.368 li
657.575 281.793 li
667.871 278.048 li
671.184 276.969 li
672.84 278.048 li
677.088 278.048 li
681.479 278.048 li
680.399 279.128 li
678.24 279.705 li
673.848 281.36 li
668.951 281.793 li
671.76 284.096 li
670.607 284.528 li
669.527 285.032 li
665.136 284.528 li
667.439 286.185 li
666.287 286.761 li
669.527 287.265 li
672.84 288.344 li
675.575 288.344 li
677.663 287.84 li
679.32 287.265 li
682.56 286.761 li
680.399 288.344 li
678.816 288.849 li
676.152 289.424 li
668.376 289.424 li
668.951 291.081 li
667.439 291.656 li
666.287 293.744 li
664.199 294.32 li
665.136 295.977 li
668.376 295.977 li
670.607 294.896 li
667.871 297.561 li
664.775 298.064 li
661.392 298.641 li
660.312 299.793 li
657.575 299.793 li
655.488 299.793 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
472.392 298.641 mo
474.119 298.064 li
472.392 298.641 li
cp
0 0 0 1 cmyk
ef
693.287 297.992 mo
696.023 297.992 li
693.287 297.992 li
cp
0 0 0 0 cmyk
ef
699.336 298.641 mo
701.424 295.904 li
704.232 295.4 li
706.896 294.32 li
705.384 293.744 li
702.575 293.169 li
705.888 291.081 li
706.896 290.504 708.623 290.504 708.048 288.849 cv
701.424 287.84 li
700.92 285.608 li
694.439 286.185 li
696.096 285.032 li
699.912 283.521 li
700.92 282.944 li
702.575 282.944 li
702.575 279.705 li
711.792 282.368 721.584 282.944 730.656 284.096 cv
730.656 285.608 li
706.32 296.984 li
703.656 298.064 li
701.424 298.641 li
699.336 298.641 li
cp
1 /1 /CSD get_res sepcs
1 sep
ef
537.336 297.561 mo
536.904 295.904 537.912 296.984 539.063 296.408 cv
542.808 294.824 li
546.048 296.408 li
548.783 296.408 li
546.623 297.992 li
543.888 296.408 li
540.648 296.984 li
537.336 297.561 li
cp
0 0 0 1 cmyk
ef
555.264 297.561 mo
554.111 294.824 li
555.264 297.561 li
cp
ef
485.928 297.057 mo
485.495 294.32 li
485.928 297.057 li
cp
ef
504.936 297.057 mo
502.199 295.4 li
497.304 295.4 li
501.768 294.32 li
506.592 296.48 li
508.176 295.4 li
510.84 292.665 li
511.991 295.977 li
510.84 294.32 li
507.6 297.632 li
504.936 297.057 li
cp
ef
563.976 297.057 mo
563.976 295.977 li
566.712 294.896 566.712 298.641 565.056 297.632 cv
563.976 297.057 li
cp
ef
477.792 296.408 mo
480.527 293.169 li
483.264 294.824 li
481.032 294.824 478.943 295.328 479.52 296.984 cv
477.792 296.408 li
cp
ef
559.008 296.408 mo
559.008 295.328 li
562.248 295.328 li
559.008 296.408 li
cp
ef
334.512 295.977 mo
333.432 293.744 li
337.824 296.408 li
334.512 295.977 li
cp
0 0 0 0.3 cmyk
ef
489.168 295.977 mo
489.168 294.896 li
491.904 292.232 li
496.296 294.896 li
491.904 293.744 li
489.168 295.977 li
cp
0 0 0 1 cmyk
ef
371.808 294.896 mo
371.376 294.32 li
364.824 293.169 li
366.479 289.424 li
369.144 289.424 li
373.536 292.16 li
371.808 294.896 li
cp
0 0 0 0.3 cmyk
ef
443.808 294.896 mo
426.455 292.16 li
425.88 289.928 li
416.808 285.608 408.672 283.521 399.528 282.944 cv
397.368 280.712 li
411.983 282.368 li
426.455 289.424 li
433.512 290.504 li
445.392 294.32 li
443.808 294.896 li
cp
ef
180.792 292.592 mo
183.024 293.169 li
180.792 292.592 li
cp
0 0 0 0 cmyk
ef
398.952 293.169 mo
395.784 291.585 li
391.32 291.585 li
389.232 289.928 li
389.232 286.761 li
391.32 283.448 li
395.208 284.024 li
395.784 285.032 li
399.528 287.192 li
399.528 288.272 li
398.952 293.169 li
cp
0 0 0 0.3 cmyk
ef
569.951 292.592 mo
569.376 291.008 571.535 292.16 572.616 289.856 cv
576.359 288.849 li
576.936 292.16 li
575.424 290.433 li
573.695 290.433 li
569.951 292.592 li
cp
0 0 0 1 cmyk
ef
385.416 292.232 mo
385.416 288.272 li
385.416 285.032 li
387.144 291.081 li
385.416 292.232 li
cp
0 0 0 0.3 cmyk
ef
578.088 292.232 mo
580.176 289.424 li
582.407 288.272 li
586.224 287.265 li
587.16 290.504 li
585.072 290.504 li
584.495 288.272 li
583.56 288.849 li
578.088 292.232 li
cp
0 0 0 1 cmyk
ef
598.104 287.84 mo
600.768 287.265 li
598.104 287.84 li
cp
0 0 0 0 cmyk
ef
366.984 287.265 mo
368.712 288.272 li
366.984 287.265 li
cp
ef
382.752 282.44 mo
383.832 282.44 li
386.568 283.017 li
385.416 283.017 li
382.752 282.44 li
cp
0 0 0 1 cmyk
ef
388.656 281.793 mo
388.656 280.712 li
390.888 279.632 li
394.704 281.289 li
388.656 281.793 li
cp
0 0 0 0.3 cmyk
ef
695.52 279.776 mo
699.336 279.776 li
695.52 279.776 li
cp
0 0 0 0 cmyk
ef
390.312 278.696 mo
391.32 274.305 li
392.976 276.393 li
394.056 279.128 li
390.312 278.696 li
cp
0 0 0 0.3 cmyk
ef
340.488 276.896 mo
343.152 276.896 li
340.488 276.896 li
cp
0 0 0 0 cmyk
ef
337.752 275.816 mo
337.176 275.385 li
337.176 269.408 li
338.328 267.681 li
343.152 267.681 li
337.752 267.248 li
338.76 265.017 li
353.448 266.672 li
348.552 275.816 li
344.736 275.385 li
337.752 275.816 li
cp
0 0 0 0.3 cmyk
ef
689.111 274.232 mo
691.199 275.313 li
689.111 274.232 li
cp
0 0 0 0 cmyk
ef
329.688 267.248 mo
329.688 266.096 329.688 265.521 331.271 265.521 cv
329.688 267.248 li
cp
0 0 0 1 cmyk
ef
347.472 258.032 mo
344.808 258.032 li
343.152 255.297 li
349.2 255.801 li
347.472 258.032 li
cp
0 0 0 0.5 cmyk
ef
337.752 257.457 mo
337.752 255.297 li
339.84 255.297 li
339.84 256.881 340.416 258.536 338.76 258.032 cv
337.752 257.457 li
cp
ef
340.488 257.457 mo
340.488 255.297 li
342.72 255.297 li
342.72 256.881 343.152 258.536 341.568 258.032 cv
340.488 257.457 li
cp
ef
105.048 267.753 mo
107.712 264.368 113.184 262.856 117.576 259.616 cv
119.16 259.04 li
120.24 257.961 li
120.24 121.736 li
93.168 121.736 li
74.3037 132.537 li
71.064 134.048 li
81.8638 113.024 li
177.048 113.024 li
182.52 117.849 184.68 124.977 188.928 130.809 cv
190.656 134.625 li
165.744 121.16 li
140.184 121.16 li
140.184 253.568 li
141.335 254.72 li
159.191 266.601 li
161.424 268.185 li
106.2 268.185 li
105.048 267.753 li
cp
0 0 0 1 cmyk
ef
254.52 262.353 mo
242.64 261.776 225.864 249.896 218.304 235.856 cv
207.504 221.744 li
206.352 220.592 li
196.128 214.185 li
181.44 208.136 li
177.696 200.721 li
186.912 201.297 li
190.728 200.721 li
192.888 200.145 li
194.976 199.568 li
202.536 197.48 213.912 188.84 215.64 180.128 cv
216.72 170.48 li
215.64 167.168 215.064 164.433 211.824 161.192 cv
197.712 148.232 184.176 155.216 170.064 153.128 cv
169.56 232.544 li
182.592 240.104 li
182.592 241.761 li
143.064 241.761 li
152.784 234.705 li
152.784 161.192 li
152.28 151.473 li
142.488 146.145 li
143.64 143.913 li
187.488 143.913 li
201.6 143.336 216.144 141.68 229.176 157.448 cv
232.344 165.008 li
232.92 168.249 li
232.92 176.96 li
230.184 184.521 li
225.36 193.665 213.912 202.305 205.776 204.32 cv
202.536 205.473 li
200.448 206.048 li
197.136 206.625 li
194.976 207.057 li
216.72 209.289 225.36 237.944 243.72 248.169 cv
250.272 251.553 li
254.088 251.984 257.256 252.561 261.072 252.561 cv
264.888 251.984 li
267.624 251.553 li
281.664 244.497 li
283.824 242.265 li
273.024 240.104 258.912 227.648 256.248 216.849 cv
255.672 213.608 li
255.096 212.457 li
250.272 214.761 244.296 220.592 241.632 225.561 cv
238.824 222.896 li
238.32 220.592 li
237.744 216.272 238.824 212.457 243.144 208.136 cv
244.872 205.473 249.768 202.881 253.008 201.297 cv
253.584 150.896 li
242.208 144.992 li
242.208 142.76 li
276.192 142.76 li
276.192 144.417 275.688 144.992 275.184 145.568 cv
265.968 150.32 li
264.888 150.896 li
263.808 152.048 li
263.808 197.48 li
265.968 197.48 li
276.768 196.4 291.96 197.48 300.096 211.377 cv
301.104 213.608 li
301.68 216.272 li
302.256 218.504 li
302.256 230.961 li
300.6 235.856 li
302.832 235.856 li
306 235.28 li
308.232 234.705 li
315.72 233.121 326.664 226.568 330.912 217.424 cv
331.992 150.32 li
323.352 145.568 li
320.04 142.185 li
360.648 142.185 li
359.712 143.913 li
347.76 150.896 li
347.184 214.185 li
345.528 220.088 342.288 224.984 337.968 230.385 cv
333.648 234.705 325.512 240.104 320.04 241.185 cv
316.8 242.265 li
314.712 242.84 li
312.479 243.416 li
309.816 243.992 li
305.496 244.497 li
294.696 244.928 li
286.632 254.793 278.496 258.536 270.36 261.2 cv
267.048 261.776 li
262.656 262.353 li
255.672 262.928 li
254.52 262.353 li
cp
ef
585.792 260.121 mo
582.552 260.121 li
572.76 258.465 563.616 252.561 554.399 243.92 cv
541.367 223.257 527.256 193.16 501.336 191.433 cv
500.76 228.656 li
501.336 230.385 li
514.367 237.944 li
472.607 239.096 li
483.407 231.32 li
484.56 230.961 li
485.568 229.809 li
485.568 190.928 li
480.168 190.928 li
477.359 191.433 li
474.695 192.008 li
472.607 192.584 li
464.472 196.329 li
460.656 198.561 li
464.472 191.433 470.376 189.344 475.848 187.185 cv
478.512 186.68 li
481.896 186.104 li
485.136 185.528 li
485.568 150.32 li
485.136 149.313 li
473.184 142.76 li
511.56 141.176 li
501.768 148.736 li
500.184 149.745 li
500.184 185.528 li
513.216 174.081 527.832 162.92 540.216 149.745 cv
540.792 146.576 li
540.216 145.497 li
536.976 143.336 li
529.416 142.185 li
565.199 140.601 li
545.111 156.873 li
507.168 186.68 li
546.264 189.344 553.248 254.145 592.199 250.904 cv
597.096 250.328 li
599.76 249.896 li
602.063 249.32 li
607.896 247.592 613.871 244.424 619.92 239.096 cv
578.736 238.521 li
591.623 229.809 li
591.623 204.896 li
585.792 206.984 579.888 209.721 573.84 216.272 cv
570.023 219.008 li
569.448 217.353 li
569.016 216.272 li
569.016 212.961 li
569.016 209.289 li
572.328 202.305 579.888 197.408 585.216 195.824 cv
588.527 194.816 li
591.623 193.665 li
591.623 150.896 li
591.264 148.736 li
578.16 141.176 li
655.632 140.096 li
679.968 158.384 li
659.951 156.873 639.359 144.344 618.768 146.576 cv
613.871 147.081 li
610.632 147.584 li
607.896 148.16 li
607.464 158.96 li
606.312 159.537 li
607.464 167.096 li
630.144 167.096 li
625.824 156.873 li
664.344 183.944 li
664.703 186.104 li
650.736 186.104 li
636.119 173.72 li
607.896 173.72 li
607.464 192.584 li
615.6 193.16 624.672 196.329 631.871 206.048 cv
635.039 213.536 li
635.544 215.696 li
635.544 228.152 li
637.703 228.152 li
639.936 227.576 li
641.52 227.145 li
643.68 226.568 li
651.24 224.336 657.72 220.521 665.279 214.688 cv
678.312 203.816 li
679.968 204.896 li
662.039 237.944 li
631.296 237.944 li
618.264 251.48 li
615.6 253.568 li
611.783 255.297 607.896 257.385 604.224 258.465 cv
601.488 259.04 li
598.248 259.616 li
593.928 260.121 li
586.871 260.696 li
585.792 260.121 li
cp
ef
408.312 243.992 mo
398.592 242.84 li
384.984 240.032 367.2 224.408 363.384 210.368 cv
362.952 207.561 li
361.8 204.32 li
361.224 201.729 li
360.648 197.408 li
361.8 175.809 li
364.464 159.608 384.984 139.521 400.824 136.28 cv
403.416 135.776 li
406.152 135.2 li
410.399 134.625 li
425.016 133.544 438.983 135.2 453.6 148.232 cv
461.16 133.544 li
462.888 181.28 li
458.495 178.616 457.56 175.809 456.407 173.145 cv
455.832 170.48 li
455.256 168.752 li
454.752 166.592 li
452.592 156.368 439.56 146.072 430.416 145.568 cv
417.96 144.417 li
412.56 144.992 li
409.32 145.568 li
407.16 146.072 li
393.696 148.809 379.656 168.249 378.576 179.625 cv
378 185.096 377.424 189.417 377.424 194.24 cv
378 199.568 li
378.576 202.305 li
379.152 204.32 li
381.24 214.185 391.608 228.729 402.912 231.969 cv
410.399 234.128 416.448 234.128 422.855 234.128 cv
427.176 233.625 li
429.84 233.048 li
432 232.544 li
433.584 231.969 li
435.816 231.393 li
453.096 222.824 li
459.648 218.433 li
477.432 203.385 li
479.16 203.816 li
471.023 214.761 459.072 226.568 448.848 233.625 cv
442.8 237.368 437.976 239.528 432.575 241.761 cv
429.264 242.265 li
427.176 242.84 li
424.008 243.416 li
419.688 243.992 li
409.32 244.424 li
408.312 243.992 li
cp
ef
676.8 236.864 mo
679.464 233.696 684.359 232.544 688.176 229.305 cv
688.752 148.809 li
675.216 141.249 li
676.224 138.944 li
753.119 138.944 li
777.527 157.521 li
775.871 159.032 li
768.816 158.457 li
749.304 147.656 730.296 144.992 711.432 145.568 cv
707.111 146.145 li
705.527 146.576 li
705.527 166.017 li
728.208 166.017 li
723.312 155.792 li
762.768 183.944 li
747.144 185.096 li
733.68 173.145 li
705.96 173.145 li
705.96 225.561 li
706.535 228.225 li
727.632 228.225 li
732.6 227.648 li
735.768 227.145 li
738 226.641 li
739.584 226.064 li
741.744 225.561 li
758.592 217.424 li
761.832 216.272 li
774.792 203.889 li
775.871 205.473 li
768.816 216.272 765.072 226.641 759.168 236.864 cv
677.951 237.44 li
676.8 236.864 li
cp
ef
100.008 263.433 mo
102.672 260.048 108.144 258.536 112.536 255.297 cv
114.12 254.72 li
115.2 253.641 li
115.2 117.417 li
88.1274 117.417 li
69.2637 128.216 li
66.0234 129.729 li
76.8237 108.705 li
172.008 108.705 li
177.48 113.528 179.64 120.656 183.888 126.488 cv
185.616 130.304 li
160.704 116.84 li
135.144 116.84 li
135.144 249.248 li
136.296 250.4 li
154.152 262.28 li
156.384 263.864 li
101.16 263.864 li
100.008 263.433 li
cp
level3{
gsave
[-6.78222e-06 -155.159 155.159 -6.78222e-06 125.82 263.4 ]ct
<<
/PatternType 2
/Shading
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~"TUsk"Th-n"U.Br"U@Qu"URd$"Uds'"V+3+"V=B.";4H0";FW3";ao8";t);"<18>"<CGA"<^\E"<pkH
"=.(L"=I=P"=[LS"=m[V""daX"#+!\"#=3`"#OBc"#aQf"$'fj"$9um"$L2q"$^At"%$W#"%6f&"%Hu)
"%d5-!_[>0!_mM3!`*\6!`Eq:!`X+=!`j:@!a'LD!aBaH!aTpK!ag*N!b$9Q!b?NU!G6WX!GHf[!Gd&_
!H!5b!H3De!HEVi!H`km!Hs%p!I04s!IBD!!I]Y%!Iok)!.fq+!/$+.!/?@2!/QO5!/c^8!0*!=!0<0@
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>> /Gradient add_res /1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-6.78222e-06 -155.159 155.159 -6.78222e-06 125.82 263.4 ]ct
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[0.00392157 0 ][0.00392157 0 ][0.00392157 0 ][0.00392157 0 ]]
/Samples[
<~"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9\i1"9S`.!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-!s8W-
!s8W-!s8W-!s8W-!s8W-!s8T+!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)
!WiE)!WiE(!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!<E3$zzzzzzzzzz
zzzzzzz!!!!!~>
<~!!!!"!<N?+"9er5"pYA=#RLeE$4@7N%1WjY%hK9a&J>]i',2/r()Ic((`=20)B0V8*$$%@+!;[L+X/*T
,9nH[-71)f-n$Mn.Olr!/1`A*0/#"50ekF=1G^jE2)R9N2`NfX3]]>a4?Pbi5!D1q5X@_'6UO7077B[8
7n?0B8P2TJ92&#R9hnGZ:f1(f;H$Ln<)lq!<``@)=]np4>?kE=?!^iE?XR8M@:E_WA7]=aAnPaiBPD3s
CMRa&D/F0.Df9T6EH6,AFEDYJG'8(RG^+LZH@(!dI=6QnIt*!!JUrE)K7ei2L5(J=LkpnEMMd=NNK&sY
~>
<~6q'O577Ka97Ros=7n?0B8P2TI8kVfM92&#Q9MJ5U9hnGY:/=Y^:f1(e;,U:i;H$Lm;cH^q<)lpu<E<.%
='&L+=BJ^/=]np3>$>-7>?b?;>[1Q??=$uG?XI2K?smDO@:<VS@U`hWA7T7_AS#IcAnG[gB4kmkBP;*o
Bk_9rC27U$Ci!p)D/F--DJj?1Df9Q5E,]c9EH6)@F)uDEFEDVIF`hhMG'8%QGB\7UG^4R\H?smaH[C*e
I!g<hI=6NlIXZcrJ:N0#JUrB'JqAT+K7ef/KS5#3KnY89LPLY?LkpkCM2@(GMMd:KMi3LON/WaUNfK-[
~>
0 ]
>>
0 0 1 0 []true true []
/DeviceCMYK
GenStrips
} /Gradient add_res <<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1.9998 lw
100.008 263.433 mo
102.672 260.048 108.144 258.536 112.536 255.297 cv
114.12 254.72 li
115.2 253.641 li
115.2 117.417 li
88.1274 117.417 li
69.2637 128.216 li
66.0234 129.729 li
76.8237 108.705 li
172.008 108.705 li
177.48 113.528 179.64 120.656 183.888 126.488 cv
185.616 130.304 li
160.704 116.84 li
135.144 116.84 li
135.144 249.248 li
136.296 250.4 li
154.152 262.28 li
156.384 263.864 li
101.16 263.864 li
100.008 263.433 li
cp
0 0 0 1 cmyk
@
249.48 258.032 mo
237.6 257.457 220.824 245.576 213.264 231.536 cv
202.464 217.424 li
201.312 216.272 li
191.088 209.864 li
176.399 203.816 li
172.656 196.4 li
181.872 196.977 li
185.688 196.4 li
187.848 195.896 li
189.936 195.32 li
197.496 193.16 208.872 184.521 210.6 175.809 cv
211.68 166.16 li
210.6 162.849 210.024 160.112 206.784 156.873 cv
192.672 143.913 179.136 150.896 165.023 148.809 cv
164.52 228.225 li
177.552 235.784 li
177.552 237.44 li
138.023 237.44 li
147.744 230.385 li
147.744 156.873 li
147.24 147.152 li
137.448 141.824 li
138.6 139.592 li
182.448 139.592 li
196.56 139.017 211.104 137.36 224.136 153.128 cv
227.304 160.688 li
227.88 163.928 li
227.88 172.641 li
225.144 180.2 li
220.32 189.344 208.872 197.984 200.736 200 cv
197.496 201.152 li
195.408 201.729 li
192.096 202.305 li
189.936 202.736 li
211.68 204.969 220.32 233.625 238.68 243.849 cv
245.232 247.232 li
249.048 247.665 252.216 248.24 256.032 248.24 cv
259.848 247.665 li
262.584 247.232 li
276.624 240.177 li
278.784 237.944 li
267.984 235.784 253.872 223.328 251.208 212.528 cv
250.632 209.289 li
250.056 208.136 li
245.232 210.44 239.256 216.272 236.592 221.24 cv
233.784 218.576 li
233.28 216.272 li
232.704 211.952 233.784 208.136 238.104 203.816 cv
239.832 201.152 244.728 198.561 247.968 196.977 cv
248.544 146.576 li
237.168 140.672 li
237.168 138.44 li
271.152 138.44 li
271.152 140.096 270.648 140.672 270.144 141.249 cv
260.928 146 li
259.848 146.576 li
258.768 147.729 li
258.768 193.16 li
260.928 193.16 li
271.728 192.081 286.92 193.16 295.056 207.057 cv
296.064 209.289 li
296.64 211.952 li
297.216 214.185 li
297.216 226.641 li
295.56 231.536 li
297.792 231.536 li
300.96 230.961 li
303.192 230.385 li
310.68 228.801 321.624 222.248 325.872 213.104 cv
326.952 146 li
318.312 141.249 li
315 137.864 li
355.608 137.864 li
354.672 139.592 li
342.72 146.576 li
342.144 209.864 li
340.488 215.769 337.248 220.665 332.928 226.064 cv
328.608 230.385 320.472 235.784 315 236.864 cv
311.76 237.944 li
309.672 238.521 li
307.44 239.096 li
304.776 239.672 li
300.456 240.177 li
289.656 240.608 li
281.592 250.473 273.456 254.217 265.32 256.881 cv
262.008 257.457 li
257.616 258.032 li
250.632 258.608 li
249.48 258.032 li
cp
level3{
gsave
[-5.30289e-06 -121.316 121.316 -5.30289e-06 246.528 258.4 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-5.30289e-06 -121.316 121.316 -5.30289e-06 246.528 258.4 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
249.48 258.032 mo
237.6 257.457 220.824 245.576 213.264 231.536 cv
202.464 217.424 li
201.312 216.272 li
191.088 209.864 li
176.399 203.816 li
172.656 196.4 li
181.872 196.977 li
185.688 196.4 li
187.848 195.896 li
189.936 195.32 li
197.496 193.16 208.872 184.521 210.6 175.809 cv
211.68 166.16 li
210.6 162.849 210.024 160.112 206.784 156.873 cv
192.672 143.913 179.136 150.896 165.023 148.809 cv
164.52 228.225 li
177.552 235.784 li
177.552 237.44 li
138.023 237.44 li
147.744 230.385 li
147.744 156.873 li
147.24 147.152 li
137.448 141.824 li
138.6 139.592 li
182.448 139.592 li
196.56 139.017 211.104 137.36 224.136 153.128 cv
227.304 160.688 li
227.88 163.928 li
227.88 172.641 li
225.144 180.2 li
220.32 189.344 208.872 197.984 200.736 200 cv
197.496 201.152 li
195.408 201.729 li
192.096 202.305 li
189.936 202.736 li
211.68 204.969 220.32 233.625 238.68 243.849 cv
245.232 247.232 li
249.048 247.665 252.216 248.24 256.032 248.24 cv
259.848 247.665 li
262.584 247.232 li
276.624 240.177 li
278.784 237.944 li
267.984 235.784 253.872 223.328 251.208 212.528 cv
250.632 209.289 li
250.056 208.136 li
245.232 210.44 239.256 216.272 236.592 221.24 cv
233.784 218.576 li
233.28 216.272 li
232.704 211.952 233.784 208.136 238.104 203.816 cv
239.832 201.152 244.728 198.561 247.968 196.977 cv
248.544 146.576 li
237.168 140.672 li
237.168 138.44 li
271.152 138.44 li
271.152 140.096 270.648 140.672 270.144 141.249 cv
260.928 146 li
259.848 146.576 li
258.768 147.729 li
258.768 193.16 li
260.928 193.16 li
271.728 192.081 286.92 193.16 295.056 207.057 cv
296.064 209.289 li
296.64 211.952 li
297.216 214.185 li
297.216 226.641 li
295.56 231.536 li
297.792 231.536 li
300.96 230.961 li
303.192 230.385 li
310.68 228.801 321.624 222.248 325.872 213.104 cv
326.952 146 li
318.312 141.249 li
315 137.864 li
355.608 137.864 li
354.672 139.592 li
342.72 146.576 li
342.144 209.864 li
340.488 215.769 337.248 220.665 332.928 226.064 cv
328.608 230.385 320.472 235.784 315 236.864 cv
311.76 237.944 li
309.672 238.521 li
307.44 239.096 li
304.776 239.672 li
300.456 240.177 li
289.656 240.608 li
281.592 250.473 273.456 254.217 265.32 256.881 cv
262.008 257.457 li
257.616 258.032 li
250.632 258.608 li
249.48 258.032 li
cp
0 0 0 1 cmyk
@
580.752 255.801 mo
577.512 255.801 li
567.72 254.145 558.575 248.24 549.359 239.601 cv
536.328 218.937 522.216 188.84 496.296 187.112 cv
495.72 224.336 li
496.296 226.064 li
509.328 233.625 li
467.568 234.776 li
478.367 227 li
479.52 226.641 li
480.527 225.488 li
480.527 186.608 li
475.128 186.608 li
472.32 187.112 li
469.656 187.688 li
467.568 188.265 li
459.432 192.008 li
455.616 194.313 li
459.432 187.112 465.336 185.024 470.808 182.864 cv
473.472 182.36 li
476.855 181.784 li
480.096 181.208 li
480.527 146 li
480.096 144.992 li
468.144 138.44 li
506.52 136.856 li
496.728 144.417 li
495.144 145.424 li
495.144 181.208 li
508.176 169.76 522.792 158.601 535.176 145.424 cv
535.752 142.256 li
535.176 141.176 li
531.936 139.017 li
524.376 137.864 li
560.16 136.28 li
540.072 152.552 li
502.128 182.36 li
541.224 185.024 548.208 249.824 587.16 246.585 cv
592.056 246.008 li
594.72 245.576 li
597.023 245 li
602.855 243.272 608.832 240.104 614.88 234.776 cv
573.695 234.2 li
586.584 225.488 li
586.584 200.576 li
580.752 202.665 574.848 205.4 568.8 211.952 cv
564.983 214.688 li
564.407 213.032 li
563.976 211.952 li
563.976 208.641 li
563.976 204.969 li
567.287 197.984 574.848 193.16 580.176 191.504 cv
583.488 190.497 li
586.584 189.344 li
586.584 146.576 li
586.224 144.417 li
573.119 136.856 li
650.592 135.776 li
674.928 154.064 li
654.912 152.552 634.32 140.024 613.728 142.256 cv
608.832 142.76 li
605.592 143.265 li
602.855 143.84 li
602.424 154.641 li
601.271 155.216 li
602.424 162.776 li
625.104 162.776 li
620.783 152.552 li
659.304 179.625 li
659.663 181.784 li
645.695 181.784 li
631.079 169.4 li
602.855 169.4 li
602.424 188.265 li
610.56 188.84 619.632 192.008 626.832 201.729 cv
630 209.217 li
630.504 211.377 li
630.504 223.832 li
632.664 223.832 li
634.896 223.257 li
636.479 222.824 li
638.64 222.248 li
646.199 220.017 652.68 216.2 660.24 210.368 cv
673.271 199.497 li
674.928 200.576 li
657 233.625 li
626.256 233.625 li
613.224 247.16 li
610.56 249.248 li
606.744 250.977 602.855 253.064 599.184 254.145 cv
596.448 254.72 li
593.208 255.297 li
588.888 255.801 li
581.832 256.377 li
580.752 255.801 li
cp
level3{
gsave
[-5.2716e-06 -120.6 120.6 -5.2716e-06 565.271 256.377 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-5.2716e-06 -120.6 120.6 -5.2716e-06 565.271 256.377 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
580.752 255.801 mo
577.512 255.801 li
567.72 254.145 558.575 248.24 549.359 239.601 cv
536.328 218.937 522.216 188.84 496.296 187.112 cv
495.72 224.336 li
496.296 226.064 li
509.328 233.625 li
467.568 234.776 li
478.367 227 li
479.52 226.641 li
480.527 225.488 li
480.527 186.608 li
475.128 186.608 li
472.32 187.112 li
469.656 187.688 li
467.568 188.265 li
459.432 192.008 li
455.616 194.313 li
459.432 187.112 465.336 185.024 470.808 182.864 cv
473.472 182.36 li
476.855 181.784 li
480.096 181.208 li
480.527 146 li
480.096 144.992 li
468.144 138.44 li
506.52 136.856 li
496.728 144.417 li
495.144 145.424 li
495.144 181.208 li
508.176 169.76 522.792 158.601 535.176 145.424 cv
535.752 142.256 li
535.176 141.176 li
531.936 139.017 li
524.376 137.864 li
560.16 136.28 li
540.072 152.552 li
502.128 182.36 li
541.224 185.024 548.208 249.824 587.16 246.585 cv
592.056 246.008 li
594.72 245.576 li
597.023 245 li
602.855 243.272 608.832 240.104 614.88 234.776 cv
573.695 234.2 li
586.584 225.488 li
586.584 200.576 li
580.752 202.665 574.848 205.4 568.8 211.952 cv
564.983 214.688 li
564.407 213.032 li
563.976 211.952 li
563.976 208.641 li
563.976 204.969 li
567.287 197.984 574.848 193.16 580.176 191.504 cv
583.488 190.497 li
586.584 189.344 li
586.584 146.576 li
586.224 144.417 li
573.119 136.856 li
650.592 135.776 li
674.928 154.064 li
654.912 152.552 634.32 140.024 613.728 142.256 cv
608.832 142.76 li
605.592 143.265 li
602.855 143.84 li
602.424 154.641 li
601.271 155.216 li
602.424 162.776 li
625.104 162.776 li
620.783 152.552 li
659.304 179.625 li
659.663 181.784 li
645.695 181.784 li
631.079 169.4 li
602.855 169.4 li
602.424 188.265 li
610.56 188.84 619.632 192.008 626.832 201.729 cv
630 209.217 li
630.504 211.377 li
630.504 223.832 li
632.664 223.832 li
634.896 223.257 li
636.479 222.824 li
638.64 222.248 li
646.199 220.017 652.68 216.2 660.24 210.368 cv
673.271 199.497 li
674.928 200.576 li
657 233.625 li
626.256 233.625 li
613.224 247.16 li
610.56 249.248 li
606.744 250.977 602.855 253.064 599.184 254.145 cv
596.448 254.72 li
593.208 255.297 li
588.888 255.801 li
581.832 256.377 li
580.752 255.801 li
cp
0 0 0 1 cmyk
@
403.271 239.672 mo
393.552 238.521 li
379.944 235.712 362.16 220.088 358.344 206.048 cv
357.912 203.24 li
356.76 200 li
356.184 197.408 li
355.608 193.16 li
356.76 171.488 li
359.424 155.289 379.944 135.2 395.784 131.96 cv
398.448 131.457 li
401.184 130.88 li
405.359 130.304 li
419.976 129.225 433.943 130.88 448.56 143.913 cv
456.119 129.225 li
457.848 176.96 li
453.455 174.296 452.52 171.488 451.367 168.824 cv
450.792 166.16 li
450.216 164.433 li
449.712 162.272 li
447.552 152.048 434.52 141.752 425.376 141.249 cv
412.92 140.096 li
407.52 140.672 li
404.279 141.249 li
402.12 141.752 li
388.656 144.488 374.616 163.928 373.536 175.304 cv
372.96 180.776 372.384 185.096 372.384 189.92 cv
372.96 195.32 li
373.536 197.984 li
374.112 200 li
376.2 209.864 386.568 224.408 397.944 227.648 cv
405.359 229.809 411.407 229.809 417.816 229.809 cv
422.136 229.305 li
424.8 228.729 li
426.96 228.225 li
428.544 227.648 li
430.775 227.072 li
448.056 218.504 li
454.607 214.112 li
472.392 199.064 li
474.119 199.497 li
465.983 210.44 454.032 222.248 443.808 229.305 cv
437.76 233.048 432.936 235.209 427.535 237.44 cv
424.224 237.944 li
422.136 238.521 li
418.968 239.096 li
414.648 239.672 li
404.279 240.104 li
403.271 239.672 li
cp
level3{
gsave
[-4.85212e-06 -111.004 111.004 -4.85212e-06 414.863 240.4 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-4.85212e-06 -111.004 111.004 -4.85212e-06 414.863 240.4 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
403.271 239.672 mo
393.552 238.521 li
379.944 235.712 362.16 220.088 358.344 206.048 cv
357.912 203.24 li
356.76 200 li
356.184 197.408 li
355.608 193.16 li
356.76 171.488 li
359.424 155.289 379.944 135.2 395.784 131.96 cv
398.448 131.457 li
401.184 130.88 li
405.359 130.304 li
419.976 129.225 433.943 130.88 448.56 143.913 cv
456.119 129.225 li
457.848 176.96 li
453.455 174.296 452.52 171.488 451.367 168.824 cv
450.792 166.16 li
450.216 164.433 li
449.712 162.272 li
447.552 152.048 434.52 141.752 425.376 141.249 cv
412.92 140.096 li
407.52 140.672 li
404.279 141.249 li
402.12 141.752 li
388.656 144.488 374.616 163.928 373.536 175.304 cv
372.96 180.776 372.384 185.096 372.384 189.92 cv
372.96 195.32 li
373.536 197.984 li
374.112 200 li
376.2 209.864 386.568 224.408 397.944 227.648 cv
405.359 229.809 411.407 229.809 417.816 229.809 cv
422.136 229.305 li
424.8 228.729 li
426.96 228.225 li
428.544 227.648 li
430.775 227.072 li
448.056 218.504 li
454.607 214.112 li
472.392 199.064 li
474.119 199.497 li
465.983 210.44 454.032 222.248 443.808 229.305 cv
437.76 233.048 432.936 235.209 427.535 237.44 cv
424.224 237.944 li
422.136 238.521 li
418.968 239.096 li
414.648 239.672 li
404.279 240.104 li
403.271 239.672 li
cp
0 0 0 1 cmyk
@
671.76 232.544 mo
674.424 229.377 679.32 228.225 683.136 224.984 cv
683.712 144.488 li
670.176 136.928 li
671.184 134.625 li
748.079 134.625 li
772.488 153.2 li
770.832 154.712 li
763.775 154.136 li
744.264 143.336 725.256 140.672 706.392 141.249 cv
702.072 141.824 li
700.488 142.256 li
700.488 161.696 li
723.168 161.696 li
718.271 151.473 li
757.728 179.625 li
742.104 180.776 li
728.64 168.824 li
700.92 168.824 li
700.92 221.24 li
701.495 223.904 li
722.592 223.904 li
727.56 223.328 li
730.728 222.824 li
732.96 222.32 li
734.544 221.744 li
736.703 221.24 li
753.552 213.104 li
756.792 211.952 li
769.752 199.568 li
770.832 201.152 li
763.775 211.952 760.032 222.32 754.128 232.544 cv
672.912 233.121 li
671.76 232.544 li
cp
level3{
gsave
[-4.3054e-06 -98.4961 98.4961 -4.3054e-06 721.332 233.401 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-4.3054e-06 -98.4961 98.4961 -4.3054e-06 721.332 233.401 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
671.76 232.544 mo
674.424 229.377 679.32 228.225 683.136 224.984 cv
683.712 144.488 li
670.176 136.928 li
671.184 134.625 li
748.079 134.625 li
772.488 153.2 li
770.832 154.712 li
763.775 154.136 li
744.264 143.336 725.256 140.672 706.392 141.249 cv
702.072 141.824 li
700.488 142.256 li
700.488 161.696 li
723.168 161.696 li
718.271 151.473 li
757.728 179.625 li
742.104 180.776 li
728.64 168.824 li
700.92 168.824 li
700.92 221.24 li
701.495 223.904 li
722.592 223.904 li
727.56 223.328 li
730.728 222.824 li
732.96 222.32 li
734.544 221.744 li
736.703 221.24 li
753.552 213.104 li
756.792 211.952 li
769.752 199.568 li
770.832 201.152 li
763.775 211.952 760.032 222.32 754.128 232.544 cv
672.912 233.121 li
671.76 232.544 li
cp
0 0 0 1 cmyk
@
282.456 230.961 mo
276.552 229.809 268.992 226.641 262.944 218.937 cv
259.776 213.104 li
259.272 209.793 li
258.696 202.665 li
262.512 202.305 li
265.68 201.729 li
276.048 201.729 li
286.848 207.057 li
287.352 209.217 289.008 210.368 289.008 211.952 cv
290.016 215.769 li
290.016 222.248 li
285.696 231.536 li
282.456 230.961 li
cp
/4 
<<
/Name (PANTONE 2708 CV)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.1 0.03 0 0 ] 
>>
/CSD add_res
1 /4 /CSD get_res sepcs
1 sep
ef
282.456 230.961 mo
276.552 229.809 268.992 226.641 262.944 218.937 cv
259.776 213.104 li
259.272 209.793 li
258.696 202.665 li
262.512 202.305 li
265.68 201.729 li
276.048 201.729 li
286.848 207.057 li
287.352 209.217 289.008 210.368 289.008 211.952 cv
290.016 215.769 li
290.016 222.248 li
285.696 231.536 li
282.456 230.961 li
cp
0 0 0 1 cmyk
@
606.744 224.984 mo
604.008 224.984 li
602.424 223.904 li
602.424 197.408 li
607.896 197.984 li
617.544 202.305 li
620.783 204.969 622.439 207.632 623.592 210.44 cv
624.096 213.104 li
623.592 221.744 li
621.359 225.561 li
606.744 224.984 li
cp
1 /4 /CSD get_res sepcs
1 sep
ef
606.744 224.984 mo
604.008 224.984 li
602.424 223.904 li
602.424 197.408 li
607.896 197.984 li
617.544 202.305 li
620.783 204.969 622.439 207.632 623.592 210.44 cv
624.096 213.104 li
623.592 221.744 li
621.359 225.561 li
606.744 224.984 li
cp
0 0 0 1 cmyk
@
330.336 95.9604 mo
330.336 93.8003 li
332.064 93.2246 li
332.064 78.0322 li
329.256 78.0322 li
328.176 80.2646 li
324.936 80.2646 li
324.936 73.1362 li
346.608 73.1362 li
346.608 80.2646 li
342.864 80.2646 li
342.576 77.6724 li
339.768 77.6006 li
339.624 93.2246 li
341.64 94.1602 li
341.784 96.0322 li
330.336 95.9604 li
cp
ef
383.616 95.6724 mo
382.896 93.2246 li
382.32 91.0645 li
381.744 89.3364 li
381.384 87.2485 li
379.152 76.0884 li
376.848 75.8726 li
376.416 73.1362 li
387.216 73.1362 li
387.216 75.8726 li
385.848 76.0166 li
386.712 80.2646 li
387.216 81.7764 li
387.792 84.0083 li
388.368 86.1685 li
390.456 75.9443 li
388.872 75.8726 li
388.656 73.1362 li
398.592 73.1362 li
398.304 75.2964 li
396.864 75.4404 li
398.016 79.6885 li
398.592 81.7764 li
399.168 84.0083 li
399.744 86.1685 li
401.904 75.7285 li
400.608 75.9443 li
400.32 73.1362 li
408.312 73.1362 li
408.24 75.5122 li
406.728 75.5122 li
405.648 80.8403 li
401.76 95.9604 li
395.712 95.9604 li
394.848 93.8003 li
394.271 91.6406 li
393.696 89.3364 li
393.12 87.2485 li
392.688 85.6646 li
390.456 95.9604 li
383.616 95.6724 li
cp
ef
411.336 95.0962 mo
411.479 92.6484 li
413.208 92.6484 li
413.208 75.9443 li
410.976 74.9365 li
411.048 72.7764 li
421.344 72.7046 li
428.184 80.8403 li
428.184 75.3682 li
426.6 75.3682 li
426.6 72.7046 li
434.736 72.7046 li
434.736 75.3682 li
433.079 75.3682 li
433.079 92.6484 li
435.312 92.6484 li
435.312 95.3843 li
425.52 95.3843 li
425.52 92.6484 li
427.176 92.6484 li
427.176 91.6406 li
418.535 80.8403 li
418.535 92.6484 li
420.191 92.6484 li
420.191 95.3843 li
411.336 95.0962 li
cp
ef
490.104 95.0962 mo
490.032 92.6484 li
491.616 92.0723 li
491.399 75.8003 li
489.455 74.7925 li
489.455 73.6406 490.032 73.0645 490.464 72.7046 cv
510.552 72.7764 li
510.552 78.5361 li
507.672 78.5361 li
507.384 76.4482 li
500.256 76.4482 li
499.104 77.0244 li
499.104 81.4165 li
504.863 81.5605 li
504.863 80.3364 li
507.24 80.2646 li
507.24 86.6724 li
504.863 86.6724 li
504.792 85.0884 li
499.68 85.0884 li
499.392 92.3604 li
500.832 92.5762 li
500.832 95.3843 li
490.104 95.0962 li
cp
ef
359.928 96.8242 mo
356.616 95.8882 li
353.304 94.0884 352.08 92.3604 351 90.4165 cv
349.992 87.8965 349.848 84.8726 350.352 81.7046 cv
350.64 79.1123 352.152 76.8804 354.168 74.7202 cv
356.184 73.2085 358.704 72.4883 361.872 72.4883 cv
361.872 76.5205 li
361.224 76.3765 li
359.28 77.6006 357.768 78.2485 357.192 80.1924 cv
356.472 82.7124 356.184 86.3843 356.904 88.6162 cv
356.832 90.4883 358.92 91.5684 361.512 92.3604 cv
361.872 92.2886 li
361.872 96.8965 li
359.928 96.8242 li
cp
361.872 72.4883 mo
363.312 72.5605 364.896 72.7046 366.696 73.0645 cv
370.512 74.1445 373.32 77.8887 373.896 80.5522 cv
374.4 83.4326 374.544 86.6724 373.68 89.2646 cv
372.528 91.4966 371.16 93.6563 369.36 94.7363 cv
366.768 96.2485 li
364.608 96.9683 li
361.872 96.8965 li
361.872 92.2886 li
364.32 91.7842 li
365.616 90.5605 366.336 89.7686 366.696 88.3286 cv
367.271 83.7202 li
366.84 80.1924 li
366.12 78.5361 li
363.528 76.9521 li
361.872 76.5205 li
361.872 72.4883 li
cp
ef
472.824 96.1045 mo
469.512 95.1685 li
466.199 93.3682 464.976 91.6406 463.896 89.6963 cv
462.888 87.1763 462.816 84.2246 463.248 81.0566 cv
463.535 78.4644 465.048 76.1602 467.063 74.0723 cv
469.079 72.4883 471.6 71.7686 474.768 71.8403 cv
474.768 76.1602 li
473.688 76.0884 li
471.527 77.0962 470.592 77.3843 470.088 79.4727 cv
469.367 81.9922 469.152 85.6646 469.871 87.8965 cv
469.8 89.7686 471.816 90.8486 474.407 91.6406 cv
474.768 91.5684 li
474.768 96.1763 li
472.824 96.1045 li
cp
474.768 71.8403 mo
476.208 71.8403 477.863 71.9844 479.592 72.3442 cv
483.407 73.4966 486.287 77.2402 486.792 79.9043 cv
487.296 82.7124 487.439 85.9521 486.575 88.6162 cv
485.424 90.7764 484.056 92.9365 482.256 94.0166 cv
479.664 95.6006 li
477.504 96.3203 li
474.768 96.1763 li
474.768 91.5684 li
477.216 91.0645 li
478.512 89.9126 479.304 89.0483 479.592 87.6084 cv
480.168 83.0723 li
479.736 79.4727 li
479.016 77.8887 li
477.144 76.2324 li
474.768 76.1602 li
474.768 71.8403 li
cp
ef
328.536 95.2402 mo
328.536 93.0806 li
330.264 92.5044 li
330.264 77.3125 li
327.456 77.3125 li
326.376 79.5444 li
323.136 79.5444 li
323.136 72.4165 li
344.808 72.4165 li
344.808 79.5444 li
341.064 79.5444 li
340.776 76.9521 li
337.968 76.8804 li
337.824 92.5044 li
339.84 93.4404 li
339.984 95.3125 li
328.536 95.2402 li
cp
level3{
gsave
[-1.00082e-06 -22.896 22.896 -1.00082e-06 333.972 95.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-1.00082e-06 -22.896 22.896 -1.00082e-06 333.972 95.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
1.6274 lw
328.536 95.2402 mo
328.536 93.0806 li
330.264 92.5044 li
330.264 77.3125 li
327.456 77.3125 li
326.376 79.5444 li
323.136 79.5444 li
323.136 72.4165 li
344.808 72.4165 li
344.808 79.5444 li
341.064 79.5444 li
340.776 76.9521 li
337.968 76.8804 li
337.824 92.5044 li
339.84 93.4404 li
339.984 95.3125 li
328.536 95.2402 li
cp
0 0 0 1 cmyk
@
381.816 94.9521 mo
381.096 92.5044 li
380.52 90.3442 li
379.944 88.6162 li
379.584 86.5283 li
377.352 75.3682 li
375.048 75.1523 li
374.616 72.4165 li
385.416 72.4165 li
385.416 75.1523 li
384.048 75.2964 li
384.912 79.5444 li
385.416 81.0566 li
385.992 83.2886 li
386.568 85.4482 li
388.656 75.2246 li
387.072 75.1523 li
386.856 72.4165 li
396.792 72.4165 li
396.504 74.5762 li
395.063 74.7202 li
396.216 78.9683 li
396.792 81.0566 li
397.368 83.2886 li
397.944 85.4482 li
400.176 75.0083 li
398.808 75.2246 li
398.52 72.4165 li
406.512 72.4165 li
406.439 74.7925 li
404.928 74.7925 li
403.848 80.1206 li
400.032 95.2402 li
393.912 95.2402 li
393.048 93.0806 li
392.472 90.9204 li
391.896 88.6162 li
391.32 86.5283 li
390.888 84.9443 li
388.656 95.2402 li
381.816 94.9521 li
cp
level3{
gsave
[-9.97657e-07 -22.8237 22.8237 -9.97657e-07 390.564 95.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-9.97657e-07 -22.8237 22.8237 -9.97657e-07 390.564 95.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
381.816 94.9521 mo
381.096 92.5044 li
380.52 90.3442 li
379.944 88.6162 li
379.584 86.5283 li
377.352 75.3682 li
375.048 75.1523 li
374.616 72.4165 li
385.416 72.4165 li
385.416 75.1523 li
384.048 75.2964 li
384.912 79.5444 li
385.416 81.0566 li
385.992 83.2886 li
386.568 85.4482 li
388.656 75.2246 li
387.072 75.1523 li
386.856 72.4165 li
396.792 72.4165 li
396.504 74.5762 li
395.063 74.7202 li
396.216 78.9683 li
396.792 81.0566 li
397.368 83.2886 li
397.944 85.4482 li
400.176 75.0083 li
398.808 75.2246 li
398.52 72.4165 li
406.512 72.4165 li
406.439 74.7925 li
404.928 74.7925 li
403.848 80.1206 li
400.032 95.2402 li
393.912 95.2402 li
393.048 93.0806 li
392.472 90.9204 li
391.896 88.6162 li
391.32 86.5283 li
390.888 84.9443 li
388.656 95.2402 li
381.816 94.9521 li
cp
0 0 0 1 cmyk
@
409.535 94.3765 mo
409.68 91.9282 li
411.407 91.9282 li
411.407 75.2246 li
409.176 74.2163 li
409.248 72.0566 li
419.544 71.9844 li
426.384 80.1206 li
426.384 74.6484 li
424.8 74.6484 li
424.8 71.9844 li
432.936 71.9844 li
432.936 74.6484 li
431.279 74.6484 li
431.279 91.9282 li
433.512 91.9282 li
433.512 94.6646 li
423.72 94.6646 li
423.72 91.9282 li
425.376 91.9282 li
425.376 90.9204 li
416.736 80.1206 li
416.736 91.9282 li
418.392 91.9282 li
418.392 94.6646 li
409.535 94.3765 li
cp
level3{
gsave
[-9.90307e-07 -22.6556 22.6556 -9.90307e-07 421.344 94.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-9.90307e-07 -22.6556 22.6556 -9.90307e-07 421.344 94.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
409.535 94.3765 mo
409.68 91.9282 li
411.407 91.9282 li
411.407 75.2246 li
409.176 74.2163 li
409.248 72.0566 li
419.544 71.9844 li
426.384 80.1206 li
426.384 74.6484 li
424.8 74.6484 li
424.8 71.9844 li
432.936 71.9844 li
432.936 74.6484 li
431.279 74.6484 li
431.279 91.9282 li
433.512 91.9282 li
433.512 94.6646 li
423.72 94.6646 li
423.72 91.9282 li
425.376 91.9282 li
425.376 90.9204 li
416.736 80.1206 li
416.736 91.9282 li
418.392 91.9282 li
418.392 94.6646 li
409.535 94.3765 li
cp
0 0 0 1 cmyk
@
488.304 94.3765 mo
488.232 91.9282 li
489.816 91.3525 li
489.6 75.0806 li
487.656 74.0723 li
487.656 72.9204 488.232 72.3442 488.664 71.9844 cv
508.752 72.0566 li
508.752 77.8164 li
505.871 77.8164 li
505.584 75.7285 li
498.455 75.7285 li
497.304 76.3042 li
497.304 80.6963 li
503.063 80.8403 li
503.063 79.6162 li
505.439 79.5444 li
505.439 85.9521 li
503.063 85.9521 li
502.991 84.3682 li
497.88 84.3682 li
497.592 91.6406 li
499.032 91.8564 li
499.032 94.6646 li
488.304 94.3765 li
cp
level3{
gsave
[-9.90307e-07 -22.6556 22.6556 -9.90307e-07 498.204 94.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-9.90307e-07 -22.6556 22.6556 -9.90307e-07 498.204 94.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
488.304 94.3765 mo
488.232 91.9282 li
489.816 91.3525 li
489.6 75.0806 li
487.656 74.0723 li
487.656 72.9204 488.232 72.3442 488.664 71.9844 cv
508.752 72.0566 li
508.752 77.8164 li
505.871 77.8164 li
505.584 75.7285 li
498.455 75.7285 li
497.304 76.3042 li
497.304 80.6963 li
503.063 80.8403 li
503.063 79.6162 li
505.439 79.5444 li
505.439 85.9521 li
503.063 85.9521 li
502.991 84.3682 li
497.88 84.3682 li
497.592 91.6406 li
499.032 91.8564 li
499.032 94.6646 li
488.304 94.3765 li
cp
0 0 0 1 cmyk
@
358.128 96.1045 mo
354.816 95.1685 li
351.504 93.3682 350.28 91.6406 349.2 89.6963 cv
348.192 87.1763 348.048 84.1523 348.552 80.9844 cv
348.84 78.3926 350.352 76.1602 352.368 74.0005 cv
354.384 72.4883 356.904 71.7686 360.072 71.7686 cv
360.072 75.8003 li
359.424 75.6563 li
357.479 76.8804 355.968 77.5283 355.392 79.4727 cv
354.672 81.9922 354.384 85.6646 355.104 87.8965 cv
355.032 89.7686 357.12 90.8486 359.712 91.6406 cv
360.072 91.5684 li
360.072 96.1763 li
358.128 96.1045 li
cp
360.072 71.7686 mo
361.512 71.8403 363.096 71.9844 364.896 72.3442 cv
368.712 73.4243 371.52 77.1685 372.096 79.8325 cv
372.6 82.7124 372.744 85.9521 371.88 88.5444 cv
370.728 90.7764 369.36 92.9365 367.56 94.0166 cv
364.968 95.5283 li
362.808 96.2485 li
360.072 96.1763 li
360.072 91.5684 li
362.52 91.0645 li
363.816 89.8403 364.536 89.0483 364.896 87.6084 cv
365.472 83.0005 li
365.04 79.4727 li
364.32 77.8164 li
361.728 76.2324 li
360.072 75.8003 li
360.072 71.7686 li
cp
level3{
gsave
[-1.07005e-06 -24.48 24.48 -1.07005e-06 360.385 96.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-1.07005e-06 -24.48 24.48 -1.07005e-06 360.385 96.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
359.712 91.6406 mo
357.12 90.8486 355.032 89.7686 355.104 87.8965 cv
354.384 85.6646 354.672 81.9922 355.392 79.4727 cv
355.968 77.5283 357.479 76.8804 359.424 75.6563 cv
361.728 76.2324 li
364.32 77.8164 li
365.04 79.4727 li
365.472 83.0005 li
364.896 87.6084 li
364.536 89.0483 363.816 89.8403 362.52 91.0645 cv
359.712 91.6406 li
cp
358.128 96.1045 mo
354.816 95.1685 li
351.504 93.3682 350.28 91.6406 349.2 89.6963 cv
348.192 87.1763 348.048 84.1523 348.552 80.9844 cv
348.84 78.3926 350.352 76.1602 352.368 74.0005 cv
355.32 71.7686 359.208 71.2646 364.896 72.3442 cv
368.712 73.4243 371.52 77.1685 372.096 79.8325 cv
372.6 82.7124 372.744 85.9521 371.88 88.5444 cv
370.728 90.7764 369.36 92.9365 367.56 94.0166 cv
364.968 95.5283 li
362.808 96.2485 li
358.128 96.1045 li
358.128 96.1045 li
cp
0 0 0 1 cmyk
@
471.023 95.3843 mo
467.712 94.4482 li
464.399 92.6484 463.176 90.9204 462.096 88.9766 cv
461.088 86.4565 461.016 83.5044 461.448 80.3364 cv
461.736 77.7441 463.248 75.4404 465.264 73.3525 cv
467.279 71.7686 469.8 71.0483 472.968 71.1206 cv
472.968 75.4404 li
471.888 75.3682 li
469.728 76.3765 468.792 76.6646 468.287 78.7524 cv
467.568 81.2725 467.352 84.9443 468.072 87.1763 cv
468 89.0483 470.016 90.1284 472.607 90.9204 cv
472.968 90.8486 li
472.968 95.4565 li
471.023 95.3843 li
cp
472.968 71.1206 mo
474.407 71.1206 476.063 71.2646 477.792 71.6245 cv
481.607 72.7764 484.488 76.5205 484.991 79.1846 cv
485.495 81.9922 485.64 85.2324 484.775 87.8965 cv
483.623 90.0566 482.256 92.2163 480.455 93.2964 cv
477.863 94.8804 li
475.703 95.6006 li
472.968 95.4565 li
472.968 90.8486 li
475.416 90.3442 li
476.712 89.1924 477.504 88.3286 477.792 86.8882 cv
478.367 82.3525 li
477.936 78.7524 li
477.216 77.1685 li
475.344 75.5122 li
472.968 75.4404 li
472.968 71.1206 li
cp
level3{
gsave
[-1.07027e-06 -24.4849 24.4849 -1.07027e-06 473.297 95.4004 ]ct
<<
/PatternType 2
/Shading
/1 /Gradient get_res >> matrix makepattern grestore setpattern
}if
level3{
ef
}if
level3 not{
gsave
[-1.07027e-06 -24.4849 24.4849 -1.07027e-06 473.297 95.4004 ]ct
<<
/PatternType 1
/PaintType 1
/TilingType 3
/BBox [-10 -10 10 10]
/XStep 20
/YStep 20
/PaintProc{ begin
save
/1 /Gradient get_res exec restore end}
>> matrix makepattern grestore setpattern
ef
}if
472.607 90.9204 mo
470.016 90.1284 468 89.0483 468.072 87.1763 cv
467.352 84.9443 467.568 81.2725 468.287 78.7524 cv
468.792 76.6646 469.728 76.3765 471.888 75.3682 cv
475.344 75.5122 li
477.216 77.1685 li
477.936 78.7524 li
478.367 82.3525 li
477.792 86.8882 li
477.504 88.3286 476.712 89.1924 475.416 90.3442 cv
472.607 90.9204 li
cp
471.023 95.3843 mo
467.712 94.4482 li
464.399 92.6484 463.176 90.9204 462.096 88.9766 cv
461.088 86.4565 461.016 83.5044 461.448 80.3364 cv
461.736 77.7441 463.248 75.4404 465.264 73.3525 cv
468.216 71.0483 472.104 70.5444 477.792 71.6245 cv
481.607 72.7764 484.488 76.5205 484.991 79.1846 cv
485.495 81.9922 485.64 85.2324 484.775 87.8965 cv
483.623 90.0566 482.256 92.2163 480.455 93.2964 cv
477.863 94.8804 li
475.703 95.6006 li
471.023 95.3843 li
471.023 95.3843 li
cp
0 0 0 1 cmyk
@
0.504 lw
2 lc
515.736 346.305 mo
518.039 346.305 li
@
518.399 345.729 mo
520.703 345.729 li
523.367 345.225 li
526.104 344.648 li
@
526.535 344.145 mo
528.84 344.145 li
@
529.199 343.568 mo
531.504 343.568 li
@
531.936 343.064 mo
534.24 343.064 li
@
534.6 342.488 mo
536.904 342.488 li
@
545.544 340.4 mo
547.775 340.4 li
@
548.208 339.753 mo
550.512 339.753 li
@
550.943 339.248 mo
553.248 339.248 li
@
553.607 338.601 mo
555.912 338.601 li
@
556.344 338.169 mo
558.648 338.169 li
@
559.008 337.665 mo
560.736 336.585 li
@
546.048 333.776 mo
561.312 333.776 li
561.744 332.769 li
@
559.584 332.265 mo
561.672 332.265 li
@
393.552 330.536 mo
393.552 321.32 li
@
391.32 328.952 mo
391.32 324.705 li
@
488.232 328.952 mo
490.896 328.952 li
@
474.695 328.448 mo
478.439 328.448 li
@
289.08 307.353 mo
291.168 307.353 li
@
396.72 300.801 mo
396.72 294.896 li
@
368.64 299.793 mo
368.64 297.561 li
@
368.64 292.592 mo
368.64 290.433 li
@
395.856 290.504 mo
395.856 286.761 li
@
588.312 289.424 mo
591.048 289.424 li
@
343.152 262.928 mo
345.888 262.928 li
@
25.5596 312.32 mo
25.5596 315.561 li
24.9121 314.553 24.7681 313.616 25.0557 312.969 cv
25.1274 312.681 25.3438 312.465 25.5596 312.32 cv
cp
2.15967 302.457 mo
3.45557 300.729 li
4.17578 301.017 4.75146 301.16 5.11182 301.017 cv
5.61572 300.873 6.04785 300.512 6.6958 299.72 cv
12.3838 292.305 li
12.3838 292.088 12.3838 292.017 12.4556 291.944 cv
12.5996 291.801 12.6719 291.801 12.7437 291.656 cv
12.8877 291.297 12.96 290.72 12.8154 290.504 cv
12.7437 290.145 12.5278 289.784 12.0234 289.497 cv
13.2476 287.696 li
25.5596 294.824 li
25.5596 297.849 li
24.7681 301.16 li
22.9678 300.801 li
23.1118 299.289 22.8237 297.849 22.1758 296.696 cv
21.4556 295.544 20.4478 294.465 19.0801 293.744 cv
18.5039 293.385 18 293.24 17.6396 293.24 cv
17.3516 293.313 16.9194 293.672 16.416 294.32 cv
14.4717 296.84 li
14.5435 296.84 14.6157 296.984 14.688 297.057 cv
14.7598 297.057 14.9038 297.128 15.0479 297.2 cv
15.9839 297.776 16.6318 297.776 17.208 297.705 cv
17.7114 297.561 18.4316 297.057 19.1519 296.192 cv
20.7358 297.057 li
15.7681 303.681 li
14.1841 302.744 li
14.2559 302.528 14.3276 302.457 14.3994 302.313 cv
14.3994 302.24 14.5435 302.169 14.5435 302.169 cv
14.9038 301.521 14.9038 300.873 14.9038 300.368 cv
14.7598 299.937 14.3994 299.433 13.7515 299.072 cv
13.6074 299 13.4639 298.928 13.3921 298.856 cv
13.2476 298.856 13.104 298.784 12.96 298.784 cv
10.2959 302.169 li
10.2236 302.313 10.0801 302.457 10.0801 302.528 cv
10.0078 302.672 9.93555 302.744 9.93555 302.889 cv
9.79199 303.248 9.71973 303.465 9.86377 303.824 cv
10.0801 304.112 10.5117 304.4 11.0156 304.761 cv
12.4556 305.625 13.8237 305.912 15.4077 305.984 cv
16.9917 305.912 18.6475 305.48 20.5195 304.688 cv
21.5996 306.416 li
16.272 310.377 li
2.15967 302.457 li
2.15967 302.457 li
cp
49.104 316.064 mo
47.376 315.2 li
48.4556 313.904 li
49.5356 314.192 50.5435 314.121 51.48 313.832 cv
52.4878 313.4 53.3516 312.753 54.2881 311.672 cv
56.4478 312.824 li
53.8555 316.209 li
57.0234 317.864 li
55.7275 319.448 li
52.7041 317.937 li
48.8154 323.048 li
48.7437 323.192 48.6719 323.265 48.5278 323.48 cv
48.2397 323.769 48.168 324.057 48.0957 324.2 cv
47.9517 324.344 47.9517 324.705 48.0234 324.849 cv
48.0234 325.064 48.3115 325.353 48.5278 325.424 cv
48.8154 325.568 49.104 325.641 49.4639 325.641 cv
49.896 325.712 50.5435 325.712 51.1919 325.497 cv
51.6958 327.585 li
50.4717 327.944 49.3916 328.088 48.4556 328.017 cv
47.376 328.017 46.584 327.656 45.792 327.297 cv
44.8555 326.793 44.208 326.145 43.9194 325.497 cv
43.7041 324.776 43.7041 323.912 43.9917 323.192 cv
44.1357 322.977 44.208 322.761 44.2798 322.473 cv
44.4238 322.257 44.7114 321.969 44.8555 321.824 cv
49.104 316.064 li
cp
25.5596 315.561 mo
25.5596 312.32 li
25.7041 312.248 25.8477 312.177 26.064 312.177 cv
26.4961 312.032 26.9277 312.032 27.4316 312.248 cv
27.6475 312.393 27.792 312.608 28.0078 312.753 cv
28.1519 312.969 28.2236 313.257 28.4395 313.4 cv
28.5117 313.473 28.584 313.688 28.6558 313.904 cv
29.0156 315.272 29.5195 316.064 30.168 316.424 cv
30.7437 316.641 31.3198 316.784 31.7515 316.641 cv
32.3276 316.641 32.688 316.497 32.9038 315.992 cv
33.0479 315.776 33.0479 315.344 32.8315 315.128 cv
32.688 314.696 32.1841 314.121 31.3921 313.4 cv
29.9517 312.032 29.1597 310.952 28.9438 310.305 cv
28.7275 309.656 28.8721 308.864 29.2314 308 cv
29.8799 306.849 30.8154 305.984 32.3276 305.769 cv
33.7681 305.48 35.3516 305.84 37.1519 306.849 cv
38.5918 307.497 39.5996 308.36 40.3198 309.225 cv
41.0396 310.232 41.1841 311.024 40.8237 311.672 cv
40.6074 312.104 40.3198 312.393 39.96 312.608 cv
39.5996 312.608 39.168 312.608 38.7358 312.32 cv
38.376 312.104 37.9438 311.528 37.584 310.809 cv
37.5117 310.521 37.5117 310.377 37.5117 310.305 cv
37.2236 309.729 37.0078 309.512 36.792 309.152 cv
36.6475 309.008 36.4316 308.793 36.1436 308.576 cv
35.7114 308.36 35.2798 308.289 34.8477 308.36 cv
34.416 308.504 34.1997 308.648 33.9121 309.081 cv
33.6958 309.656 34.1997 310.377 35.2798 311.528 cv
35.5679 311.816 35.8555 312.177 36.1436 312.393 cv
37.2236 313.544 37.7275 314.265 38.0156 314.984 cv
38.1597 315.776 38.0879 316.424 37.7275 317.217 cv
37.1519 318.512 35.9277 319.232 34.3438 319.448 cv
32.688 319.736 30.8877 319.232 29.0156 318.368 cv
27.5039 317.433 26.2798 316.641 25.6318 315.561 cv
25.5596 315.561 25.5596 315.561 25.5596 315.561 cv
25.5596 315.561 li
cp
65.7358 322.544 mo
65.7358 325.712 li
65.4478 325.856 65.1597 326 64.8721 326.217 cv
64.2959 326.793 63.7197 327.297 63.2881 327.873 cv
62.9277 328.448 62.4238 328.952 62.1357 329.528 cv
61.7041 330.393 61.5596 331.04 61.7041 331.616 cv
61.9194 332.048 62.208 332.408 62.7837 332.696 cv
63.7197 333.2 64.7275 333.128 65.7358 332.265 cv
65.7358 336.729 li
65.6641 336.585 65.5918 336.44 65.4478 336.297 cv
65.1597 335.793 65.0879 335.145 65.1597 334.496 cv
64.3677 334.928 63.5757 335 62.8555 335 cv
62.064 334.928 61.272 334.856 60.48 334.496 cv
59.2559 333.849 58.3198 332.769 58.0317 331.616 cv
57.5278 330.393 57.8154 328.881 58.4639 327.368 cv
58.8237 326.576 59.4717 325.641 60.1919 324.92 cv
60.9839 324.272 61.6318 323.625 62.4961 323.192 cv
63.5757 322.832 64.7275 322.616 65.7358 322.544 cv
65.7358 322.544 li
65.7358 322.544 li
cp
25.5596 294.824 mo
26.208 295.185 li
25.5596 297.849 li
25.5596 294.824 li
25.5596 294.824 li
cp
65.7358 336.729 mo
65.7358 332.265 li
65.8076 332.265 li
66.8877 331.4 68.1841 329.816 69.7681 327.297 cv
69.8398 327.368 li
69.5518 326.937 69.3354 326.576 69.0479 326.289 cv
68.9038 326.072 68.6157 325.784 68.2559 325.641 cv
67.7515 325.424 67.1758 325.353 66.6719 325.424 cv
66.3838 325.497 66.0957 325.568 65.7358 325.712 cv
65.7358 322.544 li
66.7437 322.544 67.8237 322.904 68.832 323.265 cv
69.3354 323.625 69.9121 323.912 70.1997 324.272 cv
70.6318 324.705 70.9194 325.064 71.1357 325.497 cv
71.7119 324.992 li
74.9517 326.72 li
70.272 333.416 li
70.1274 333.632 69.9121 333.776 69.8398 333.92 cv
69.8398 334.064 69.7681 334.209 69.6958 334.353 cv
69.624 334.641 69.5518 335 69.5518 335.289 cv
69.624 335.576 69.8398 335.793 70.0557 335.937 cv
70.1997 336.081 70.4878 336.152 70.7041 336.081 cv
70.9194 336.152 71.1357 336.081 71.4961 336.081 cv
71.8555 337.665 li
70.9194 338.096 70.0557 338.24 69.3354 338.24 cv
68.5435 338.169 67.6797 338.096 66.96 337.665 cv
66.4556 337.448 66.0234 337.088 65.7358 336.729 cv
cp
85.4639 326.289 mo
85.4639 336.297 li
85.3916 336.297 85.3916 336.368 85.3198 336.368 cv
84.2397 337.16 83.0879 338.816 81.5039 341.265 cv
81.7197 341.624 82.0801 342.057 82.2959 342.2 cv
82.5117 342.488 82.8721 342.705 83.1597 342.776 cv
83.6641 343.136 84.2397 343.209 84.8154 343.136 cv
85.0317 343.064 85.2476 342.992 85.4639 342.849 cv
85.4639 345.801 li
84.5278 345.873 83.6641 345.656 82.8721 345.225 cv
82.0801 345.008 81.5757 344.648 81.2158 344.36 cv
80.7119 344.001 80.4961 343.568 80.2798 343.209 cv
79.6318 343.497 li
76.1758 341.912 li
84.168 329.889 li
84.2397 329.744 84.3115 329.601 84.3838 329.528 cv
84.4556 329.385 84.4556 329.313 84.4556 329.24 cv
84.5996 328.809 84.5996 328.592 84.4556 328.305 cv
84.3115 328.088 84.0234 327.873 83.4478 327.512 cv
84.5278 326 li
84.8877 326.072 85.1758 326.145 85.4639 326.289 cv
85.4639 326.289 li
cp
140.904 369.128 mo
148.176 356.457 li
148.248 356.24 148.32 356.169 148.392 356.024 cv
148.464 355.952 148.464 355.809 148.536 355.665 cv
148.68 355.377 148.536 355.16 148.392 354.873 cv
148.248 354.656 147.888 354.368 147.312 354.297 cv
148.392 352.497 li
148.968 352.712 149.688 352.856 150.408 353.072 cv
151.127 353.072 151.919 353.145 152.712 353.36 cv
154.439 353.937 li
150.984 359.84 li
151.776 359.769 152.496 359.624 153.144 359.696 cv
153.864 359.769 154.584 359.769 155.231 359.984 cv
156.384 360.488 157.032 361.136 157.464 361.856 cv
157.896 362.504 157.896 363.512 157.536 364.521 cv
157.392 365.024 157.032 365.744 156.528 366.681 cv
156.528 366.824 156.384 366.896 156.384 366.969 cv
154.872 369.416 li
154.728 369.632 154.584 369.849 154.584 369.992 cv
154.512 370.28 154.296 370.424 154.296 370.424 cv
154.224 370.712 154.152 370.928 154.296 371.216 cv
154.439 371.433 154.512 371.433 154.728 371.504 cv
154.944 371.648 155.16 371.648 155.448 371.72 cv
155.664 371.72 155.952 371.648 156.312 371.648 cv
156.672 373.448 li
155.808 373.736 154.944 373.809 154.296 373.881 cv
153.504 373.881 152.784 373.809 152.064 373.448 cv
151.127 373.16 150.48 372.729 150.12 371.937 cv
149.832 371.289 149.76 370.568 149.976 369.849 cv
149.976 369.632 150.048 369.488 150.12 369.416 cv
150.191 369.2 150.408 368.984 150.624 368.624 cv
152.64 365.169 li
152.64 365.024 152.784 364.952 152.855 364.736 cv
153.072 364.305 153.216 364.088 153.288 363.944 cv
153.504 363.585 153.36 363.152 153.288 362.864 cv
153.144 362.504 152.855 362.36 152.28 362.145 cv
151.992 362.001 151.632 361.928 151.2 361.928 cv
150.768 362.001 150.191 362.216 149.543 362.289 cv
144.936 370.568 li
140.904 369.128 li
cp
122.472 359.408 mo
122.543 358.977 122.904 358.688 123.335 358.544 cv
123.696 358.185 124.272 358.328 124.632 358.473 cv
124.992 358.544 125.136 358.688 125.352 358.832 cv
125.496 359.048 125.784 359.265 125.928 359.408 cv
125.928 359.48 126 359.769 126.144 359.912 cv
126.72 361.209 127.224 361.856 127.944 362.145 cv
128.52 362.36 129.096 362.433 129.6 362.289 cv
130.104 362.145 130.392 361.856 130.607 361.353 cv
130.751 361.064 130.68 360.705 130.392 360.488 cv
130.248 360.128 129.672 359.696 128.808 359.048 cv
127.224 357.824 126.288 356.889 126.072 356.24 cv
125.784 355.665 125.784 354.873 126.072 354.008 cv
126.504 352.712 127.368 351.705 128.88 351.416 cv
130.176 350.984 131.832 351.057 133.704 351.632 cv
135.216 352.28 136.439 353.001 137.231 353.72 cv
137.952 354.656 138.24 355.448 137.952 356.169 cv
137.808 356.601 137.52 356.889 137.231 357.104 cv
136.872 357.248 136.439 357.248 136.008 357.104 cv
135.576 356.889 135.072 356.313 134.712 355.665 cv
134.64 355.448 134.496 355.305 134.424 355.305 cv
134.136 354.729 133.919 354.368 133.704 354.152 cv
133.56 354.008 133.2 353.864 132.912 353.648 cv
132.552 353.504 131.976 353.504 131.688 353.576 cv
131.256 353.864 130.968 354.081 130.824 354.368 cv
130.68 354.944 131.184 355.809 132.48 356.673 cv
132.84 357.032 133.127 357.32 133.416 357.465 cv
134.568 358.4 135.216 359.192 135.576 359.84 cv
135.792 360.561 135.792 361.209 135.504 362.001 cv
135.072 363.297 133.992 364.232 132.48 364.736 cv
130.824 365.096 128.952 364.952 127.008 364.232 cv
125.424 363.656 124.2 362.864 123.264 362.001 cv
122.472 361.064 122.256 360.128 122.472 359.408 cv
122.472 359.408 li
cp
115.632 354.297 mo
115.488 354.585 115.344 354.801 115.272 354.944 cv
115.127 355.16 115.056 355.232 114.984 355.305 cv
114.912 355.593 114.912 355.952 114.984 356.096 cv
115.056 356.24 115.127 356.457 115.488 356.528 cv
115.56 356.601 115.776 356.673 116.208 356.673 cv
116.424 356.673 116.64 356.528 117 356.528 cv
117.36 358.473 li
116.424 358.688 115.56 358.832 114.84 358.761 cv
114.12 358.761 113.399 358.616 112.68 358.4 cv
111.744 357.969 111.096 357.393 110.808 356.744 cv
110.376 356.024 110.304 355.305 110.664 354.585 cv
110.664 354.368 110.736 354.225 110.952 354.008 cv
111.023 353.864 111.168 353.576 111.24 353.289 cv
113.904 349.112 li
114.048 348.969 114.048 348.896 114.12 348.681 cv
114.335 348.536 114.192 348.465 114.335 348.465 cv
114.48 348.032 114.408 347.744 114.192 347.528 cv
114.048 347.24 113.688 346.952 113.184 346.665 cv
114.12 345.152 li
114.912 345.368 115.632 345.44 116.352 345.656 cv
117.072 345.801 117.792 345.944 118.512 346.017 cv
120.168 346.665 li
115.632 354.297 li
115.632 354.297 li
cp
121.536 340.185 mo
122.112 340.4 122.472 340.832 122.688 341.408 cv
122.976 341.912 122.976 342.488 122.688 342.92 cv
122.399 343.712 121.968 344.145 121.176 344.576 cv
120.384 344.793 119.736 345.008 118.944 344.648 cv
118.512 344.433 118.152 344.001 117.864 343.497 cv
117.647 343.064 117.647 342.488 117.936 341.912 cv
118.152 341.265 118.656 340.688 119.376 340.328 cv
120.168 339.969 120.888 339.896 121.536 340.185 cv
121.536 340.185 li
cp
102.312 348.896 mo
102.096 349.112 101.808 349.328 101.736 349.544 cv
101.664 349.761 101.592 349.761 101.52 349.832 cv
101.448 350.12 101.448 350.336 101.52 350.553 cv
101.592 350.769 101.736 350.984 102.023 351.057 cv
102.168 351.128 102.456 351.128 102.672 351.2 cv
102.96 351.128 103.176 351.128 103.464 351.057 cv
103.824 353.072 li
102.888 353.289 102.023 353.433 101.231 353.433 cv
100.512 353.36 99.792 353.145 99.2158 352.928 cv
98.2798 352.497 97.6318 351.992 97.272 351.344 cv
96.9839 350.48 96.9839 349.761 97.3438 349.04 cv
97.416 348.824 97.4878 348.681 97.5596 348.393 cv
97.7041 348.248 97.7759 347.961 97.9917 347.744 cv
103.896 338.889 li
103.968 338.816 104.112 338.673 104.112 338.457 cv
104.184 338.457 104.256 338.313 104.256 338.24 cv
104.328 337.809 104.399 337.593 104.256 337.377 cv
104.112 337.088 103.824 336.873 103.248 336.585 cv
104.328 335 li
105.12 335.217 105.768 335.504 106.416 335.576 cv
107.208 335.864 107.928 335.937 108.647 336.152 cv
110.16 336.801 li
102.312 348.896 li
102.312 348.896 li
cp
85.4639 345.801 mo
85.4639 342.849 li
85.8237 342.705 86.1841 342.416 86.6157 342.128 cv
87.1196 341.696 87.48 341.192 88.0557 340.616 cv
88.416 340.04 88.8477 339.393 89.064 338.744 cv
89.4961 338.024 89.4961 337.448 89.2798 336.873 cv
89.208 336.368 88.9194 336.081 88.272 335.72 cv
87.48 335.36 86.4717 335.504 85.4639 336.297 cv
85.4639 326.289 li
85.896 326.433 86.3276 326.504 86.7598 326.648 cv
87.48 326.864 88.1997 326.937 88.8477 327.008 cv
90.5757 327.729 li
86.6157 333.705 li
87.1919 333.344 87.8398 333.2 88.5596 333.272 cv
89.1357 333.272 89.8555 333.416 90.5757 333.776 cv
91.9438 334.424 92.8076 335.433 93.168 336.585 cv
93.5996 337.881 93.5278 339.32 92.8799 340.761 cv
92.5195 341.696 92.0156 342.632 91.2236 343.28 cv
90.5757 344.072 89.7837 344.648 88.8477 345.152 cv
87.9116 345.656 86.9038 345.873 85.896 345.801 cv
85.7515 345.801 85.6074 345.801 85.4639 345.801 cv
85.4639 345.801 li
cp
171.36 365.528 mo
171.36 367.977 li
171.144 368.048 170.928 368.192 170.784 368.265 cv
169.992 368.696 169.2 369.416 168.624 370.424 cv
168.624 370.424 li
169.704 370.784 170.568 370.928 171.36 370.928 cv
171.36 372.944 li
170.208 372.801 168.912 372.512 167.543 372.081 cv
167.472 372.297 167.399 372.44 167.399 372.585 cv
167.256 372.656 167.184 372.801 167.184 373.017 cv
166.968 373.736 167.04 374.457 167.256 375.104 cv
167.543 375.608 168.191 376.112 168.984 376.328 cv
169.56 376.473 170.28 376.544 171.072 376.473 cv
171.144 376.473 171.288 376.473 171.36 376.473 cv
171.36 378.92 li
171.144 378.92 171 378.992 170.855 378.992 cv
169.488 379.064 168.264 378.992 167.04 378.488 cv
165.384 377.912 164.231 377.12 163.512 375.753 cv
162.792 374.385 162.72 372.944 163.296 371.36 cv
163.584 370.28 164.088 369.416 164.736 368.48 cv
165.528 367.616 166.392 366.969 167.399 366.465 cv
168.48 365.961 169.488 365.601 170.64 365.601 cv
170.855 365.528 171.072 365.528 171.36 365.528 cv
171.36 365.528 li
cp
171.36 372.944 mo
171.36 370.928 li
171.647 370.928 171.936 370.928 172.152 370.856 cv
173.16 370.712 173.808 370.209 174.023 369.488 cv
174.023 369.2 174.023 368.84 173.952 368.624 cv
173.808 368.265 173.52 368.12 173.16 367.977 cv
172.584 367.761 171.936 367.761 171.36 367.977 cv
171.36 365.528 li
172.224 365.457 173.016 365.673 173.952 366.032 cv
175.32 366.393 176.399 367.112 176.976 367.977 cv
177.624 368.84 177.768 369.776 177.48 370.784 cv
176.976 372.081 175.968 372.801 174.456 373.088 cv
173.52 373.16 172.512 373.088 171.36 372.944 cv
cp
171.36 378.92 mo
171.36 376.473 li
172.08 376.328 172.872 376.04 173.88 375.753 cv
174.744 377.696 li
173.592 378.272 172.439 378.705 171.36 378.92 cv
171.36 378.92 li
cp
189.072 371.216 mo
189.072 374.024 li
188.64 374.313 188.136 374.673 187.704 375.177 cv
187.2 375.681 186.696 376.328 186.408 376.977 cv
186.12 377.624 185.688 378.272 185.544 378.849 cv
185.328 379.784 185.328 380.433 185.544 380.864 cv
185.688 381.368 186.12 381.656 186.696 381.873 cv
187.56 382.088 188.352 382.017 189.072 381.368 cv
189.072 383.385 li
188.496 383.816 187.776 384.032 187.128 384.032 cv
186.336 384.177 185.544 384.177 184.752 384.032 cv
183.384 383.528 182.376 382.736 181.8 381.585 cv
181.296 380.433 181.224 378.992 181.656 377.48 cv
181.8 376.4 182.304 375.465 182.808 374.601 cv
183.456 373.809 184.176 373.088 184.968 372.585 cv
185.832 371.864 186.912 371.504 187.992 371.36 cv
188.352 371.289 188.712 371.216 189.072 371.216 cv
189.072 371.216 li
cp
205.848 389.72 mo
206.712 387.705 li
208.296 387.992 li
209.016 388.064 209.52 387.992 209.952 387.705 cv
210.312 387.344 210.744 386.624 211.176 385.4 cv
214.056 378.416 li
214.2 378.128 214.272 377.84 214.416 377.769 cv
214.416 377.624 214.56 377.48 214.56 377.408 cv
214.632 377.048 214.56 376.761 214.344 376.473 cv
214.128 376.257 213.768 376.112 213.264 375.824 cv
211.968 375.465 li
212.76 373.736 li
214.056 373.881 215.208 374.096 216.216 374.096 cv
217.224 374.24 218.16 374.24 219.096 374.24 cv
220.536 374.528 li
215.208 387.2 li
215.136 387.272 215.136 387.344 215.136 387.416 cv
214.992 387.776 214.92 387.992 214.92 388.209 cv
214.776 388.568 214.848 389.072 214.992 389.289 cv
215.136 389.576 215.568 389.864 216.144 390.152 cv
217.728 390.512 li
216.792 392.457 li
205.848 389.72 li
cp
189.072 383.385 mo
189.072 381.368 li
189.288 381.225 189.432 381.008 189.576 380.793 cv
190.44 379.784 191.52 377.912 192.816 375.248 cv
192.456 374.889 192.24 374.601 191.952 374.457 cv
191.664 374.24 191.304 374.024 191.016 373.881 cv
190.368 373.736 189.864 373.736 189.36 373.881 cv
189.288 373.952 189.216 374.024 189.072 374.024 cv
189.072 371.216 li
189.792 371.216 190.44 371.289 191.088 371.504 cv
191.736 371.72 192.168 371.937 192.672 372.152 cv
193.032 372.512 193.392 372.729 193.824 373.16 cv
194.616 371.648 li
194.616 371.504 194.688 371.36 194.76 371.216 cv
194.76 371.145 194.832 371.072 194.832 370.928 cv
194.976 370.568 194.904 370.209 194.688 370.064 cv
194.544 369.849 194.184 369.561 193.608 369.416 cv
194.4 367.688 li
195.192 367.832 195.912 367.904 196.704 367.977 cv
197.424 368.12 198.144 368.12 198.864 368.192 cv
200.52 368.624 li
194.256 381.225 li
194.112 381.44 194.04 381.585 193.968 381.656 cv
193.896 381.873 193.896 382.017 193.824 382.16 cv
193.752 382.593 193.68 382.952 193.824 383.169 cv
193.896 383.457 194.184 383.601 194.544 383.744 cv
194.76 383.816 194.904 383.816 195.12 383.744 cv
195.336 383.744 195.696 383.601 195.84 383.457 cv
196.56 385.112 li
195.624 385.688 194.832 385.977 194.04 386.12 cv
193.176 386.12 192.384 386.12 191.664 385.977 cv
190.944 385.832 190.368 385.328 190.008 384.896 cv
189.648 384.465 189.432 383.889 189.36 383.24 cv
189.288 383.313 189.216 383.385 189.072 383.385 cv
189.072 383.385 li
cp
234 378.776 mo
234 388.353 li
233.784 388.209 233.568 388.136 233.424 388.064 cv
232.488 388.209 231.84 388.497 231.264 389 cv
230.688 389.433 230.4 389.937 230.328 390.585 cv
230.112 391.593 230.256 392.313 230.832 392.961 cv
231.336 393.608 232.272 394.112 233.424 394.328 cv
233.64 394.4 233.784 394.4 234 394.473 cv
234 396.776 li
233.64 396.776 233.208 396.705 232.848 396.632 cv
230.688 396.128 229.176 395.336 228.024 394.112 cv
226.872 392.961 226.584 391.809 226.8 390.225 cv
227.088 389.145 227.52 388.353 228.384 387.705 cv
229.248 387.057 230.184 386.553 231.48 386.408 cv
230.976 385.904 230.616 385.328 230.4 384.753 cv
230.256 384.248 230.256 383.528 230.328 382.881 cv
230.688 381.225 231.768 380.001 233.28 379.064 cv
233.496 378.992 233.784 378.849 234 378.776 cv
234 378.776 li
cp
237.744 392.601 mo
237.744 396.488 li
237.24 396.705 236.736 396.776 236.16 396.849 cv
235.512 396.92 234.792 396.92 234 396.776 cv
234 394.473 li
234.936 394.544 235.656 394.473 236.304 394.257 cv
237.096 394.04 237.528 393.393 237.744 392.601 cv
cp
237.744 378.272 mo
237.744 380.576 li
237.096 380.504 236.52 380.648 236.016 380.793 cv
235.368 381.008 234.936 381.44 234.864 382.017 cv
234.792 382.521 234.792 382.881 235.08 383.313 cv
235.296 383.744 235.656 384.104 236.232 384.465 cv
237.744 385.473 li
237.744 392.096 li
237.456 391.305 236.232 390.081 234.144 388.497 cv
234.072 388.424 234.072 388.424 234 388.353 cv
234 378.776 li
235.08 378.344 236.376 378.2 237.744 378.272 cv
237.744 378.272 li
cp
237.744 396.488 mo
237.744 392.601 li
237.744 392.601 237.744 392.601 237.744 392.528 cv
237.744 392.457 237.744 392.24 237.744 392.096 cv
237.744 385.473 li
238.104 385.761 li
238.824 385.544 239.472 385.257 239.832 384.896 cv
240.192 384.608 240.48 384.177 240.624 383.457 cv
240.696 382.809 240.552 382.232 240.12 381.873 cv
239.688 381.297 239.112 380.864 238.32 380.72 cv
238.104 380.648 237.888 380.648 237.744 380.576 cv
237.744 378.272 li
238.176 378.344 238.608 378.416 239.04 378.488 cv
240.696 378.776 242.136 379.641 243 380.648 cv
243.864 381.585 244.224 382.809 244.008 384.032 cv
243.792 384.896 243.432 385.688 242.784 386.12 cv
242.28 386.769 241.2 387.128 240.12 387.561 cv
240.984 388.209 241.704 388.928 241.992 389.576 cv
242.28 390.225 242.424 391.017 242.136 391.881 cv
241.992 392.816 241.704 393.536 241.128 394.185 cv
240.552 395.048 239.76 395.624 238.896 396.057 cv
238.536 396.272 238.176 396.416 237.744 396.488 cv
cp
256.104 382.952 mo
256.104 386.408 li
255.384 387.2 254.664 388.353 254.088 389.793 cv
254.736 389.36 255.456 389.216 256.104 389.145 cv
256.104 391.377 li
255.456 391.448 254.808 391.736 254.232 392.169 cv
253.44 392.889 252.936 393.969 252.648 395.336 cv
252.504 396.2 252.648 396.849 253.152 397.424 cv
253.512 397.928 254.16 398.36 255.024 398.433 cv
255.384 398.504 255.744 398.504 256.104 398.504 cv
256.104 401.096 li
255.6 401.096 255.096 401.024 254.52 400.952 cv
252.288 400.593 250.704 399.729 249.696 398.145 cv
248.76 396.776 248.472 394.904 248.76 392.673 cv
249.12 391.16 249.408 389.793 250.128 388.568 cv
250.704 387.272 251.424 386.048 252.36 385.257 cv
253.44 384.104 254.736 383.385 256.032 382.952 cv
256.104 382.952 li
256.104 382.952 li
cp
587.088 388.497 mo
588.6 389.648 li
587.951 391.017 586.943 392.096 586.008 392.889 cv
584.855 393.681 583.632 394.257 582.479 394.544 cv
580.68 394.832 579.096 394.761 577.871 393.969 cv
576.648 393.248 575.928 391.881 575.495 390.225 cv
575.279 389.072 575.208 387.992 575.495 386.912 cv
575.64 385.761 576.072 384.681 576.72 383.816 cv
577.224 382.736 577.943 382.017 578.808 381.44 cv
579.744 380.864 580.68 380.36 581.76 380.216 cv
583.271 379.928 584.64 379.784 585.792 380.289 cv
586.871 380.72 587.52 381.368 587.808 382.448 cv
587.88 383.096 587.88 383.744 587.448 384.177 cv
587.088 384.824 586.512 385.185 585.792 385.328 cv
585.216 385.473 584.712 385.4 584.352 385.185 cv
583.991 384.896 583.703 384.608 583.56 384.104 cv
583.56 383.961 583.488 383.744 583.488 383.457 cv
583.488 383.24 583.488 382.952 583.488 382.881 cv
583.416 382.665 583.271 382.448 583.128 382.305 cv
582.84 382.16 582.623 382.16 582.336 382.232 cv
581.76 382.305 581.328 382.593 580.824 383.169 cv
580.464 383.601 580.248 384.393 579.96 385.112 cv
579.672 385.761 579.6 386.48 579.527 387.2 cv
579.527 387.92 579.527 388.641 579.672 389.433 cv
579.816 390.297 580.176 390.873 580.896 391.232 cv
581.472 391.665 582.191 391.736 583.056 391.593 cv
583.632 391.448 584.279 391.088 584.855 390.585 cv
585.575 390.081 586.296 389.433 587.088 388.497 cv
cp
555.407 399.873 mo
555.407 391.017 li
555.407 390.873 555.264 390.729 555.407 390.512 cv
555.407 390.44 555.264 390.297 555.264 390.225 cv
555.191 389.864 555.048 389.648 554.832 389.504 cv
554.544 389.504 554.111 389.433 553.535 389.504 cv
553.535 387.632 li
554.184 387.344 554.832 387.057 555.623 386.912 cv
556.344 386.48 556.991 386.12 557.64 385.832 cv
559.224 385.473 li
559.224 386.984 li
559.871 386.12 560.52 385.544 561.168 385.257 cv
561.744 384.824 562.464 384.608 563.184 384.465 cv
564.336 384.177 565.271 384.393 565.991 384.753 cv
566.64 385.257 567.216 385.977 567.359 386.984 cv
567.575 387.561 567.575 388.424 567.504 389.793 cv
567.504 389.793 li
567.432 392.673 li
567.504 392.816 li
567.432 393.393 567.504 393.681 567.504 393.753 cv
567.575 394.112 567.648 394.257 567.792 394.4 cv
568.079 394.616 568.296 394.616 568.512 394.616 cv
568.584 394.544 568.871 394.4 569.016 394.257 cv
569.304 394.185 569.52 393.969 569.736 393.681 cv
571.104 395.048 li
570.384 395.84 569.808 396.344 569.16 396.849 cv
568.439 397.209 567.864 397.497 567.144 397.568 cv
566.136 397.928 565.344 397.856 564.695 397.353 cv
564.048 396.92 563.616 396.344 563.544 395.553 cv
563.472 395.408 563.472 395.192 563.399 394.904 cv
563.399 394.761 563.328 394.4 563.399 394.185 cv
563.399 390.225 li
563.399 389.72 563.472 389.433 563.399 389.216 cv
563.472 389.072 563.399 388.856 563.399 388.712 cv
563.328 388.353 563.111 387.992 562.824 387.92 cv
562.68 387.705 562.32 387.705 561.816 387.776 cv
561.455 387.849 560.951 387.992 560.592 388.28 cv
560.304 388.497 559.8 388.856 559.439 389.433 cv
559.512 399.081 li
555.407 399.873 li
555.407 399.873 li
cp
547.199 382.305 mo
547.199 384.465 li
546.479 384.608 545.976 385.04 545.688 385.328 cv
545.399 385.761 545.256 386.336 545.256 387.2 cv
545.184 396.849 li
545.184 396.92 545.184 397.064 545.184 397.209 cv
545.184 397.28 545.256 397.353 545.256 397.497 cv
545.328 398.072 545.472 398.504 545.832 398.648 cv
546.119 398.864 546.479 398.793 547.128 398.793 cv
547.056 400.952 li
538.848 402.393 li
538.848 400.305 li
539.568 400.017 540.144 399.729 540.359 399.368 cv
540.648 399.008 540.792 398.433 540.72 397.497 cv
540.864 387.849 li
540.792 387.776 540.792 387.705 540.72 387.632 cv
540.72 387.416 540.792 387.344 540.72 387.128 cv
540.72 386.624 540.504 386.336 540.144 386.048 cv
539.855 385.904 539.495 385.761 538.92 385.904 cv
538.848 383.816 li
547.199 382.305 li
547.199 382.305 li
cp
282.96 395.696 mo
283.68 396.2 284.112 396.776 284.544 397.424 cv
284.832 398.072 284.904 398.864 284.76 399.656 cv
284.616 401.528 283.608 402.896 281.808 403.761 cv
280.08 404.696 277.92 405.057 275.328 404.696 cv
273.312 404.408 271.656 403.688 270.648 402.824 cv
269.568 401.816 269.136 400.665 269.28 399.368 cv
269.352 398.648 269.712 398.072 270.288 397.712 cv
270.792 397.28 271.368 397.136 272.232 397.209 cv
272.88 397.28 273.24 397.497 273.528 397.784 cv
273.816 398.145 273.96 398.576 273.888 399.152 cv
273.888 399.297 273.672 399.512 273.528 399.873 cv
273.312 400.088 273.24 400.377 273.168 400.521 cv
273.24 400.881 273.456 401.24 273.888 401.601 cv
274.32 401.889 274.968 402.032 275.688 402.032 cv
276.696 402.248 277.704 402.032 278.424 401.385 cv
279.216 400.881 279.648 399.944 279.792 398.72 cv
279.936 397.928 279.72 397.28 279.072 396.705 cv
278.568 396.2 277.776 395.912 276.696 395.696 cv
276.48 395.624 276.408 395.624 276.264 395.624 cv
276.192 395.624 275.976 395.553 275.76 395.553 cv
276.336 393.393 li
276.84 393.536 277.128 393.536 277.344 393.608 cv
277.632 393.681 277.776 393.753 277.92 393.753 cv
279.072 393.896 280.008 393.681 280.8 393.248 cv
281.592 392.744 282.096 392.024 282.24 391.017 cv
282.384 390.297 282.096 389.72 281.736 389.289 cv
281.304 388.928 280.656 388.568 279.792 388.424 cv
279 388.353 278.352 388.353 277.92 388.568 cv
277.272 388.856 277.056 389.145 276.984 389.576 cv
276.984 389.648 276.912 389.793 277.056 390.081 cv
277.056 390.297 277.056 390.44 277.056 390.585 cv
276.984 391.088 276.696 391.521 276.12 391.809 cv
275.76 392.096 275.112 392.24 274.464 392.24 cv
273.888 392.169 273.384 391.881 273.168 391.521 cv
272.88 391.017 272.664 390.512 272.808 389.864 cv
272.952 388.568 273.816 387.632 275.256 386.912 cv
276.696 386.12 278.424 385.832 280.512 386.12 cv
282.528 386.408 283.896 387.128 284.976 388.28 cv
286.2 389.216 286.632 390.44 286.488 391.809 cv
286.344 392.889 285.984 393.608 285.408 394.257 cv
284.76 394.977 283.896 395.408 282.96 395.696 cv
282.96 395.696 li
cp
256.104 386.408 mo
256.32 386.265 256.464 386.048 256.68 385.904 cv
257.688 385.04 258.84 384.753 259.992 385.04 cv
260.496 385.112 260.928 385.328 261.144 385.4 cv
261.576 385.688 261.72 385.904 261.792 386.12 cv
261.792 386.265 261.72 386.48 261.792 386.769 cv
261.72 387.2 261.792 387.561 261.864 387.776 cv
261.936 388.209 262.152 388.424 262.368 388.641 cv
262.656 388.856 262.872 389 263.304 389.072 cv
263.88 389.216 264.528 389 264.888 388.641 cv
265.32 388.424 265.608 387.92 265.752 387.272 cv
265.824 386.336 265.536 385.328 264.528 384.465 cv
263.592 383.744 262.296 382.952 260.568 382.736 cv
258.984 382.448 257.544 382.665 256.104 382.952 cv
256.104 386.408 li
256.104 386.408 li
cp
256.104 401.096 mo
256.104 398.504 li
256.752 398.433 257.4 398.145 257.976 397.712 cv
258.84 397.064 259.272 395.984 259.56 394.761 cv
259.704 393.896 259.56 393.104 259.128 392.528 cv
258.84 392.024 258.192 391.521 257.328 391.448 cv
256.896 391.305 256.536 391.305 256.104 391.377 cv
256.104 389.145 li
256.248 389.072 256.32 389.072 256.392 389.072 cv
257.112 389 257.976 388.928 258.768 389.072 cv
260.64 389.504 262.008 390.152 262.872 391.232 cv
263.736 392.385 264.024 393.753 263.808 395.336 cv
263.52 397.424 262.44 399.008 260.64 400.017 cv
259.272 400.809 257.832 401.169 256.104 401.096 cv
256.104 401.096 li
cp
601.56 375.608 mo
601.56 377.984 li
601.416 377.984 601.344 377.984 601.271 378.057 cv
600.84 378.2 600.407 378.416 599.976 378.849 cv
599.688 379.28 599.399 379.784 599.328 380.576 cv
599.039 381.225 598.968 382.017 598.968 382.809 cv
598.968 383.601 599.039 384.465 599.184 385.185 cv
599.399 386.265 599.688 386.912 600.119 387.344 cv
600.479 387.705 600.983 387.776 601.56 387.705 cv
601.56 390.081 li
599.904 390.297 598.464 390.081 597.384 389.433 cv
596.088 388.497 595.224 387.128 594.936 385.328 cv
594.359 383.096 594.792 381.008 595.943 379.136 cv
597.096 377.408 598.752 376.257 600.983 375.681 cv
601.199 375.608 601.344 375.608 601.56 375.608 cv
601.56 375.608 li
cp
616.248 385.688 mo
615.672 376.761 li
615.672 376.544 615.672 376.4 615.672 376.328 cv
615.6 376.112 615.6 375.969 615.6 375.896 cv
615.527 375.681 615.24 375.32 614.951 375.248 cv
614.736 375.248 614.232 375.248 613.728 375.465 cv
613.656 373.593 li
614.304 373.232 614.951 372.801 615.6 372.585 cv
616.248 372.297 616.968 371.864 617.616 371.433 cv
619.128 370.928 li
619.199 372.44 li
619.703 371.72 620.063 371.072 620.64 370.712 cv
621.144 370.209 621.72 369.849 622.296 369.632 cv
623.016 369.488 623.664 369.488 624.24 369.776 cv
624.744 370.064 625.104 370.424 625.248 370.928 cv
625.392 371.648 625.32 372.152 625.104 372.656 cv
624.744 373.16 624.312 373.448 623.664 373.736 cv
623.232 373.809 622.656 373.809 622.079 373.665 cv
621.575 373.593 621.287 373.593 621.144 373.593 cv
620.64 373.736 620.279 374.096 619.991 374.961 cv
619.703 375.753 619.703 376.761 619.703 377.912 cv
620.352 384.536 li
616.248 385.688 li
cp
601.56 390.081 mo
601.56 387.705 li
601.56 387.705 601.632 387.705 601.703 387.705 cv
602.712 387.416 603.359 386.624 603.792 385.257 cv
604.224 383.961 604.152 382.232 603.72 380.36 cv
603.504 379.497 603.287 378.776 602.855 378.344 cv
602.568 377.984 602.063 377.912 601.56 377.984 cv
601.56 375.608 li
603.072 375.32 604.512 375.608 605.592 376.328 cv
606.96 377.192 607.68 378.488 608.184 380.36 cv
608.544 382.593 608.256 384.681 607.104 386.553 cv
606.023 388.353 604.224 389.504 601.92 389.937 cv
601.775 390.008 601.632 390.008 601.56 390.081 cv
601.56 390.081 li
cp
639.792 364.665 mo
639.792 367.544 li
639.648 367.544 639.504 367.616 639.432 367.616 cv
638.495 368.048 637.775 368.84 637.56 370.136 cv
637.199 371.433 637.271 373.593 637.703 376.4 cv
638.063 376.544 638.495 376.761 638.855 376.761 cv
639.144 376.761 639.504 376.688 639.792 376.616 cv
639.792 378.849 li
639.72 378.849 639.72 378.849 639.648 378.849 cv
639.072 378.92 638.568 378.92 637.848 378.849 cv
638.063 380.72 li
638.063 381.008 638.063 381.297 638.136 381.44 cv
638.136 381.585 638.208 381.729 638.208 381.944 cv
638.279 382.305 638.495 382.593 638.855 382.665 cv
639.072 382.665 639.359 382.665 639.792 382.665 cv
639.792 385.04 li
632.592 387.2 li
632.376 385.04 li
633.096 384.753 633.527 384.393 633.888 384.032 cv
634.104 383.601 634.104 382.881 634.104 381.944 cv
633.096 371.793 li
633.096 371.648 633.096 371.433 633.096 371.289 cv
633.023 371.216 633.023 371.072 633.023 370.928 cv
632.951 370.641 632.808 370.424 632.448 370.28 cv
632.232 370.209 631.8 370.209 631.152 370.497 cv
631.008 368.624 li
631.871 368.192 632.52 367.832 633.312 367.4 cv
633.96 367.112 634.607 366.753 635.111 366.393 cv
636.407 366.032 li
636.552 367.688 li
636.983 366.896 637.488 366.248 637.991 365.744 cv
638.424 365.313 639 364.952 639.792 364.665 cv
639.792 364.665 li
cp
639.792 378.849 mo
639.792 376.616 li
639.792 376.544 639.864 376.544 639.864 376.544 cv
640.512 376.4 640.943 376.112 641.304 375.681 cv
641.664 375.248 641.88 374.673 642.023 373.881 cv
642.24 373.088 642.312 372.297 642.24 371.504 cv
642.24 370.784 642.096 369.992 641.951 369.488 cv
641.736 368.696 641.448 368.192 641.016 367.904 cv
640.728 367.616 640.296 367.544 639.792 367.544 cv
639.792 364.665 li
639.864 364.665 639.864 364.665 639.936 364.665 cv
641.376 364.232 642.672 364.377 643.68 365.096 cv
644.904 365.744 645.623 366.824 646.056 368.48 cv
646.416 369.416 646.488 370.424 646.416 371.433 cv
646.344 372.512 646.128 373.448 645.623 374.457 cv
645.191 375.536 644.616 376.4 643.824 377.048 cv
642.96 377.84 642.023 378.416 641.016 378.705 cv
640.656 378.849 640.224 378.849 639.792 378.849 cv
cp
639.792 385.04 mo
639.792 382.665 li
639.936 382.665 640.152 382.593 640.439 382.593 cv
640.656 384.753 li
639.792 385.04 li
639.792 385.04 li
cp
659.088 358.4 mo
659.088 360.849 li
658.871 360.849 658.656 360.92 658.367 360.992 cv
657.936 361.136 657.575 361.497 657.216 361.856 cv
657 362.36 656.783 362.937 656.64 363.656 cv
656.568 364.305 656.424 365.096 656.64 365.961 cv
656.64 366.753 656.783 367.544 657 368.265 cv
657.359 369.272 657.72 369.92 658.152 370.28 cv
658.439 370.568 658.728 370.641 659.088 370.641 cv
659.088 373.017 li
657.864 373.232 656.712 373.088 655.703 372.656 cv
654.264 371.864 653.328 370.641 652.824 368.84 cv
652.104 366.753 652.176 364.736 653.184 362.648 cv
654.119 360.705 655.775 359.336 657.936 358.688 cv
658.367 358.544 658.728 358.473 659.088 358.4 cv
659.088 358.4 li
cp
674.352 367.473 mo
673.271 358.616 li
673.271 358.4 673.271 358.328 673.271 358.185 cv
673.271 357.969 673.271 357.896 673.199 357.824 cv
673.056 357.536 672.84 357.248 672.552 357.248 cv
672.264 357.248 671.832 357.248 671.256 357.393 cv
671.111 355.521 li
671.832 355.232 672.407 354.873 673.056 354.512 cv
673.632 354.081 674.352 353.648 675 353.289 cv
676.439 352.712 li
676.656 354.081 li
677.088 353.36 677.448 352.712 677.951 352.28 cv
678.527 351.776 679.032 351.488 679.607 351.344 cv
680.256 350.984 680.904 350.912 681.552 351.128 cv
682.056 351.416 682.416 351.776 682.632 352.424 cv
682.775 353.001 682.703 353.576 682.488 354.081 cv
682.199 354.585 681.768 354.944 681.119 355.16 cv
680.688 355.305 680.184 355.305 679.607 355.305 cv
679.032 355.232 678.744 355.16 678.672 355.16 cv
678.096 355.305 677.808 355.809 677.592 356.601 cv
677.232 357.393 677.304 358.4 677.376 359.624 cv
678.312 366.104 li
674.352 367.473 li
cp
659.088 373.017 mo
659.088 370.641 li
659.304 370.641 659.592 370.568 659.808 370.497 cv
660.744 370.136 661.392 369.272 661.607 367.832 cv
661.824 366.465 661.607 364.809 661.032 363.008 cv
660.816 362.145 660.455 361.497 659.951 361.064 cv
659.736 360.849 659.448 360.849 659.088 360.849 cv
659.088 358.4 li
660.384 358.112 661.535 358.257 662.544 358.761 cv
663.912 359.48 664.848 360.705 665.495 362.576 cv
666.144 364.736 665.928 366.896 665.063 368.769 cv
664.056 370.641 662.472 372.008 660.24 372.729 cv
659.88 372.873 659.448 372.944 659.088 373.017 cv
659.088 373.017 li
cp
695.376 345.368 mo
695.376 347.673 li
695.232 347.744 695.088 347.744 694.943 347.816 cv
694.367 347.961 693.936 348.32 693.575 348.824 cv
693.287 349.473 693.072 350.048 693.072 350.84 cv
692.928 351.561 692.928 352.353 693 353.072 cv
693.072 353.864 693.216 354.585 693.359 355.232 cv
693.648 355.952 694.008 356.528 694.439 356.744 cv
694.728 356.961 695.016 357.032 695.376 357.032 cv
695.376 359.84 li
694.079 360.272 692.855 360.2 691.775 359.696 cv
690.695 359.048 689.976 357.896 689.328 356.457 cv
689.039 355.448 688.824 354.368 688.752 353.433 cv
688.752 352.353 689.039 351.344 689.256 350.408 cv
689.688 349.257 690.336 348.32 691.056 347.601 cv
691.703 346.736 692.64 346.232 693.648 345.729 cv
694.296 345.512 694.871 345.368 695.304 345.368 cv
695.376 345.368 li
695.376 345.368 li
cp
709.92 342.128 mo
708.264 342.776 li
707.904 341.192 li
708.912 340.616 709.488 339.753 709.848 338.816 cv
710.208 337.809 710.352 336.585 710.208 335.145 cv
712.439 334.209 li
713.232 338.385 li
716.399 337.088 li
716.832 339.248 li
713.663 340.544 li
714.888 346.952 li
714.96 347.096 715.032 347.24 714.96 347.385 cv
715.032 347.816 715.176 348.177 715.176 348.248 cv
715.32 348.465 715.464 348.681 715.607 348.824 cv
715.896 348.896 716.184 348.824 716.399 348.681 cv
716.616 348.608 716.976 348.465 717.191 348.177 cv
717.479 347.816 717.912 347.24 718.199 346.593 cv
720.072 347.744 li
719.424 348.824 718.848 349.761 718.199 350.48 cv
717.479 351.2 716.76 351.776 715.968 352.136 cv
715.032 352.424 714.096 352.497 713.376 352.424 cv
712.656 352.136 712.152 351.561 711.792 350.769 cv
711.72 350.48 711.648 350.336 711.504 350.12 cv
711.432 349.832 711.359 349.544 711.359 349.257 cv
709.92 342.128 li
cp
695.376 359.84 mo
695.376 357.032 li
695.52 356.961 695.736 356.889 695.951 356.816 cv
696.96 356.457 697.68 355.521 697.752 354.225 cv
697.896 352.856 697.752 350.696 697.104 347.816 cv
697.176 347.744 li
696.744 347.744 696.384 347.673 696.023 347.673 cv
695.808 347.673 695.592 347.673 695.376 347.673 cv
695.376 345.368 li
695.808 345.368 696.312 345.44 696.816 345.44 cv
696.888 344.72 li
700.271 343.424 li
701.712 351.632 li
701.712 351.992 701.712 352.209 701.783 352.353 cv
701.783 352.497 701.855 352.497 701.855 352.712 cv
702 353.072 702.144 353.433 702.432 353.576 cv
702.648 353.72 702.936 353.72 703.224 353.576 cv
703.439 353.576 703.656 353.504 703.728 353.145 cv
703.871 353.001 704.088 352.784 704.304 352.497 cv
705.744 353.504 li
705.384 354.368 704.88 355.232 704.376 355.809 cv
703.656 356.457 703.008 356.889 702.216 357.177 cv
701.568 357.393 700.848 357.393 700.344 357.248 cv
699.768 357.248 699.264 356.816 698.904 356.24 cv
698.472 357.177 698.111 357.824 697.607 358.4 cv
696.96 358.977 696.312 359.48 695.52 359.769 cv
695.448 359.769 695.448 359.769 695.376 359.84 cv
695.376 359.84 li
cp
729.575 330.896 mo
729.575 333.2 li
728.928 333.416 728.424 334.064 728.063 334.928 cv
727.703 335.72 727.703 336.873 727.775 338.024 cv
727.775 338.024 li
728.495 337.736 729.072 337.377 729.575 337.017 cv
729.575 339.177 li
729.144 339.465 728.568 339.681 727.991 339.969 cv
728.063 340.112 728.063 340.257 728.208 340.4 cv
728.208 340.616 728.279 340.761 728.279 340.904 cv
728.568 341.624 729 342.128 729.575 342.488 cv
729.575 342.488 li
729.575 345.801 li
728.712 345.944 727.92 345.801 727.128 345.512 cv
725.832 345.008 724.896 343.856 724.248 342.2 cv
723.888 341.336 723.744 340.257 723.672 339.104 cv
723.744 338.024 723.96 336.944 724.392 335.793 cv
724.896 334.641 725.544 333.776 726.407 332.984 cv
727.056 332.121 727.991 331.473 729.144 331.112 cv
729.287 331.04 729.432 330.969 729.575 330.896 cv
729.575 330.896 li
cp
729.575 339.177 mo
731.448 338.24 732.888 337.16 733.896 336.225 cv
734.904 334.928 735.264 333.632 734.76 332.336 cv
734.328 331.4 733.68 330.753 732.672 330.536 cv
731.808 330.32 730.8 330.465 729.575 330.896 cv
729.575 333.2 li
729.648 333.128 729.72 333.128 729.72 333.128 cv
730.152 332.984 730.439 332.912 730.728 333.057 cv
731.088 333.128 731.232 333.272 731.376 333.705 cv
731.592 334.353 731.448 335.145 730.8 336.081 cv
730.512 336.368 730.079 336.729 729.575 337.017 cv
729.575 339.177 li
cp
729.575 345.801 mo
729.575 342.488 li
730.224 342.632 730.943 342.632 731.663 342.2 cv
732.312 341.984 732.96 341.553 733.464 340.977 cv
734.111 340.4 734.544 339.536 735.048 338.457 cv
736.991 339.465 li
736.344 340.904 735.623 342.128 734.76 343.064 cv
733.896 344.072 732.816 344.72 731.592 345.225 cv
730.943 345.512 730.224 345.729 729.575 345.801 cv
729.575 345.801 li
cp
747.864 323.265 mo
747.864 325.497 li
747.575 325.568 747.359 325.641 747.144 325.712 cv
746.568 326 746.136 326.36 745.92 326.864 cv
745.632 327.368 745.416 328.017 745.488 328.809 cv
745.416 329.528 745.416 330.393 745.56 331.112 cv
745.632 331.832 745.848 332.553 746.063 333.128 cv
746.424 333.992 746.783 334.496 747.287 334.712 cv
747.432 334.856 747.648 334.928 747.864 334.928 cv
747.864 337.881 li
746.855 338.24 745.703 338.24 744.84 337.736 cv
743.688 337.232 742.824 336.152 742.104 334.641 cv
741.744 333.705 741.455 332.696 741.312 331.761 cv
741.312 330.681 741.384 329.601 741.744 328.736 cv
742.032 327.585 742.607 326.648 743.184 325.784 cv
743.904 324.992 744.768 324.2 745.775 323.769 cv
746.352 323.553 746.855 323.408 747.359 323.265 cv
747.504 323.265 747.72 323.265 747.864 323.265 cv
747.864 323.265 li
cp
747.864 317.289 mo
747.864 320.457 li
747.792 320.385 747.648 320.313 747.575 320.313 cv
747.287 320.24 746.855 320.313 746.352 320.528 cv
745.92 318.585 li
746.64 318.297 747.287 317.864 747.792 317.36 cv
747.792 317.36 747.864 317.36 747.864 317.289 cv
747.864 317.289 li
cp
768.312 328.017 mo
767.736 326 li
769.104 325.064 li
769.752 324.776 770.039 324.272 770.256 323.84 cv
770.328 323.265 770.256 322.473 769.824 321.248 cv
767.808 313.904 li
767.736 313.544 767.663 313.328 767.663 313.112 cv
767.592 312.969 767.592 312.896 767.52 312.824 cv
767.448 312.465 767.16 312.32 766.871 312.248 cv
766.584 312.177 766.152 312.248 765.72 312.393 cv
764.352 312.896 li
763.92 311.024 li
765 310.448 766.079 309.801 766.871 309.152 cv
767.736 308.504 768.527 307.928 769.248 307.28 cv
770.472 306.632 li
774 320.024 li
774.072 320.024 774.072 320.096 774.072 320.24 cv
774.144 320.528 774.216 320.816 774.287 320.961 cv
774.575 321.32 774.864 321.681 775.152 321.753 cv
775.439 321.824 775.943 321.753 776.52 321.536 cv
777.96 320.961 li
778.464 323.048 li
768.312 328.017 li
cp
747.864 337.881 mo
747.864 334.928 li
748.152 334.856 748.439 334.784 748.728 334.641 cv
749.736 334.209 750.384 333.272 750.312 331.977 cv
750.455 330.608 750.023 328.448 749.376 325.568 cv
748.943 325.497 748.584 325.424 748.296 325.424 cv
748.152 325.424 748.008 325.497 747.864 325.497 cv
747.864 323.265 li
748.224 323.192 748.512 323.192 748.8 323.265 cv
748.512 321.536 li
748.512 321.465 748.367 321.248 748.367 321.104 cv
748.367 321.032 748.296 320.889 748.224 320.816 cv
748.079 320.601 748.008 320.528 747.864 320.457 cv
747.864 317.289 li
748.439 316.928 749.088 316.353 749.663 315.992 cv
751.248 315.272 li
754.199 329.169 li
754.199 329.385 754.271 329.528 754.271 329.744 cv
754.271 329.889 754.344 330.032 754.416 330.177 cv
754.56 330.536 754.775 330.824 754.991 330.896 cv
755.208 331.04 755.495 331.04 755.855 330.824 cv
756.072 330.753 756.216 330.681 756.359 330.465 cv
756.504 330.248 756.648 330.032 756.864 329.816 cv
758.304 330.681 li
757.943 331.616 757.512 332.408 757.079 333.057 cv
756.432 333.632 755.855 334.209 755.136 334.496 cv
754.416 334.928 753.695 334.928 753.191 334.856 cv
752.616 334.641 752.111 334.424 751.68 333.849 cv
751.392 334.856 750.888 335.648 750.455 336.152 cv
749.88 336.729 749.304 337.232 748.584 337.593 cv
748.367 337.736 748.079 337.809 747.864 337.881 cv
747.864 337.881 li
cp
788.976 313.473 mo
788.976 317.36 li
788.76 317.36 788.544 317.36 788.328 317.36 cv
787.032 317.289 786.168 316.712 785.808 315.849 cv
785.52 315.344 785.52 314.769 785.663 314.192 cv
785.736 313.616 786.096 313.112 786.672 312.896 cv
786.96 312.753 787.248 312.681 787.68 312.681 cv
787.968 312.681 788.328 312.824 788.544 312.969 cv
788.616 313.185 788.832 313.257 788.976 313.473 cv
788.976 313.473 li
cp
788.976 296.984 mo
788.976 299.793 li
788.616 299.864 788.256 300.081 787.896 300.225 cv
786.888 300.729 786.168 301.521 785.88 302.601 cv
785.663 303.753 785.88 304.761 786.455 306.057 cv
786.888 306.92 787.392 307.353 787.968 307.568 cv
788.328 307.712 788.616 307.712 788.976 307.712 cv
788.976 310.592 li
787.824 311.024 786.744 311.096 785.808 310.881 cv
784.512 310.521 783.359 309.656 782.712 308.145 cv
781.775 306.344 781.703 304.473 782.424 302.457 cv
783.287 300.585 784.656 299 786.816 297.776 cv
787.535 297.416 788.256 297.2 788.976 296.984 cv
788.976 296.984 li
cp
788.976 317.36 mo
788.976 313.473 li
789.048 313.544 789.119 313.688 789.119 313.832 cv
789.479 313.977 789.623 314.121 789.623 314.192 cv
789.84 314.336 789.983 314.48 790.488 314.48 cv
790.775 314.48 791.279 314.265 791.64 314.121 cv
792.72 313.473 793.512 312.465 793.8 311.385 cv
794.088 310.088 794.088 308.504 793.584 306.561 cv
793.296 307.353 792.792 308 792.287 308.648 cv
791.64 309.152 790.991 309.656 790.344 310.017 cv
789.84 310.232 789.407 310.448 788.976 310.592 cv
788.976 307.712 li
789.336 307.641 789.768 307.497 790.128 307.28 cv
791.208 306.705 791.712 305.912 792 304.832 cv
792.359 303.681 792.144 302.528 791.495 301.305 cv
791.063 300.512 790.632 300.008 789.983 299.72 cv
789.695 299.648 789.336 299.72 788.976 299.793 cv
788.976 296.984 li
790.128 296.769 791.279 296.769 792.287 297.128 cv
793.8 297.632 795.168 298.928 796.176 300.873 cv
796.752 302.169 797.328 303.681 797.472 305.048 cv
797.688 306.488 797.904 307.784 797.544 309.152 cv
797.472 310.521 796.824 312.032 795.96 313.257 cv
795.096 314.48 793.871 315.488 792.504 316.28 cv
791.208 316.928 790.056 317.217 788.976 317.36 cv
cp
808.703 302.961 mo
808.703 306.92 li
808.488 306.92 808.271 306.92 808.056 306.92 cv
806.832 306.849 805.896 306.344 805.535 305.408 cv
805.176 304.832 805.176 304.328 805.32 303.753 cv
805.535 303.248 805.824 302.744 806.328 302.457 cv
806.688 302.24 806.976 302.169 807.336 302.169 cv
807.695 302.169 807.983 302.313 808.199 302.528 cv
808.344 302.672 808.488 302.816 808.703 302.961 cv
808.703 302.961 li
cp
808.703 286.544 mo
808.703 289.353 li
808.344 289.424 807.983 289.568 807.623 289.784 cv
806.616 290.217 805.896 291.152 805.607 292.232 cv
805.32 293.24 805.607 294.393 806.111 295.688 cv
806.616 296.408 807.048 296.912 807.695 297.057 cv
807.983 297.2 808.344 297.272 808.703 297.272 cv
808.703 300.152 li
807.552 300.585 806.472 300.656 805.535 300.512 cv
804.168 300.081 803.088 299.217 802.367 297.705 cv
801.504 295.832 801.359 293.961 802.152 292.017 cv
803.016 290.072 804.312 288.561 806.544 287.336 cv
807.264 286.977 807.983 286.688 808.703 286.544 cv
808.703 286.544 li
cp
832.968 282.729 mo
833.832 282.512 834.552 282.729 835.128 283.017 cv
835.775 283.448 836.279 284.024 836.64 284.744 cv
837.504 286.257 837.504 288.057 836.568 289.928 cv
835.632 291.729 834.191 293.24 831.744 294.536 cv
830.016 295.616 828.432 296.048 826.992 295.832 cv
825.624 295.761 824.472 295.112 823.968 293.961 cv
823.68 293.313 823.535 292.592 823.824 291.944 cv
823.968 291.297 824.328 290.793 825.048 290.433 cv
825.624 290.145 826.056 290.072 826.416 290.145 cv
826.92 290.145 827.279 290.504 827.568 291.008 cv
827.64 291.152 827.64 291.368 827.64 291.729 cv
827.712 292.088 827.783 292.377 827.855 292.521 cv
828 292.736 828.432 292.952 828.936 292.952 cv
829.439 292.952 830.016 292.665 830.664 292.305 cv
831.527 291.801 832.248 291.081 832.535 290 cv
832.896 289.136 832.68 288.128 832.104 286.977 cv
831.744 286.257 831.168 285.896 830.448 285.681 cv
829.728 285.753 828.863 285.969 827.855 286.4 cv
827.712 286.544 827.712 286.616 827.568 286.688 cv
827.495 286.688 827.208 286.761 827.063 286.904 cv
826.271 284.816 li
826.775 284.601 827.063 284.385 827.136 284.313 cv
827.495 284.24 827.568 284.24 827.712 284.169 cv
828.792 283.592 829.439 282.873 829.871 281.864 cv
830.16 281 830.16 280.209 829.728 279.344 cv
829.439 278.696 828.936 278.336 828.432 278.265 cv
827.855 278.048 827.063 278.265 826.344 278.696 cv
825.695 279.057 825.119 279.561 824.832 279.92 cv
824.472 280.497 824.399 280.928 824.616 281.217 cv
824.76 281.289 824.832 281.504 824.976 281.648 cv
825.048 281.864 825.191 281.937 825.264 282.152 cv
825.552 282.512 825.552 283.088 825.264 283.665 cv
825.048 284.169 824.688 284.672 824.111 284.961 cv
823.535 285.32 823.104 285.465 822.6 285.32 cv
822.168 285.104 821.736 284.744 821.447 284.169 cv
820.871 283.017 821.016 281.648 821.736 280.28 cv
822.527 278.696 823.824 277.4 825.624 276.465 cv
827.279 275.385 828.936 275.169 830.448 275.24 cv
831.888 275.457 832.968 276.177 833.544 277.328 cv
834.048 278.265 834.264 279.128 834.048 279.992 cv
833.976 280.856 833.616 281.72 832.968 282.729 cv
cp
808.703 306.92 mo
808.703 302.961 li
808.775 303.104 808.848 303.177 808.92 303.32 cv
809.136 303.536 809.352 303.753 809.352 303.824 cv
809.567 303.969 809.712 304.04 810.144 303.969 cv
810.504 303.969 810.936 303.824 811.367 303.681 cv
812.52 303.104 813.24 302.024 813.527 300.873 cv
813.816 299.576 813.744 298.064 813.384 296.121 cv
812.951 296.984 812.52 297.632 811.943 298.209 cv
811.367 298.712 810.72 299.217 810.072 299.504 cv
809.64 299.793 809.136 300.008 808.703 300.152 cv
808.703 297.272 li
809.063 297.2 809.424 297.057 809.855 296.84 cv
810.864 296.265 811.439 295.473 811.728 294.393 cv
812.016 293.169 811.8 292.017 811.152 290.793 cv
810.792 290 810.359 289.497 809.712 289.28 cv
809.424 289.209 809.063 289.28 808.703 289.353 cv
808.703 286.544 li
809.855 286.257 810.936 286.328 811.943 286.688 cv
813.527 287.192 814.824 288.488 815.832 290.504 cv
816.479 291.729 817.056 293.169 817.199 294.536 cv
817.488 296.048 817.56 297.344 817.271 298.712 cv
817.199 300.081 816.552 301.521 815.616 302.744 cv
814.752 303.969 813.6 305.048 812.232 305.84 cv
810.936 306.488 809.783 306.849 808.703 306.92 cv
808.703 306.92 li
cp
ef
4 lw
0 lc
301.608 367.328 mo
198.936 349.904 106.56 315.344 23.3276 265.952 cv
39.8154 212.457 39.96 160.688 22.8237 110.36 cv
240.408 -3.11133 543.455 -33.6396 812.808 108.417 cv
798.119 160.256 801.936 207.561 817.128 256.305 cv
705.168 322.688 583.416 365.601 454.752 377.912 cv
1 /3 /CSD get_res sepcs
1 sep
@
188.28 292.521 mo
190.656 291.297 li
192.96 289.641 li
202.968 288.488 212.328 287.048 220.464 282.081 cv
222.192 281.217 li
223.704 281 li
227.088 281.72 li
229.392 281.72 li
231.48 283.088 li
235.152 285.104 li
240.192 286.761 li
244.944 287.769 li
247.464 288.272 li
253.368 290.145 li
256.248 289.784 li
266.544 292.521 li
271.944 293.024 li
276.48 295.544 li
280.512 295.544 li
273.816 301.809 li
271.728 302.601 270.216 303.608 269.064 304.832 cv
263.304 304.473 li
258.624 305.121 li
257.904 305.121 li
252.288 303.969 247.824 303.465 244.44 303.608 cv
243.288 306.128 li
239.904 305.336 li
235.656 305.48 li
233.64 305.48 li
231.48 307.353 li
230.76 308.504 li
229.176 306.92 227.952 305.265 227.232 303.608 cv
221.688 306.344 li
217.8 301.952 li
209.016 305.336 li
207.144 305.625 li
205.272 305.984 li
203.112 305.984 li
195.336 306.344 li
193.608 306.705 192.528 307.641 191.664 308.864 cv
187.2 308.648 li
188.496 307.784 li
189.576 304.616 li
191.376 302.672 li
186.912 304.257 li
183.528 304.185 li
186.696 302.457 li
184.896 301.521 li
184.392 300.152 li
187.776 296.625 li
180.216 297.632 li
178.704 297.057 li
185.112 292.952 li
188.28 292.521 li
cp
0 0 0 0 cmyk
ef
0.4071 lw
1 lc
1 lj
[2.0353 2.0353 ] 0 dsh
188.28 292.521 mo
190.656 291.297 li
192.96 289.641 li
202.968 288.488 212.328 287.048 220.464 282.081 cv
222.192 281.217 li
223.704 281 li
227.088 281.72 li
229.392 281.72 li
231.48 283.088 li
235.152 285.104 li
240.192 286.761 li
244.944 287.769 li
247.464 288.272 li
253.368 290.145 li
256.248 289.784 li
266.544 292.521 li
271.944 293.024 li
276.48 295.544 li
280.512 295.544 li
273.816 301.809 li
271.728 302.601 270.216 303.608 269.064 304.832 cv
263.304 304.473 li
258.624 305.121 li
257.904 305.121 li
252.288 303.969 247.824 303.465 244.44 303.608 cv
243.288 306.128 li
239.904 305.336 li
235.656 305.48 li
233.64 305.48 li
231.48 307.353 li
230.76 308.504 li
229.176 306.92 227.952 305.265 227.232 303.608 cv
221.688 306.344 li
217.8 301.952 li
209.016 305.336 li
207.144 305.625 li
205.272 305.984 li
203.112 305.984 li
195.336 306.344 li
193.608 306.705 192.528 307.641 191.664 308.864 cv
187.2 308.648 li
188.496 307.784 li
189.576 304.616 li
191.376 302.672 li
186.912 304.257 li
183.528 304.185 li
186.696 302.457 li
184.896 301.521 li
184.392 300.152 li
187.776 296.625 li
180.216 297.632 li
178.704 297.057 li
185.112 292.952 li
188.28 292.521 li
cp
@
327.744 305.84 mo
319.176 305.984 li
312.264 305.84 li
308.16 303.608 li
304.848 305.84 li
303.264 305.121 li
298.224 308 li
294.048 306.128 li
292.68 306.128 li
291.312 306.992 li
289.44 306.849 li
283.032 309.008 li
281.232 310.232 li
272.088 311.889 li
263.304 311.744 li
270.576 308.217 li
273.96 304.832 li
276.12 304.328 li
281.232 299.072 li
286.776 293.816 li
289.152 292.16 li
292.824 292.16 li
296.712 290 li
301.608 289.641 li
308.88 289.641 li
314.064 292.16 li
316.8 292.16 li
319.32 291.512 li
323.712 291.656 li
326.736 291.801 li
330.12 290.289 li
330.984 289.641 li
333.792 291.801 li
331.992 292.017 li
327.384 298.424 li
327.744 305.84 li
cp
ef
327.744 305.84 mo
319.176 305.984 li
312.264 305.84 li
308.16 303.608 li
304.848 305.84 li
303.264 305.121 li
298.224 308 li
294.048 306.128 li
292.68 306.128 li
291.312 306.992 li
289.44 306.849 li
283.032 309.008 li
281.232 310.232 li
272.088 311.889 li
263.304 311.744 li
270.576 308.217 li
273.96 304.832 li
276.12 304.328 li
281.232 299.072 li
286.776 293.816 li
289.152 292.16 li
292.824 292.16 li
296.712 290 li
301.608 289.641 li
308.88 289.641 li
314.064 292.16 li
316.8 292.16 li
319.32 291.512 li
323.712 291.656 li
326.736 291.801 li
330.12 290.289 li
330.984 289.641 li
333.792 291.801 li
331.992 292.017 li
327.384 298.424 li
327.744 305.84 li
cp
@
2.0282 lw
0 lj
[10.1409 10.1409 ] 0 dsh
329.112 290 mo
334.008 291.008 li
0 0 0 1 cmyk
@
438.264 284.961 mo
447.768 282.008 li
452.951 281 li
457.199 279.057 li
459.144 279.057 li
463.824 278.553 li
472.752 280.064 li
478.079 281.793 li
481.968 283.088 li
488.951 287.625 li
501.119 287.984 li
491.256 285.896 li
484.416 281 li
478.079 280.353 li
476.64 279.057 li
478.728 277.904 li
481.464 276.969 li
483.623 276.465 li
488.808 275.816 li
494.136 273.368 li
495.792 273.225 li
497.52 273.368 li
501.768 275.313 li
507.6 277.761 li
511.632 279.057 li
512.64 279.561 li
516.527 279.057 li
522 281 li
525.744 282.152 li
536.76 283.592 li
542.808 285.393 li
546.983 286.688 li
555.119 285.681 li
546.552 284.24 li
538.056 281.504 li
540.504 280.353 li
544.248 279.849 li
552.384 278.408 li
555.912 277.761 li
560.304 276.753 li
564.983 275.169 li
568.079 274.16 li
570.816 273.873 li
573.264 273.225 li
588.023 272.576 li
591.912 274.665 li
598.752 275.961 li
600.336 276.104 li
599.832 280.856 li
597.888 282.297 li
599.832 282.297 li
599.832 283.305 li
595.656 282.801 li
599.039 285.393 li
596.304 288.128 li
595.296 287.984 li
594.504 289.424 li
588.527 289.424 li
587.232 290.217 li
585.72 287.625 li
582.84 288.488 li
580.752 289.424 li
578.808 292.017 li
577.008 292.377 li
575.712 289.28 li
572.976 290.217 li
570.816 291.873 li
566.136 296.408 li
563.184 296.265 li
561.455 295.112 li
559.512 295.112 li
548.64 296.553 li
546.552 296.553 li
542.808 294.753 li
539.208 296.408 li
537.768 296.408 li
533.52 296.912 li
527.399 300.008 li
525.6 295.904 li
522.504 294.969 li
521.568 295.616 li
518.616 292.377 li
512.279 295.257 li
511.344 293.313 li
506.808 296.265 li
501.407 294.465 li
499.32 295.112 li
495.432 294.969 li
491.688 292.521 li
489.6 294.608 li
488.16 295.257 li
484.271 295.761 li
482.616 294.465 li
481.176 293.457 li
478.584 295.904 li
468.863 293.457 li
459.144 293.816 li
450.504 289.784 li
444.527 289.136 li
442.584 287.625 439.488 285.393 438.264 284.961 cv
cp
0 0 0 0 cmyk
ef
0.4071 lw
1 lj
[2.0353 2.0353 ] 0 dsh
438.264 284.961 mo
447.768 282.008 li
452.951 281 li
457.199 279.057 li
459.144 279.057 li
463.824 278.553 li
472.752 280.064 li
478.079 281.793 li
481.968 283.088 li
488.951 287.625 li
501.119 287.984 li
491.256 285.896 li
484.416 281 li
478.079 280.353 li
476.64 279.057 li
478.728 277.904 li
481.464 276.969 li
483.623 276.465 li
488.808 275.816 li
494.136 273.368 li
495.792 273.225 li
497.52 273.368 li
501.768 275.313 li
507.6 277.761 li
511.632 279.057 li
512.64 279.561 li
516.527 279.057 li
522 281 li
525.744 282.152 li
536.76 283.592 li
542.808 285.393 li
546.983 286.688 li
555.119 285.681 li
546.552 284.24 li
538.056 281.504 li
540.504 280.353 li
544.248 279.849 li
552.384 278.408 li
555.912 277.761 li
560.304 276.753 li
564.983 275.169 li
568.079 274.16 li
570.816 273.873 li
573.264 273.225 li
588.023 272.576 li
591.912 274.665 li
598.752 275.961 li
600.336 276.104 li
599.832 280.856 li
597.888 282.297 li
599.832 282.297 li
599.832 283.305 li
595.656 282.801 li
599.039 285.393 li
596.304 288.128 li
595.296 287.984 li
594.504 289.424 li
588.527 289.424 li
587.232 290.217 li
585.72 287.625 li
582.84 288.488 li
580.752 289.424 li
578.808 292.017 li
577.008 292.377 li
575.712 289.28 li
572.976 290.217 li
570.816 291.873 li
566.136 296.408 li
563.184 296.265 li
561.455 295.112 li
559.512 295.112 li
548.64 296.553 li
546.552 296.553 li
542.808 294.753 li
539.208 296.408 li
537.768 296.408 li
533.52 296.912 li
527.399 300.008 li
525.6 295.904 li
522.504 294.969 li
521.568 295.616 li
518.616 292.377 li
512.279 295.257 li
511.344 293.313 li
506.808 296.265 li
501.407 294.465 li
499.32 295.112 li
495.432 294.969 li
491.688 292.521 li
489.6 294.608 li
488.16 295.257 li
484.271 295.761 li
482.616 294.465 li
481.176 293.457 li
478.584 295.904 li
468.863 293.457 li
459.144 293.816 li
450.504 289.784 li
444.527 289.136 li
442.584 287.625 439.488 285.393 438.264 284.961 cv
cp
@
445.176 282.512 mo
437.256 285.32 li
0 0 0 1 cmyk
@
601.632 276.248 mo
614.808 277.977 li
624.168 278.984 li
632.808 280.28 li
630.432 281.937 li
628.056 282.297 li
626.472 283.017 li
625.68 284.024 li
627.119 285.248 li
630.504 285.608 li
624.744 285.824 li
620.063 286.185 li
622.224 287.192 li
623.951 287.696 li
622.8 288.632 li
620.424 288.776 li
616.68 287.408 li
610.848 288.128 li
606.6 288.416 li
606.168 287.336 li
608.832 286.185 li
608.832 284.169 li
608.039 284.457 li
604.079 284.24 li
605.088 283.088 li
601.775 280.641 li
601.632 276.248 li
cp
0 0 0 0 cmyk
ef
601.632 276.248 mo
614.808 277.977 li
624.168 278.984 li
632.808 280.28 li
630.432 281.937 li
628.056 282.297 li
626.472 283.017 li
625.68 284.024 li
627.119 285.248 li
630.504 285.608 li
624.744 285.824 li
620.063 286.185 li
622.224 287.192 li
623.951 287.696 li
622.8 288.632 li
620.424 288.776 li
616.68 287.408 li
610.848 288.128 li
606.6 288.416 li
606.168 287.336 li
608.832 286.185 li
608.832 284.169 li
608.039 284.457 li
604.079 284.24 li
605.088 283.088 li
601.775 280.641 li
601.632 276.248 li
cp
@
651.6 288.416 mo
658.943 287.984 li
669.455 287.265 li
666.359 286.904 li
667.224 286.257 li
665.424 284.744 li
669.527 285.104 li
671.616 284.24 li
669.023 281.864 li
673.344 281.504 li
677.304 280.209 li
678.816 279.561 li
680.111 279.344 li
681.479 278.048 li
673.056 278.048 li
671.328 276.969 li
668.016 277.977 li
663.768 279.488 li
658.584 281.648 li
655.991 282.297 li
649.943 283.665 li
650.304 284.528 li
658.584 284.457 li
657.432 286.112 li
651.6 288.416 li
cp
ef
651.6 288.416 mo
658.943 287.984 li
669.455 287.265 li
666.359 286.904 li
667.224 286.257 li
665.424 284.744 li
669.527 285.104 li
671.616 284.24 li
669.023 281.864 li
673.344 281.504 li
677.304 280.209 li
678.816 279.561 li
680.111 279.344 li
681.479 278.048 li
673.056 278.048 li
671.328 276.969 li
668.016 277.977 li
663.768 279.488 li
658.584 281.648 li
655.991 282.297 li
649.943 283.665 li
650.304 284.528 li
658.584 284.457 li
657.432 286.112 li
651.6 288.416 li
cp
@
700.56 283.232 mo
704.88 283.952 li
711.575 283.665 li
715.464 282.944 li
719.568 282.801 li
715.607 282.225 li
710.495 281.433 li
705.816 280.497 li
702.359 279.561 li
702.575 282.873 li
700.56 283.232 li
cp
ef
700.56 283.232 mo
704.88 283.952 li
711.575 283.665 li
715.464 282.944 li
719.568 282.801 li
715.607 282.225 li
710.495 281.433 li
705.816 280.497 li
702.359 279.561 li
702.575 282.873 li
700.56 283.232 li
cp
@
412.344 290.864 mo
417.672 292.305 li
417.96 308 li
412.703 306.2 li
412.344 290.864 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
412.344 290.864 mo
417.672 292.305 li
417.96 308 li
412.703 306.2 li
412.344 290.864 li
cp
0 0 0 1 cmyk
@
479.52 316.28 mo
485.352 316.784 li
485.352 328.088 li
479.592 327.729 li
479.52 316.28 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
0.4311 lw
[2.1557 2.1557 ] 0 dsh
479.52 316.28 mo
485.352 316.784 li
485.352 328.088 li
479.592 327.729 li
479.52 316.28 li
cp
0 0 0 1 cmyk
@
491.832 317.576 mo
496.296 318.152 li
496.367 328.592 li
491.976 328.305 li
491.832 317.576 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
0.4071 lw
[2.0353 2.0353 ] 0 dsh
491.832 317.576 mo
496.296 318.152 li
496.367 328.592 li
491.976 328.305 li
491.832 317.576 li
cp
0 0 0 1 cmyk
@
501.695 318.873 mo
505.656 319.232 li
505.656 329.24 li
501.695 329.024 li
501.695 318.873 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
501.695 318.873 mo
505.656 319.232 li
505.656 329.24 li
501.695 329.024 li
501.695 318.873 li
cp
0 0 0 1 cmyk
@
517.68 321.032 mo
521.352 321.32 li
521.352 329.889 li
517.68 329.744 li
517.68 321.032 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
0.4252 lw
[2.126 2.126 ] 0 dsh
517.68 321.032 mo
521.352 321.32 li
521.352 329.889 li
517.68 329.744 li
517.68 321.032 li
cp
0 0 0 1 cmyk
@
526.176 322.185 mo
529.632 322.688 li
529.703 330.248 li
526.32 330.248 li
526.176 322.185 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
0.4071 lw
[2.0353 2.0353 ] 0 dsh
526.176 322.185 mo
529.632 322.688 li
529.703 330.248 li
526.32 330.248 li
526.176 322.185 li
cp
0 0 0 1 cmyk
@
533.304 323.192 mo
536.76 323.84 li
536.76 330.681 li
533.304 330.536 li
533.304 323.192 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
533.304 323.192 mo
536.76 323.84 li
536.76 330.681 li
533.304 330.536 li
533.304 323.192 li
cp
0 0 0 1 cmyk
@
544.824 324.776 mo
548.136 325.209 li
547.991 331.04 li
544.752 330.969 li
544.824 324.776 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
544.824 324.776 mo
548.136 325.209 li
547.991 331.04 li
544.752 330.969 li
544.824 324.776 li
cp
0 0 0 1 cmyk
@
550.943 325.712 mo
553.464 326.145 li
553.464 331.328 li
551.16 331.328 li
550.943 325.712 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
550.943 325.712 mo
553.464 326.145 li
553.464 331.328 li
551.16 331.328 li
550.943 325.712 li
cp
0 0 0 1 cmyk
@
556.271 326.36 mo
558.72 326.648 li
558.72 331.688 li
556.416 331.616 li
556.271 326.36 li
cp
1 /3 /CSD get_res sepcs
0.4 sep
ef
556.271 326.36 mo
558.72 326.648 li
558.72 331.688 li
556.416 331.616 li
556.271 326.36 li
cp
0 0 0 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 /3 /4 ]]
[/Gradient [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.2%%For: (annaliese miller) ()%%Title: (towncolor logo.eps)%%CreationDate: 4/9/10 11:31 AM%AI9_DataStream%Gb!Q;kuuiaZKQ];^Om[hbXV1h_W2"/o*g2'(iY'/fYf[`m<*m5B>7HsK3GQ+bLl^HqqUC>/82G;W33\3\dO3iqlTP<D#Giks0\@U%F=j\C<aOB/05p`"Y#*bc*]L[X8k$YG%'3SgID`ndDUI$`)nn%aQDRgS@ASDPp<mXI%Qj(T7^lT>5IW`1ja?lrH7Qa3rrm?+q5_O,%F8PERl+)9CPUgQdgUFTQF/.=S][V:R^SkS/DVUQ7Ra2NAD_H<oc>qbs/M&euWPu1r1^1#@n#UcGFoVC5co?\:)\:[Vn@FN2gfsXR%Us\ME6sq.K1</lh\(?'@6_$0lfKVOOYNBuFaHt4cU#LGrBXjKI<uP"Ng2;E!ET84GRA/[2hURY7qf6#dCIQL%+/T@Z`stNgl<"AM%CC0$QcTS@B8*d*R>b??6YW(<n+#[0(D>[h@%J<L`?"O'hIqGjE)o%it?DlXq[ThX$fb0i6?='8i]`t0oUDnL-GJsN,%6t#MCo1@B%!PpnnkrXE,GmCS!B!h[SC])_!r4NM`Fl.$.g>,8R*/DdcL/f1`hF[<g!)ETR<o3KY<dai=gut99RQXbp_DRs6\(?(B4@A#sj4\Pp%;+@<N%t:ekVtJ?=7M!S9rVVE!>g@[7Ig&BT>Q:VK@JGQt*5"15VsSODm\8Z$3%rH-,)@8[EV$bZR!H_mnj$:/O0.MLS+ij[Y<$G;%)o?2Tq^sG<+^k(2VtmCH>3;T$D`9c&LB-XW+E$m?B8`tkkDTAm87Br[?DGJ0%V/\u$ej"8inb"6=D^3cgFp&B5\5W^/9VCTiOSoF%]p$4[)u0?uQ&VC7^>3]pD-/N+1Ug.u]\C?e2gDa`Btq?![skc,1E-kl]12e(hKoApd:b[bBCicprL%;*5j<1XY6HL-esikLWU67"%&6F>B&+4m*mX+FX0*m"gH#**lK,Zk^7kf)VV9W<>0n7np5KiSN?ccaI@Of@nruHM-dKcn,(5$^Y:V9$$-QnKM\mD%QEY%[1^Ua#X%rV=#"X&FLrCu33T&G'6%`81sN):3W+&U[B(MZ7<SbC<jdg<\%397W!oa^Mm3CYh97:B'MO)D?_IX#,9Wi)d]`V:F.(NT^#91.YPG%Da!/7lCHP6VK&#Q2Hp\W+[jWW(u$^IW7Bs)*p^!=)K,#K7Q!ssT^d*:<U]"J>W.H*#OiQ)=dUM?1>/US$]IqoI>a"D,@>17N,c1&%IqSmZ"^OOo$B!5P?D#J2$\4/Q`t,`Hguk2^s)`JoH;&W9G\h[GH<b\WH@0rqkUFnXL8R@6Q(D/SX6J-*cMe^NR.OMMf^q/q\F=b8%q"/C<;kg/u:PGC??Hp<IRU0LA1T3G=s-`L]o[rXmoXOC8o_A&p^f-u*9M`X+jGYQO25A0'bD&OSZ%!NP2EVI4/j17<5!9kSPisRV%P;=`Y<9^C@KAa(L^,.t'*rBTfj3Zi7j2'd)ZU%@nSoW++_c),a8l#m<=q:g&RP,/sVY4j(kKr8;j2'd)ZU%A9B:%s?4V`:CnC6s$%jb:+`XU8#=kR]k2nsH,k$9big:qJ`J4Ucgla&=$DoPB2PP4B`eQ#l;A''1SdeDgh552h@^l9E.\SB__(USt/bWd*mWj+JITGmK[V%*2<[4q[.5!V\FI"Tr4VI<It,8WMtri-AERf_Z*<k+_8f:P$p`l4H=Xd'f:/W5_rUG<ioA:j]\Xl;=eR0c)j!V1_uao!JAb![;**Q%WKsT]l:0=-H<%H>!,>Y%#R1]?X4/WL8u5FgPU[Ue^Z+?)DT)YSZ[c?jR%dWaQ)j"=\QgbP2p-U&/%]?tYg``K1&r:tWE-$b.]%0b%<8&br-*QBqS<==<@KK!a,qZT'gSf!h2Tcu8NK"Bs_qT,h*5He,.+A6!COXO3qA$d3Qi%<MpH@F,*M<cJW7ZWCdCboLodX;$.sW)*%ms-q>oc,(r$]*VhA^oM(>BMH6fe'`RY4$\>lT.:?(,,jn<aBc]:=Z='AZ+U*354E5/nj<(d'j=Se/^+G<)s0[.g#rm!'torSdpj_%"iP0V6>8^=<?Uohd/=/f!=sF,"#Oiqa"RMl1uK`]i%ASK2B0GX]Gtl7#>!_R5%O_sC;@li^t-ZDi\l>GH,'D#=AK;?g]2HC!*uUT%9kD,J%DY@B:t5S7[K+P]TEA;3=@aPYJ2YaoJ-7:M!>:-i!P*<V8lg"F^2R<AJ@nF^&Y[96ir_K^%m\a]c2L#.RnG\<_>9hI9&&%!%6d)<`PbLJ[Ae:M&<-0$ed:j,=XC7]jnq[%d-c?jBiBL6_4j0%I.89ObUl%p1_]lYL'%>_\QB%KI7XWl3VJ?i<onZt@L`9BOe`k#n%/E0QFNb&"k8b<@IE>%16M/A`8[7;DZKel?_)TcH@,d:!`f->!6+qY4"2+M];+DGSS%/!G/P-D$NLt%!A9qZ2>X_j_N+)&=j1g^:;%YCT*jJJX]h'5ZS9Y3Y2";/?6M-j/M.\ht%?3\V3\R#2?s`Uu@O1`O5Mb.r;&?B(U''n\b#OQq@j$`JB%WWUmOqK(>^@tL>rI7<9+%M,.&*8JSLE@Q668*)7"lLf;5`i\Y)<3T,!:P2A=Ff-$p2U06NhETSs!G^PrD!s!oQJH0(#5\MD_;*QjX";-:n6A<5Z+bR!bkTG6a%63ne?,nN\3%l*elqgmU\0[kl.9,pDWaG436if1fM@bqRT*ARPL3+Y8G"/!7mO&PM>k=.D>[*rdih4d.)bIO$V0QZMtcb48'q5+&d%9-_35><6K4]Rl]mX(_<]SAotO:[m+Y:ACB'El.^LjY-Xb5JFod^S0l[]TqBt?[pPq%o@RtS4!%rj[3pB=X0PZq'G5?r_EWL)$Rns%36/r5Es#*V)T:T?0$1GT6gEh1r-a@p\TElZ'`BQ6kN9_/dNq6D1[4e4mfl=^d!*WF"5KU/085IOcS+*C)ZE_/S\jQF-+O3]eAEE]%/jNX[WkKdV$LbfA?":(*9omQs+'o?b71'\Hk@56Ug.K%[#NAu$Ifm":?d3pcQ?q_dfY:-.^NA805NcZclOON45VL1mQ:gO&'YW#.%:TR)'7GZR=02ekMh!D<j'3N<'2Y9-'nCfG!17OWc\">a`j:bYfg\Hi<?9<XAn+IZjk5R7^9u>]VYP$L:-f8dT]KHq>bCNK2=JOa;%h6lR>L\s<HQ.c&&lb1;*oBdhG3/it9S@+g[m0@##*V;t@f=IQ?E$E>:Si^JVcbiMQgZ[a]J$;D/0)'P`iU^.W_K>eMo%\iKMpO_e%H2#m*E-NpNF?4OSpO@5t@q]5KFoU*AIcrUJbRG&'nJ6WHrd!V@RJGM#hYpODF?]er"b>.'J(:1K6sVA4-Icg&Gk7&>6\#%fKhe])%C1I=gF8Ps9nW3o0U?7gSo=ab,CXSfNSmcMe*'dtlS-I;8XZ`QC*t]-3.O6do^KJ<uDIc'2JZJX^M9qUhb"V)&ofnD_35'[m/H3t9%Z@<r;/pHW[$DX<q,aK/cs6Xn/A,.brb5VuOgAUjAJ$Cj0&!K<R\U"4iSJQXM$c]Yo#j"3`Y(&APHB230Qrj43Z=$>sMON\=K4af/%B`<>%_D>`Is6RC/9\4f?r@8O5rhjBR"4IIuk+=32q<'t+)e!e7:#iD4"-m9'n[$8FJ$R:us-s#inP=Q$V#AlTDc"C2IpDu*Pkn/d%iMFr&5CbdOl8\\Ra78,>4!V%=QVoj'2:;*0GaE>lgDC*]^Vc-b$G@X6fp\R<FJ8%Y\rY8I6Z*[YEK]&R;[_s=p003MMa_>f<V$.m%N?>h+?D0]3o7l8Ol#l9nmV<i9HN+M_gO.(dV/OG[D:;7%roA3hk?HN;^H)h/E4Gl0-.b#=Ad;?WVV-t`i<Kinf$m%p5u+H*?]Ftt%j'TKIoqC'>h_h$q]mo+CnL",r?+]d\YIFA37fKXj.[EhH>g*/3^9C\d:&D+`k7ug6S7CfPdY7NdLR*;WYJtu$`d_'>Y.*irrHk56%!0*S>X[^#0;b8(VrH%QF+G3_=^Ap%(!0+SCg@"YqmAG\<@KB3lgRX,>"(T*G`5s\"[sOh#@1oL[SfhcHX/G6="+X=8.);':N;U](%Cu[o(R?gf&k\9NoBcp'"N*6#5^+07K+[:d'UhI/;5R\dQ?]FQ^U=HhNc.>$Zg8EWR:-/o86FVN@;n]r!^USLYV1",M?[8/>*uru3%PJQJG>O;DDo?A%Z7_@ChZV5<B.pcWK,/s0.[qK>@^bSEq@hf#M4#1irpQj)B+d>qm#]X9R>AT[(g`9nJ&Pa5'Y3_oh`!hT]`/f]d%6pDRu!f!fp@DF??"/3JI/=*?@@b!49McCi7>3r<+i-GWF]tSZIb\`S<0j*Uim3-JPY=i@J>#2EA'E^!l9/UNt.ZL&SZ\SJ75P[pL%q%o2tFN5X&I@sDMEF%?i7Zq"J*Cq/pW"KD[51oM4+k$^VXhV^8:@SM%:)d<uU"Jf2.]*]IfD/&OBCWC@p\!^(BPV"h^J[NrQ!U*O%s%13E<p.3I9`liol%,oP3aF:;rd&i>G&`:X5TNZ3)\3&9giqJUa[?'\l4kD46VA%rVu(WbAnB!Te1Ek:[!5?>U2KM(M56OpghsCI%p][,K?YT-"JhV$6BO`BccEiPjUu(Ft-]r`2a#Zc#7_f%7CS=5GC363Z:p'Dof4%9VMLtrZ5ohA!i)$-GHJ]c?Tpmf[WpoMD.R-fZ%(d:_Ci6F[p_"$!ecbpBnG.lE=gWo>X$e606L$r@_`\DO84=TDG)L!=F5V7<'hoqTq*$!hZk5R3b7g.)LG1o0MK!^L3Y!=:I1g;D>%N3)HMfmB]nNZC!f@bDf1/MQo?m_O+rCJ(_m%[6qf38GilddEbZXUc6K<;['$pXnp3%l\MAC68k#[["XV@>rP*f>1^\f1Y)(`217?%#%mRj$*+nI,CBe51<VV\BYA"REn-mma3m%M"bD`':KWLo%ipr'-Kr8JWcaQiT0Y"IXiJ&"VjdbCJH**.rWMB\Z^84CYPjp#DC;5&%%'%QWB3\)%XSu,d4E\Q:c;7Z(3^[1ae/<#%UJ?u%&'qGMTC#Ytl&oS'6%70T?Xf*XNF#__"Mm#/DVU)S(K.3lCAuAmLen.-51JmS%IcK`KdsHU1#Z5NA&7om7gF:rrEmM[sRG6a#je!4p<N4X=4Z6gVOV1'L-3q>ZDNM7;ZBb94l1U^&nkUf>p64>qI`C[YnheNKY7E&C%Sm.TfopUkQi[9[ratIiiaZaEJ3k.MIK5+$,[!aI<VF$ZQSS0+M\e25AZ?(PJ]8\W_`@RQN[9/"Zd-*B;[0CS`o!=F"k'm)V'btj9%[9gPi1l=8"bD)t!GZtC)]CDBmgH;Re=>kB"rHF0R'gunQB@*R<JCX$D>65+d<]EO;gk>dtR0t74b#ej#5!,E;X``>N)kGjCmESX%%6(3%q.R)[(\(^S;n7<g^$3Q(k4ZP>+ns,QrXTqap[N@aXC]8,W?==[jb*EmbAuGW(0EO:l@H4Nhf=PY0.nMY8ilUQ?O(18>h73h6%)[c//CdHi:Cd0k48NdcpT`]Ii"qm9>_sPBfB@niY0^Di-FK@ouh6ij$/Zl;1.bF__riY*f7iDd?1C">Zp^r4$>'Gd^$>CTqeUq^q%[/L[R-.Hc]573T?FCD7EKH/1!d]"n:#,C7G#-'We&p0W:AX%b#TPUHV#s0.D[l@+4W"VBW%V0f"`8,kH$q._*h8,('+R=(HQ#1_&%)_'c&BSY*94j_bUeW'SCkVBrjE&e-T"/QkVWcFhgZ7!PbKZ;;W]&-JI*L:>"eMIstNuPiQL=uL+K'7GGaZfh'RlPm"W9<^3!mleq%>Y3.`q;EUp^E4DsI(0(k2Hat[Q*n^Yal_np/EVfeQ($J_0':Kke0Or#2tg&E/cQ0j/._*S_:FsaB$L:S2d<f$UNEl)LX+tY/HBCs%f>]0*)u1gt"P*+iom^q)])MO5m";S.mb@[b%WAsZ+Y>9ZL@s,Lom28<[=8D:2nSmpee@0_'sdoTR_J5I?df`T;>IR$j%FI.L+o].%+2G;ejP"I.S[nLZ+,[BdZ(mMl4/?VqBTEb>K1@8tnl"X4E+:j>RO>dpl_31WB$Dai"UJ0?RrN/kk%a%X'!!^2BM'qX4H&f`X#pYO%:cJ&GV(MhNhJ8WF^:i=0lHSK#W"P4tJ`I]m]h[<25%lZd+F%A/Vs7k_K$-ipIbJMM+<.p0YcebCTB>>EPD8?Wb,WBj'?X_e,QuD'%F98$$U2bs$9k=nofYt(X7Q"jkY#U5TIRaX1QI%fO[*%sQGh6S!#.]lTCc*1[b@8BV=Re"6j&\n#38HPCDf9uGV1I[F<p*QO+7B'\%q;%4B1qtt.^\6;9nMeA^I'd_4(J"$THL]*^47/:_5Q/j)XUiH&ou^(tC/qu*k#[S6a,*r?CLpspC&0ejR$_6/qE-LEs4*`DG\k6t%+$YYso5Df"'+9/RQ&.qHcd7tYY%FVZH_NWLA9En"*Xo4BA??mM=>`aCkrE+AQ`m"tJ(33?KrI3<Dmc_%7QFQ6FB2K22ATWn^T?o!%h,SCZo0oq8rbA!*4#^NSb1G@tBl.Ekj^+S6E*KskF6[GQ]Jt*DrTuX;dq'1BR_/P55ch0;DR\*je3/L\(:LUsl\%tW(g5Ikp!/Qc%mAH$!_ag8D4p[VEI+,[!Tl'78IW]_k,>F]ZV=ISjl?\qcpZL"DpiH$E^:pV#42'm+gUfJ'mr[%WDD,pX0?/23I;46j=,:r;FQt],%2@K&GI\)qkFS.sJ^=,IJ`gS`MkCQHMKqR2goYTHo6DsP;9RZc;)W.N:FfEou\\6Wj-Yj5fXt\rYcgJiu<NDZs<"_674qnK&2E$^Z%rLn(Wpj*]t$?K(Uh-=3WhS(LH`WGqtGMV5K*_oL$^h\Da4[2c@J;\X%n=!Ya-@[hclsmN2rMs,7[T<+Eo?aJemR*i>T50:Sg<U"f%]qEgSP?GBfcM*BRo7TkSpJ,MX0k3<4DL=7(3o'jn[BHdfnT4Xk3RaOB5Bc$ImC`DE$aVX)fAGRKeS9PU2<Ya#$*WXDaa*&JI&GQG%2m)djlSs'bPI9hV_UHs/8R/1(K!r5Z[\#6TkJME%fD7eM9IH,eh:KOnlu]B@]LTB?20XIX%m"i?F+rg_GMU[^n+:@7-ISl7ZMSah%3j%7$eNu(j\utF,=7*LmF+s&Cet9,Bo\mlbDPNcjc#oJ3SZY35Q8]F;]q3bLQ5a,p'QGZ*i17iVSVP3O0=K>ngU0h6SaPBOI4<-X%MO`S8/o0Y!QX24n-[.efSc$'Gn7"IBhppJ<SXs[ND*Cmr\O+MFGI6sCF$65G[Ft0?(I'fe42"b.Ru?SHGVXGhHb7\;8-&.=V0tEb%SW3)[s5;MtbKB"YfM93SMFZ/Fb*W+<^)YFJ]M.UtVVN<lq&J;V_>8!2HD=])F:,]X\(0Ao:',sZXbhsaD3oBKTBpELM.Wm]G&_A-%Vt5=)F7A/;m.[uU>G0,oO"6db>^ss<:[q2Pr4.WZq5E]JgXN2W]fNJ7m^1X2rqc0d4'`7UKjH`kfI]kRHuNiIl$Bh"(#H<Gf'1m^%FWghCM2g6*2!ad<Du!$3]X)8BT=.e75VLLO;ElZodhgirO2%C;g0:r5:319<GIi0$%*s%]XAnuiR6!4Wc?=E2;s]4_ottq(^:QSI%::37cn,"1S07-4Dd&GF5SN@d7Xg@hTq)SFkaTJ,^FgcYg-2.:AIH%TAI5BbRGWWU=f=Qe[inhNZe.sA<V5Xg9NT2]sG:gk;:$MGe%%rEZ&*aaULMgO4D\-Lp"m)WDAqHLY)VltPlj1jIM33dpO;*@Nrg\\@arT-C*rp>a>/Q^SqT=<\jhE/4Dl`4sQ$#b$:*\P(fMm736%rNEeoUrG_0`-/O;\X&0PDk2r%p$:mX_V<BmkN1#+l]JXh@_8JIMlBIXPjn@s_JRsd]nq6N[o*%912G1T^YM*YM>Xu4>FeQ7J,/u\%ln0.^DdWLN(S;UPr7e8jLX'mfOaS/NZ#=^8'"e%U^AW+*pgMD$qPCGP\_u&%+P+'XYOs4Q)Y%27e@n(@s5'?+I9X3@H8qObfO'P`%gZbfp*p!akqU*Lq^+]2p2bMg08#7#LgW+t.)n.KVM/Uk.fXGc`Q=o=eT-o*7gHLG0qj#jFoo$A,nFc)4m,qGan\#R!>4oA%IM;J(%[XK3^V.o)3R:`I10ep0/8Y9+`*+)AjS::dUo(M$a@ci"1%=^H-qm/Di\8r%hd,gJ75$M<,5J_#.eu?EWkG:>F2%A^3jVo(!A0q3P%/A(kbe6KPR"V#CU$KfW3Qu@-pNTl_G7;hHc[8dgOqS>Sns5eqP4*OWD:TE2O]<u6hOuo59I:#\7<3):SK7m!j%q$]kbYP]6\"QR#%^8H(a3FO:Z]"-M)P+A&?>q"NT>9Ei(D`=E>c0$d2^T!c--W;L>O4KAW:*2ZKr"*rW]mP,igCLlT!#W!.283#Tl70?nakAC"7$Z_K%a`^5='Wam1*U](OXXA:LgA%PRS2aTu8.n!QIH2pc]F.$'9Y1SVFo,ZZ<V6OB25kluNA&6LgI%ia#9Oirg/"Y-H*B&dTjHpLp8O^(%$_4QaQ9W*b77\6/?C7-6[Cc;Eqr,">l@7Ok(]dc2nXBd(!9:`rraSZ$gc+:96G(ZL3*,;.n0>0Xl0C)HGQ##S"'ofJ^<Sj27_M:<%I;.rN;(:Fa&$ghuLms<LHXJtf'n*7W]7uSEejR=I<`c=*jTfbE5i:^a/>_pra$6:*T<@fl^lYrWG+h/c&/dfh"s;NLS3^_8p!2>j%!3!\]oB[%fr.pO%D3"H;H:]/W2_q>QOHu=WQ5A`iK.$9B:b)RH5\71=ju.D?"p:EF*31uCbl$&aS_^gOjU18]kst]X'"<J/qO)-^%VgF'IDde^e$edt(A,S3:d=.NW#?LQkgH92d>_W;\8n7&+aIXnm5kb7\g<]"JQWZ$n^af^G'slV?I;4(D.**dPI4;tmOWf5+9o"'J%%9O4nF1'APZC^>Uq,QfIc9BHuEeT(Fn\(r(^NDJH'4s?,2g7H+V(@o^X#C9seF=)g?bdc8Wme?dG#boBGN.7u10)UH:<f=*['MjD%eA>+BJbnNH?r2>`1mBg.X\lhr$YH6p=D1aA+)+dGD"MK$2(U'Y9IPJ0<,X8*&;QBY(rC?rEEN,Uf%&;^>2?je6XZ&UjS&];kOQjK%,Un-eO_-nqjS>%[b/NZTNQ!g[<#>,AY21&`.,EE$GQ23H]6(%t9WluXV1c6]W%P:rI'*$A4BgO.PB"d&RSnArnH\6/jM[(pNV__-%Sqn=YO6ub.aLDM>QiA=ibkP\4^A;3r-b3'BM:'279+orO>(,sJ,>/)FT64%WD-#5oM>Gl`F=fd4%FQ+]\G39Gk,O;@aq]Y9h^@l0%GjQrOp0mH7'C!<Lq(3$qP!>?Y.tdA&;!FXf`t(a/>3E8bFTiFY3mM8Shkj=prm1u^;X(Kj?Uou';df/ENBKteX6JZe's]_UaR2S<%=(kC")G@sCi?oLVF^or(R+%'$YqSZe)IhL.`=^?C?!]+;%G*0WQ0RkmEA1GaoAb(AWrk>:U<ppOZ!U^ll?08VVdRR2$<pA#Hj$JI%[:O`4/+!aR.'qabrfuiP'a!$,972!JA2jAc2I*`XK?iW<93*u<_H^-R!E2O`QOM'%B&Z5`_DJ+ATa]o^=U#Mh/`-_q6"DVQ,&Cf:%Uh4+*<9`u))U9[B>FO!Z*Ju$9YtUYJa/Wp%VU?EdK*8*l2V[3H*.iSa&."Y3PDMZL'o!XV3uNRe0nn\;Di]_U_#-A+C[WXrDf,;`%0-0,aN'OT=!aQt559luGX1gdX>PCu:%oNEo?7G:H-=>2LSOka8mqqHi5'`Co5BDHYYgU]eie_7X[uq;)p'AH[<E[>&Q!T-ZOcSa6%hD/3hK=sobU'.(K+\D8OJ=\lg5+4n<^!B&T:+`69@$"6U_'St)d,,!R&+:ir->'Qp2j!XO$_]5%@eh&4NL);%U\f.q.jXm8Z;0W,%>6Z0TDLe)!SFZ\^=TO]l(@("i1Q2hia^5.s8b1Jd0j3J)+\tI-Q,_0]/Z_S56riJ*n8j9lau!IXjeE@TKUpK1fQ`SRU]tPM+kXKr%KZ0T%[`*t6KZckqTU24J%"&;O0-<p8>IIo7?>m3]G#g:Q9IQ6fkrTKNpFZ[>\c]W6jPB\5PO:!Goo$Ba>o'-o%O[%-0$EmlYc+%^%R1I>V^oT.adciBTlGAns9R,Xs$$<m77crL8/"5!qKoIZqTbiGnl2F_"9H06EQ\gd*^Q"&MZt_$6:YFbIgeQL`*+Cb@SiF,61'LQ+%2c63\_NTahB1TS2f_[C_Km*fX&u))u6'B;:Xf+gJA`MKQTRGmW^j3EL"im(=l'&d#Q_[#SSn8,%U4253EV?s(BQGmJm;.$-QK01i%g)'o^lTRa]X0ZU20o[Jtq?U5lE<cdh1Ifu\b$ZE`9TDaBB5npY*OL;S4@b>$>u3VXF0r:Dm(H:Y[u"=%lWU'-[RB>C9D!$@KGNp<%Q=rR>[LV>?'WG=-ThL(>]K-i8lH1%?O<NcOniY<]cFtS8b8J?2V$DH/2@GKR_dnVt'A;a&lgW:4;.BMbrQ!%q7TN>>jBt.jLDe`>%<08,71b]`ncH%.?e4QehfY@#AYao=I8Q<fAG8$p[+h`>=Z>bBl0#H'+@MJc)KVUPV8/@4tnY(Xo5_)Ei2HUka@p.$r6s1A4/>081%I4f)5TuPUG;X@k;QWC1%],3uO&%08ciCHl5,#5n6CF*%!fM3c-QnAaMLT+);)5Ba?Lb-K+n:a+Cnm;0%?euNXKX8FPPD+Rh<.h*#%0T8D*!64[pd2WUHP,L.l@tDY:!0&adVCQmH1mWt@1MFAHPWd*gONM@V&8N#dXsE%nM&+KM7QO?"4U"_Ks&f$[,([oJ%]>3p.@s'J%->+I)LgV^PLo%.?Z'=HJ:)$BGh%V(c+`]0fhS4rfdO0T$"*&l<?FkMV[uI\J]To1i5>fh&XNOGP2qV4c1D14O=;HC,d`t+&,nZ>.%iO>eG-)_[Bi_iD</RS]NW,eD1atTbN[r;[o8VtZ>5_6efK#2$o;pT'D3M(7=(*7st?tS3^`1j_c)j`jW.uYj2/j4ii04X4:3HXL'%FNf%O4bkXQK.\`[E0qWVoF/<M[c%%(kgD9NEeX&Ed%tC%7C!*SSO8a86'j*\-\j<;K8uZf`fNQS?B;Ca`fNQSSjB9#iC:q_9@'9k%qUj^G\o9oTEe`7_S@4t,".u(i[/O^:+XMD[%mP4A"`CO!c"+n^;RF.M,ARfS%YtD8mcam7*=``UT"N*f31V%'2AD\XZY]I_c/pc.%K?\%JU4i:9;AraVH%)R*%aLTf5/6)"HH?TfaC``U+XLbb%WI&s%&lI&%_\W)-I$,^2-1.m=bgI5L.e0X+r#^XISql@pZd"sk#gt`%CbjCW;bL-HA^nu?A@HM'jD^,F+^[_3(lMq6phcM!Pr(2Jm9QD.@;ZC%8_M]q:"+Z*#W=!8)492$ZE\?S(>,^XoAL^Z>/VbKaaD=R%Zg*a@kogOod@1N7@G&&^[DX?>Ti+R0*adJ4`kf*3/T*4GdDquaZb_[>q0k9E_e*-TdJJ*gT"O.&rjXL5MH*3k"2!utWtWD3nYI=5%O?(VS@5BXT=H0iuS6!b2BreqT0*t!<;5N;8n1^g%(jNT5RF]]V)AE9<6lo\crN(P\6fdbHb_\n\L/8@5DsX8W*m=t75*@^#L1r1i%<CVYoblFeU.#90fKa^+9cI(JVZ*<9?mIUQCoiA[:II*L/`36:o$&kD('E+4Gq/T>MOjlY3E"XrK:NcA@!-S%eVD8uC\Lba,T5-C)%fLn1K_C/\aIN50j9Z)aq>#afF=QosUW2Xh+>bV.fO^sq/3Q5hhm10CkneP^<m1Y&ES?"=L*,1kb<r.q+o!FTsHDL)5HWLXAOkYMo%@Tg]IC9EW=oP"cp[cfN4KVk!&+;_q<Ou&il<o@9[(_!C*eSQK&Ys^SEB!RS8HCEZ3DSVpN_C<'S'1N"b@@%9(#%be#%OmR%N9P.G%H"9g-A.C!+dPC0pH"7+JVe8PX9,UY"m#Et%9/kjm0rOs$!B+4!O3F',1HBcGg6W3h)7ddH^he8k15\RKI+Nn_1HkTa@QZD3F@Z$]%[,F/'1"h0XTD&NqX)$7POnufi]O<oX$%@=+bb.N(N6+'[)^c:GB8_pTJ*T`a?Tsnq*&jHX=ao0E7o&'tR@YHSON#RS?FZQr3-AnL%EKRS9M4>k$D.Rnc+M!;UH/6RV\hGgd//#OUPV"jCYAUjP`n1RISZM@-l$7E&N(_D0*ZQ:ha`Y^\<2l7T/Q<7,r\,?!>DKMPoS>%F%k]-dOpDc[e*/fRii"dCp+7;;TNt%]l(EWfDmX2O,,#gA]_[VDu*E,-An`5f]E)8`'m"qBlnU^/RLPnVhM=&(Jk/50.4,T#W3?Klk%.03r"LJubm%I"gQ5$X$uQE[KDSs8tecpdNEC?Z"g3@6M%`,N#"R3a2c01t5P[!su[H9F$WN002(gI[;3cFh&Qm6lor@7DL70kt@N%*.-7/^YKkO"$`0JSY\BcU@HO!p/B'eAh+Bjf[:FQ6:<5?s,#(o)G<QL5qb1.68'6=:SsWb5*e`oeXNU`Um"9TEIdd#aRJJ;/>iMI%4)&5mc$H407Nb(+'d1@*camQP,k%YOT;IkjArVe(O-gf,)OfAZheA'0_tf*!$d/aSdV/onP*(&FNf;JW5@_o.KuV-!Oa?V3$lQ&@%Ucj`seGA7_6@(081/ag:Onbf:0:(j%Ob'9a24oWJ8BlSlZt^5oa7U$qU`>gaClf7#W3\Umcpri61BSC:RpV)O_BncXZ)5C34uP*h%-ToLpUr"F[bBQtE7e0bq:5'Y4Y'b.;>iZ<fgWmP['e\(<0_SJU,l^t9q[DOu(01u,5<1%[.3'HbgkkMtII(]b#HD4LR;a7GT08RX%JW,SB%jE)]LUl`*%iHF+F!7'5?7mjAg;6Df?,/#+4s-?L98;NiaH//dK]4#3&J*Y!FMr'VMa_9PqU#J7ma(3kDWP[$r+(5T=5'd"%^9?=pS5u6R>bPD+qJoI/d.hWZ=dqW9?"s>+GMosT6`<"NY$Ko6*fT@6aU6K'aka#mPL!a%h=fIM>V&S$Tq+T6m.TE9l;2V1Ki5]e%Qcmu^8]bk:M-4J91S:8%@7Spa-ZnX$^e;)M,pg/4aKU"KP<6a![1bX@9=96qj^QJh1[H=-DMPZoF;dmTUT:8'VpT$6]HHf+.DsH"%:!'W/XOW5cSSGR'c\DgtidH1XCVTEb.G=)H/_P!`8a^]lkel#Fe%Y_S$4"hhH;^Z].H'%>3D\uUpfOqM<XZ+r'K`Nar5NZ]H^e5B%b#H\<CQWq%?D9<b+*5UE)-WP;DYL/^k_(s'=]%UEY`bkn"DTqKk'g^ZD,c,kYhHGB4ebQ'!2jY44Y)Xn2+G.K/,^md^6kt^6'V\n%PGZBG8F(D72p'%p,8Y^(b"+J5%I&T447qmqfoYT+5oXd'GW;iZob+e9EID?.6nWJ.$2;/FN7Aq.Uk*_!A-R@7:s.-fC@Ao%/j$bR%#G%2'([daZ!kL[hhVkg*hWoq7/t4K=%LB^dj3"6WbGC+]+(gaR\i?<i%)%Ue9c'-h2aZZe&DPioOnS7hVMfsNRThqPCq@-R#+cA]%F>dEp;4gQ,&!K^([nid?at[JV`T>N:G"0K59c)u*$(hSaNbl9d?[H1oN[pSOjd`A+B%+`\dY21$a,s(4-a[U\a-o^=2l,ZZ`hR1q%`N<LM0U-mP+e(*%rF2Oq7`qUoDee4$_XGRC9@b]8R8#US`87%ZfA@:6V)IaX](\O-\88`9$S+10Cq@+\.(=N(flV3CjMmcc(UmVs%(BZmB2I0Q??.=0@4e"&VI4W#e16-1^\6QVDHl5):/e/_lgTnh^9p[#eCCJm<EOg0?p[O5\!3XRG3b/4[mMGaX5fLg3+>sg_Hd(:c%fb0o4EsnjNN;L?#\07\`([nr=/lfO)#,d#2gP1eh67J?N^7@QpaG'b]?BChAR.VF`W;[rO@Ki0;QQ$:(ieGCG416s+dq=A5>TcHR%LIm%q,:iGA1:b7;;9[ngbEoG(L^CC_n]WF[/GZ$P+`c/nYIP%5F-THG+9%_@A.J2W_u=W+C[P(U\[!O0ANCJe4[,9@F>r34^:XKb%7SRdBE6VZ(O5cMbYPUo`.&L6kQR,_4S9E/JaF,!S%QMidA?MKJIu'Tc;!2)smYiaD@Vtoh;tB84&1*^to$#1c4Kgi7@PIjIAaF)X%,2Ie8$3oPR%Zfcp6R(@%f\]r2%)_-KNiZAt#T.2*6"E'6Y.lA3B=VH/G[u:fdG[`mTSl#R.VZX&e('?E\54=e%<XG?BW.,77RN_W%N.r5^fR3IWQ1tPo50f2$'gf#J*XA8e%+if%6sdr,U39#&5\_U^]9>"(#=ir7@tPG1;f6!(-J$<aMA=9ZppcJ>V6cd$LlI[H6YUee%3^5N7A;UdsA60s'IlHL6TZhB4CPiaUg=g@"Jf;e+QS]/U`"QXZc\>?R;f9_sgC8lc/'!s\H/;:iA/L'p]2+hI)B,.Aph=VFFe[Z@%9(BN:X/VZKni7BOZ0FEFpq="khNKq[76D.`8P`k6EebHRYIVA8L?Uo)1K-&liCGo_"o4GRGMKli%/XqPHiLe0_q]3tU5dVBGN6bl%XNZaiVRurjPPM)gZ/d2Wh/PCGXC@7am`S8GEm`sp2r"kPmrb>]LGej]]<%p!A!"i8'"`Cu7^D]U4gDFZGrm,b2O?S3[Q\sQlS?Oh%KSD6(a,jDMo-Z0&IFrVD=?FEHZf98dJ9Jqo=Gs;;5c8^.CiDJXkJF3l29M>KM.oX"6fket;"SOJ=7jQ"@LO,\NpP@qmX7_l==0gJ%A4U1@m6kcmYS8%D`mg=eQHa5Ieg8^_^Do6N9;0MO9Q',H8PHUaM!b1j]+Pc?ZR.EK4,*PL(I7UTR5#5K(p]+M@b*B59T!8h\/8'O%Z'TKNJ1Sg@(g\L<L(nhdClW;qnhK[1L=e<Jfa7&&).<WkU9$F7$t@UG)W0dE`hm49POHn-qVjF<DD%aA/NETLO*=kBH'tt0#BR8Q%e.\]'=jLeBXo\319=<Nn\Gemb=ejd:XQ]nSU3F32?KDNZYI1F[b1CB@I:LG\rDG6_n&sh@dLM"OT"GEH;g8c_O*d3;pTU4%5$u@l%_rV5mS9CHDdG<4@To)I9I(8uJpBO8]GkU0&iU]HAjiQJ7XlS9PmUY]n.BugRG$6qalSM[NpTUW"@aRr#Ug8&NkUW3YZc"o\jnZ(=%]80d8B3d^hIS.][S"*&D:$]Ijcsr:/!+H)hc_"O.46If%G`gbR_DAl#bPZ]A69a%8mU,k`1pPMj]8ajdUeVkKSVhdO]`"VK6i_#Q%rTh^]:;*dVjb;)WO/PuG,(C``j9)(4GS9.Zhs/86qik3Da'+D8Dg!qEB[%U(H<a/33\a7)+Pb]*F5PeLWIEk"3,+]p2EB)YQ]'X.%p9C/GIOn2O?WY,A$:Y418TIGOT<(Ch)%\6L)CcFJ.Bs3TfU,"+Xt,?[<FHtc##E\+F>O+P_pZN[b]6u,0!m)S!A&QfjSQ:3#"<4r%37pq"e;b[7HXhCP_h;h9)H%D0A*>3pd'H5VOZtiX'en<:4=%V9`+c?[naslAL=oS3h7%ZX[@l<A)5#$9NEpt9B&10pn\NYaEFV!d%Y)98EVJN'seM6F]^sm6kpQ'a+NoAb_=S'$SlQOT^I]$g=)EV+Ca!%gW".1rQCnT=1N?q)/AatgMJk#0eFu4!C5.R.HkH#Zcc?L:p%NL[g*SC&3Z98o9K]*VWCY6tAH0DViQ30tXO/F?UY3Z0+U5d39De:jhbP%]\:Co.KYi=a8FhV^Io1+/65O.LD(XR=Fq<eHXGO>g2K%WB^DoHDQaKc9VYO>TH^LSC.\BJ73mKS&uU/k:/J,E2<.7j]P9\S1fm3):"-P\N`u%9,Y_acE9lUCuFEi_a&%rrBAm^BoE^7ju=Mr%,rX>@0&3WN#5%JX/AS>IJC02@G9huU0KmCS)G*X39KUOa",O#Xr[bkKqBb5'.M8]La9#&]iTT#4HY4+%"B?'dbl0TSU_Og07Qgs\%pLXG\Q6[a]YV4$H&KIS$W2J:hn&PQ(*`CWl'%sI!j6<%57!fjK;SJiBA:+'II,Whcr`tl]`H`3<Ijs:5)qi5N.3GmYVoJn;`(To>%-ZQX8nD8.6?^qpMr0QuNhN'e-9DPmM?TH!"Hm,Zp%VjV,8Josn=f0^,KNnDpEAeNflSk,'Y-FN,2;5`miMf6ZS)+`o)gebq\lU:,%a6Ht)qF.VDEi\)Ec\@>6l^.#S9!lNl][nfFL%qd!8S:C"H`pd'9HO"9^\#SY`H*ob]m^hS\]/Tl+3W_;Ep$'j1?,urku6o_^[cgI%qPE*7pT>H#@d`n^T29oglL=QE`@b*cWTNZZf.T;H/E&/D0QaUt+!i6U.9bV"p\L]o3ni[5_nCN`\,$PZ!`e6nId*_I659(=p\Mit%9a/$&NI2i*(inK>hs6Wc$Ea:Eme'61:f/FJ8%R;*4`NA,,P>@:qSdBOLg0g%[kk\o?GHIn3;$<:&Z>9hoFubX?TL!d7:b"sn+DUp%Vi`G3Z][emf.T;F3h2?/rd4T1q-/9VqXpD#p!.p_dK(b6A/k2J^JnAu6VJQA]mf4X_aE5"2o7!biVWC>c[1J_eSk5!Nqdu"d^P$r%UMYduf.UEnB0#FUhs6VXX5A0-dK[['j9jqXf.VQe3>t?UhL#4LDtP(.5/&1l1t(gP)u20.H)oh)mc,7"94p5tU&SH6@BSUJE1#&@%p$58Z#i4bn1PSB3f2&,Bm&ba*a\!LYbt5jY+n,(s;fcjUJA"15Hi:sHpH&(U^MJ2!UYb;a>KM+KqYT^R)_U8&k$Ggs-c=,3rBg6'%X1Ltkk<,TslBcP6fhhG>-1EXl#4tKlGM_YP*pD,:;gRW?IS&dDef]c[cZr]ca[VO?hs34k?2<?(rBcIDmoI2#U'K4qrR*DEQdNo:%k[)#G`DGtJNd.a7H9uEjO[m%80E"qd(k(aVp\L^85tm%Oa1Zq)FdUSEoa@s6oN&`Vm+NWNoh-)2"0smBhs6U]*4Vl!>F!/knZZf*%%%54kreQWV\PhRSs0T`*^>dkC?-G]W:(OuJV_(C5R'glQhS&_%,5[cEe`B5Y=^DA#B`]I^b#=ked0Lr?#b.3lSpd)1>ajM"R_/Q`%W3k=HFH#Y-`8%QAdF)K4q4i5?B5cGJI.qW-WVokihJ.<7gtMGNf?&m:hX&0Mm<E@9lFXAbF`R#G;KurIlqTJ\?Pdbek@F>5Xo%ap%qeQ/pa8Y*oj2C]dDmoY8TBNI?5>N>]Ra5W997(U?\!s][\$tJpg##m)mt6tEq+j4^kJ+1o3e`cckt]9hR[@nMg.MTdlLE?ifA6>q%H%19]B(aL"b:_4lTiL?!es6gok.Y^#9c0^ZkP7pJf"+o2elK34ks\>$r6X<P2@oL'4.YNf@d!,uFh0ZJY^_EATAZ-'X+./@/)L7_%0$+6m]kQ#<pU8QLp#Q9RjZt,W+n9]Kr6j,5YO]*0Z!1Gc=LesFJ7SB[:7(r"`rkX1[n\!jVEdrFXLF_uM2V>'q7*u@RD/VJ:<e2<%>TQXcT:S]0_ir=udm$U9="OC3Shi$`6XcC#Wf-<5a5;C_o<n!sD0p8se,0E;N!Z#p+Bf79@<sE(jR]/9*:g5+3l1csV-n%hoMOSO%k"b(>ES?.I]dWh>?XN*C<T\_qDQ-Sm[aq-gn&tRRZd\l4/a(1R]Pk!TeblE,L[qo-+1>j[7d4[%b/g#p<E;%3B(39tq8u%_XZ!Mn%]rbAN07V7^b0BdGNf2AdhEUu/[AD'E7H8RW@6n+ts&h`-5D9[]Mtf.8ba%mc\TTl6Uh0dKs"I0eOLA\(Zh,V1CqU:-0$i"=FDB:p%+"16hG,CtP`WH*N:4<->UNS_G]qbQ(^A_pHe*]U/`kA,WF?s^@O>#bG(ZiN)I"@Etb,[>s6,"hK07L&$PV4lT`T#D@UNj%.9/G*W%G:2^^Cn<->$EX*dpYrl6[A^I=q7<Y9fb,)-p:c7f9/$.-ZYSKk#&F,(HU5)g1s`2W^$9i7a3gV*?`!g+B(18:UEZa\n!()J,E7_C%fC-0YkYL(%rRYhUbS4pYW]%W!GOf:]gX?=PCWni_&hKqLd>KnEj_;a+8YN`Rc[K7$Un(;\-n3S!R=uN`?6`Ju1qOH91cM"<25OH(%ksP4:r7S!.Z[-6NDn+[GAsb/N11n:m9Q3\>\i)HQg:Q1#SVrCJ!MUI<D\#VF#T!lbdM\=P("<OC(nM\3YM2)_JBIhA9tp]U=.[_H%?M\jDS]KZdcIQq2A0=K&-#7\c[@f2R8Y9u2!-@"J"nXMLg\M>nIK$Ode9tUI/l6ho+!/?UJB7]"*#HB&0[g/,oISb%RK>\HKrB0$%<'($]jLe=-24/qZDn>^eBtenB\V6]hi=X>C5"!q<dZ'X`V`Vq4^HQpP;9NY/!)MaX!OPYEeu2Mp"j)5M@;+@SF?_SDq=AFu3n?:m%SDf34M>VoXoS)PM-)BSS0^\a#o_Iq!b9;@f6#FLV=3JO3B#(Q5>N;5lFaH]dmrm8!5?N'S\&pq,2BG,-HnFk<S'/.J3.#0^mCE9<%O!07lGrF^!qYiO3m&J#R+KEl<B?tW8GCOKfab,kThkYVH`QD@odU!:A-^EY-[ms\bYB8o,KngTA]QU#+Y^NiS<%U:sGH5AcEu8D7%gdCbr/<i'<<14=ok.NM"kMoY(M^%"[K)FeaTRge%4#QODC1?Mh<hRka9NXJAXq:*[Kma'Aa=?\sKroXuXXMAYA/QrN_T<nL/p];o%L1o:7nZ)_:0l&i:iJ0DA?j0]q?Ai.6geAgH!.n=BdDHGj=l^7%B"uala?nXt@h46e1OFg/5&`CCq.r9k@"*L^lVa2-OkRe*\)QK;%1K#c#+$lcRfV['W$D@ik8L[r9@h:HPK.!7pDnP>el""bU"j6=+0cD@uIng$\FiV->&-.L%l`1+1ba-"-Hl#$r/r"marK0A?Y(FIa%FX09B<<[q5F$o:>Y4bor$j&coo6pZBoD2VaU63hqVomiCrhMN1+q4gs!;eDsg.PG##G';nFZ)?aIj6TdU%[5/!/(ZZHi6eCiA(QI%fEp.<MDn+_FNJJQW<q:M+4N\^"6XN9!9MCNS%*bR-mG3'jLRaK\G7r?1i>B@"3FN1g;I8UlSSAWh#0r(H6Z2FnL]>j_QM+C<6l5q%@qE_s]m=q[H7*in#-Q["%DZ5S2f\FM.Yg$s9jgk%=6&eQP;n;%+knglh1;U]2l/@8<rUPXm>S+f5)tFuLJMjQ%5?L3D5'0J(mM!D%Y;7W<V02GD1nedR?/;P=YAPWR>UcGuC>ZJ:pESS09$$9INcC2K!AIT7jRpcR@on`Id2(p1.=$%N*(t.Coem/fdbX,XG;,$'(u?Ug%a1uXFNE#?6hFmC5J]CN9A++6n.Ecb/9'!TbD\S(a#6)9K=!GD2k-?js$'Xu>".P\'X#54h*iW>k#6#[LP3Pt!2p<>7?FaOr/UFA;%/[NM-/SY*%bA^)mP1VSC._*<I$KfnZREW0T8K$=WecIKQ(K'q\.`r8:6W1=s<im6"cu7XUbfmA;Yrii8+K#sf^sudt?O0sUdqcRr%igX+KH1C:hqmq$WWs(.#-6Ch\C<rC8o=70f]qB:g<Efl<!!(>q\SU[dET;B:5XW_>hOO.D!'rNh$u?m,j*K&7%31\sZ-!.GE*G;g%_sKm$YeA;$Ms,,h8<oj#9>K)q@gt;(*I^-/T9lW^F6sYU=B`JmWT(!urbU%U68)pKPD%T=6'6IJ9:kBrC4)ZP=akI-#Gl)%K;Y03%A@6q"ar1Y+Bgt"sU!_nsT[@"QCsAPc6*nkib&Vdfm,Oucj[XOX("VJgUNM-Dmi/+h\aS=[F+;l-mO_?]g(/>&mref/WIlX,"MOa$%QlMP&GkT92qlN&-^.;*[*t\>tF6pBa=*"a44'-r3T=<Ked=;LM^1>8>kJ5l-2pI=bLAQaCNZaZao7Go7GB$o[-AtOAahs/JA&*cb%$Em$@)Cf#E;Lf$5=IIK(3`u'WWSab8i$;UE(Zu^33o!BEm$JuX+@<j)=%7r7d9p1#pJk?#FaXrWckch.>gs]c:</'/iKXVkWKK8E%R*R]XMqu"Cddq"MVD#TJ[E=i^D%3KbkQ*QG80`ijRk&PhIf&`Thu\]2s'<m[[d+as]OuRDr,:ipmCCV)kVRcH>PX!.Vqf_?[]Z71%*nn"sUN,#_=0L&dIsYn:HMQ\#d`+k(HeYkWNViE:,L;b.%p-$)fa'S*RRqilTCBFr;WXgkq6]hRGbnaBWElVU-r8i1f%aHFI3K6n%'D&8#T-n7F^\STOO%jllj(E@@rb_IA@U\`219meF).;<-`U:/aeF;"6q>,C,8$2/bR+aodqf$]>DI_XJs3(8!hd,o`5$o">mB>)d%[<(q>ULQB"MhSZ:s.8/OT=FR5-8bJ!"pQg+i:l?O_YNpU%0#7,@V2l/M=^Ur5<_dmDO?25l]9pNAt.,I'8rufRu-t<U5uU]O?m'(%h!P,"BgnhMX8d+'<^[[[0_tH6/#j#kr-P7TaXS0crpQ"N,cc/CK;957D3A!m'N@AF\\e5J9T`0a#mH^omuUBY$'d$Zb,A_F4<3nn%hn[qQZ<tmBp-eODqi^;sREZjuqgs4^&8?W0@UXHI1kt@pU1DS(&GR90R+7Z8g8:C(LF1_&YImd3%sggNE7_mo6%:Ocl><_*2>0.-%m-&%tr,/2!Iqt?a)aC8#d%BgfWm,]=NTp+mDg]a5>bo9W<XooO=A-o^?BIgmk/-[OmGXF2T;l8XU:OaKp34Fr#606-cM7C[W]M.r%0-)d*['R>!08@-G^np4^?B!R7>S>J)=-FR;]"69kqW"fn#EXse1d@kATSd]pTh:E2rTO;@8prFP,32f5?OS::<)_?9G/W8[hCr&2%^&@]^:1V7M@\Pe+4XT"&8-<B8c#"5uXUX5T?YRjZmqaQC"hn8P`kO8rq\mb8M*bpV+r[uk(hits.4luCkdAT.4kQ^n`.nsCot7-`%l<0B/3CJs/_G=$Pr^W2YFdAI$XncAJ&JK<g=[H<O#^up9:+VW\2DTNq6EW#OIPFn?]*a3jgn>eF;a;AoSU1\p^hS$\LUo[brZCJn%Gk,/E&D#,%d$``T":2**!!G9M-Y6'S[;(97M*P0IIVK03bSA!A$B&']QKSUi3$>:2p)^$g_:nHg0A'=I'f,,.7IU<K.Ad7_BfejN%;+7;1m3uSU1IF%If)T*A(M\I18fsc6G0O)Q7ASCb\cp5t'LnGoMluJd+@;?m:!f^N_bMF'Li8MlS1QB?ma^9)@i:a1^9.pQk8@t6%K>aZ0B1AS4Zr1Pc)k\e0e0b+Mgh:1G(Zn/2?)3=9X._35c7`]F6`uM+MDK[#Pg*9XiOd90.bHR!H5`I$AAq/9qgD2OQF2::9G;]0%;qj>jd%/tI.L"VUq1.5ZJ!?Cp=O$E*[GQ:,%tcE^W:b<]k6,<emW$<'JLGLh%5=:/McnUiH$)&q=c3<@]k_UG?^J+'$l-gW9l*P+%09%fJXi6_UE9r!H"2jHsXCL0J(*1BMpVLSXJ+ornbGe%nlqQ82\Vm4SAGpssV)T+,h`KpJ\Rq)I'`)A+1IgV$hkgq%T$\F(rlN-;%0s84u)gJP4Xe]0OR'_XbIX>ZBYAir8nVAo6qf0g+/l%>^oGOr7\?2T\Ug`n^]s8ct;+m8-(r96*M@XJqdZ@F\69u+;8n[='36"W]%DskiM06ZM]>UZ`RNZ&cBN3jbC=]/V>Q@m91Ll$odWdQbgFn9E=#/0G[K3j*HaQUqJ,2!8nRMmubJ]88!pN:(jDQOr>T1<YNGJE8P%Z:E\("^G;ugP-)_Zu]56oKo'->2nM>CYK-',Mqecd2=g"(SlHX5Y`?4*iHeZ5)U1#c)Ca[@s2_f'=h#g8il>[Q_',Mju*_<J*p?\%[O4gZbg:C_D&kW*Uh%\eeNQXhCpZ@2Ob[iEBQkbApY*<uWQ+)0YMQIBPIIN'p$9L=]%^$R!.3rcAEh1IqJHZ43jmIfdkt22&RR*[%W7.LsZA4>aJbBo,p>%Ya\1Vm^Qb8tBM)O>FKh9&&F9l(RS@3Ed9-7<l2udj#`A.@b0uoSJ\rI&'.+T?^6]K-4?W?@HF+qU8Gt2M7%CBa?Rnt$'2e0UlqGWeiU-E1^A0Sa<N;nakq#cG1u*Cqi(Lk7ak_qrru.HlScmY^pJEke@I<fD90Br64Lqnk9#(hmuP&L$bP!<)!d%$3^XMSl>X;1Y\4OKRo%ELD!5V,+mcTqE2`LMJ1o8s'<kMp>U85D70&0DDgJ^"XlBFo\OQ5C>6HS21@De]CgXlSXc9aNs6-oFT&ji%G^738Ys?4dh7MGN<R0p:q;#)SE4`L)kuF2H]k4lVn,/AV`hLYih6ZK@IQ>a>hEp$oq&($0Fpk_:eLYTWgqjV@F'="prk&(ipBLXZ%aD&;:./F2Jp]A5.L8)HS<dl]OrCtI"^b@F&F1S5Q78*62]]D4D_m&e29@!;1U2Rnf/^#S(\msfL?S?`.U$#/-0"SV(1XZ]8kaJrF%2bgVlCSm^WkBocQqRZ.Y9hd-QL2#anF.VJ0*ENc:3NcS.*9bT8h4j:'#J3"NZ&?&c6(+bi%H$la9X@m2L1_;C"$a1eX([mISDe6P%bOY.$(i%IjZ's^gA2LB#QqgN-*>l'?i!34n)b&B*N4eD$7F/54=;)O`BB:^D0*2-H"k-sU=W[4q)DETJ`^h[A\lnYWe'#?]%M_16%!G84pjC=ibcB[et`&!mRqEko-VUg-D`l26e+DA@F_h.Zf84D?b7mRnB?i$%_8l3dXS!JsG[fD7)!5.d_fdkO+Tn5k7gCDLiJ,-rG%1')?cJ\uIZ-h/^Sc(aN.*ii;PIn,QriHg0\&:W!3NW&eYUb%dO>1#c0BX#YK"7")MDX<u:lrWeUmH2UTZgdNm3R\'agBL"]h(g"d%;+*gm!d$.S*EUHN493$:/Lse4!=DsV@]j;XIG[;;Z#lmW!u>Qt)&ZI0Cse6:mo`V%kqG/sVSam/-8fBsY[Gspn>WH#%[`\^oLs#V%1Q%4U&]3:WCLWEE(,['#g`Z+M5*bpPeWeJ8cj1(9<+[q40K$3#3ZaRNISmFVT4VXY:-t?L`8Z($Dda-e9uLZYD9F3!Z7OD,*1q*E%0H\oEnS&K7&XI\r=Xl4bQG^Fj106i[KfMJ40(nNH/^O*GE06N(;rc%)lp,V$1G=MlfKe2[#Lm0d)WM`j`RtL)%dRqUn=aD!n7!7H%ZiS]/:LiDtbq!@[$ZcBh_s*N(aJ3<#9S=._PfMu(]/1N;akeBh7lK;XNgZ4NA,nQ/1tR>Ap1)u4TW\H.Jho,=.(!EC00.'r);?uj%5\QMeE]W,L]Zc'*)O1>nFBs[YOD#&+49l^nl/:P%!]!LU.p_d(=Dk4[EQ/$\#<616/n*RRcG]f\CPF1'T5,:&^FGkeYY;uMeM<LV%Rs0DC/kh303#IM<ko;4+/j,,s/XH48K:dHDDr-2kA-8,@(&8+`i6A,op#&mi1@fD"@$e>mYE@AiY]`uX0[*%'Z[JI#kL5Rp>B'Ys%a?-ZN.d@MZ(AU0P$tV%6/N/ATWTu/;:G4aU[#EfR7tNMN,Fl`\20>=R!f3@WJYWe]j9CD[P:2Ohls'EDEAW!!B)[VmMO#%IR3CW!%TY/;FDZU.7.4SmiRhqBIPlf(M6"\k8B*([Ci$_qJ=+J>7/Dri#mQg,IHTJAf[2P,5$!Sq_Y,67]&0CDFS<QcIEfp<NYQE594$`9g%<2TPk%X9U9(>,p*WO79)i=C^g\4d$"3e\%Obn8"9aa<ZB/_LiBA:VBa9bYk+<PS24rbNoP_H=[[>-\q"o3&D%`[Lu48G"]-k^jf$%;3M!*6:DBJj&cMu6@_jQ@I,[F:33kG0r2f5h^0VU!D*:"3\X4C<'a5$-4QnPe56oh)+,ApE]f?VVp1J=*RU6_YDo($^aVMd0JWFR%JQ=n'!\aZ=f]";E]GJbECiEYSdue+UnX77IAY/!]QTu6]KV,f,"50h+7a(da:/D56T2J)[[>gCi;"6f^]<%UM&.$H=U"R47M"@@\%kIIrHT#irD'[\sL&[4A:GrCaJn8ddp,CU%NnT<b42Qdke;UF0U\k<`P,LhhaYma\FMbGb=J4)t`@%#9L)j^;g8UuL$_^ZNH2ML@F%EEg44WJlaaTFB*p8Bt-s#GnVbeJnc1/@*rB*?hOMA>%Sj@7XP[BKi11/-EmXN<*,Q%9O"R"TU!P#82UgLh26F=CsANfmlO/mQ&?m%D;V*4NdII7Z:m.mI&aO'<dP*A(Q:bQKc%(^X"l>l;-.H13nG5N.)B#D*l2*u'(oiJD7U'q)_p0C:R/=B\8%_?TN21o._O1pr0m'k%.RG8u@FGbV#*=pk;[C,@Xp.EF:g-:gJbgik#:'qTIR$=/M.kP2+!N#OA%9X[NG(5C7H!1&BnpER1"`4RBH&6sM"lOh0M\W%#nUdG%HDo'+[SSDN=UqBBZmI8<6JF*7_*IX4Q4n3ub@XD@nj?6Z#U^@q$&mOrSIfiW6:YV(JPZYt[0b<u!@o_W1cQ.L=?hToe6,*n6g*f9%D,&(e[9"MUeBnS2(,L`m9F5k$+VG#?L&"A5'!)P`.RGl#Y/+)r5MND=Befa3!hkLK.?053!]2ja=B-X-2'g/o^dj25%%XFZW%^$M%!d<Q(%T:2.B=3K>-=ik]Ll)r2.`(R;dhp6'S^V&@%PQ2^ZoL>O4$]H[:hE;Y$#G4'17sD8.a+S=:\q!C'`%hmkgBY]$(&i>)*/o<%@$uGK8-fIC!F?U.Cf2kEH3e8F)Q9J-TU+n_\-Y%6!,fYJKV/`SQ5P6o&Q+H#N(&grC`08-^29kUKrR1j$&'d$_d`I&6WqhC:talT%Zp\ERilGk%BUPgs>P*[f(/0Z8UoXt*^dRM6F<e[)?-qXl&Z@<sO\etM[*k=[L[ue@;['QhgrZ<$'D,F2&[bE-"lcf^Xjl+8nqB+\%RGLWdU1IBKjLiF<)4I4I/*p6/!ifh)57rJ,d,=NbUib+QFbS3]^*Rb1e10n'1*eT413J"Nri93<e?bOP`-MVd6dSTfQ3[JM_8-9-%/4M#1FBu1i%qLjF^I9.HM_"u]g&47ZL*C?P$I[n`e4H<:DE=K"\0t@4!DF+<*DKf`!_!8k7tsotr"$@kfc,%ZQ4GZULa]DN+Mu#5%6[BX6@E^&gog0mLL:I@5oh6j@\D_7;SFhCW?s[BQYqiW`_/s.N/QE^c:K2]Y+G!b./h%&k9M>JPoc1k]gb(!0;:?%&<6bO,1[^,#%U*^oAo].ZZ:2"n90-CL`VD2oj4p*oWW^ktaF[=H;HA*+f(\;>1P&C?D85m;ZK.1R?kS@Dh#g-CHGZe;/AAU_i3@o4`fWOl*W*Lf?%-;tKcf+NU6Wl[",;-idl#ZfL$1UEWde=\Y'AQ$P,#cbbmaD(n;/G)FKE._,i:ml,034p\'"0B_qKI.YFk@m9C71U\a#kTTcgDB`P%`'U%jX2Q%k!*E8kL+HB3aa-cV*&^7V:c%ec2!,&h6;Iff3KPk74Xj27MLoD)rPc+%&:gG_GXVnR5_Y^q"ePk-BYH'G.cbtTaP-e`%+ARojMR.<pa"W^o[tTkW'Q=85:ml.G-Fp>('c0I"OsonS_!sdUq<C=Y*(q$d#X^-]Np-`nTmRe/ZN\7QfU==S#aP5&Pp;Y6IS($l%e9nOtkdP$8XFS+jAV,H_+Y.+i4iuZeN-mGhZ]VIjUl'\e_P^Yb'V?jd3l<1r'=ogLYum_^e<VVt`4@Ih>:r`)kq't:>`_+%YU1cD%Jg381?)Qm*Y/>[O$@?k\1,9CGlk05/kXH%Wk.nk4&_!UK8=dc.\RD:QI2@PuJQm\rCO+.!VFV<N<obCtHK&fSknJ/LZ'OR?-9:5m%:OjK[c#i'6/gpaZRu?B`M0"`G=O_B:27U7jSJ9-b51j7@3qkq?5_>Tk[CTPO$";<V66MCunU8Y;BlV3.`%jh2IY!_M)jkS(=>0tR%)86Z5liQkl>mPs01HlMG41H";6!+A:%!AI#"Ieo&D&!?B#.'U0]d9%85^&/@[fId<JTf8H:6_I1ed;.PPp&41=6'E:46ZLW:DB=<%:eP;m>&#/i.[@q%!r><'/p"6$o^78"96@'?caMNjeLo47AgA*V8dOYUi@34e>>a[cR>e*qAEJtkjbLoS=Wp)eL`!cb"fX?6;duh[%D`<29c]Jpc2'GmUmP2a;mVHm:2m/_Ths*DS1K4iqk^j]TXqD;$6sLQ&A=1N9PhDRp.n#%06&lbU+cGeKKrVs?6)')ON@*/pJC_LK%@)e5D\,te+0KA^q1FOc4:a9&(3b$,@j;cCp$+&uK<D(R&p]??gp8eW="`2sO3@640GPMG%C9Lk\,ASZR1sfoAe7],Pb-FX=TI_TA%+g_iU.*,9i$C-_p@iD5slk:9@(3/1K823+7V8s9e5S*+IodQfs_2qck!g'"Q$go94/1iPrBg'X"Y[rN#/JgjT(C3qnL1t?hAP=IK%f$6(j:/8##T#EWT6Y/0JHnYZXi$$eb-8,T?!#!IG'3+<g&12e^:+<NZ)5`e!Y[j8Q"#Dk!<\7hZ(G03lrrIP0o>rg@iN'gT$Zb9X%3P^a4ZZT"`U6Z$@";[G!p,_.L^`7*_m:'d7V$earW#,P\(cgR5/iO2.5gAGMgpHkMRp$>H<ZR++B<cGHb/ik7"7^2&kpEJ`l)I?[%/sBa(=IUP.p^Z&A?V7eYLTHu,7P,:%$>51kD;Z)s5dHLO=Y6s?Bq&N-&SJs9@29e?A!6+^'`nE8`-ACN>7SA:VPhoOq@2pec6M6b%!=TYN#%kl?$-@h(&$l-8<ol=c]HH.!b,:ES@Qd1R8s(]-Z=L_d//6pljdmTKrHbWe?E<-*()@tZn?T1V?rF-\1p`h`3$EPY'i*t<%Q>l1=ANnjb:]V![OUMN7Ka(rI!`#jFgC"c9Zn$0H.R#Boe/YnqXrrVJh4H0j#Q9D"3.bmmQQ<^"Y.9)V&PBo=(])8eIVYGS6UQPD%"AK&1!YF>W-7FMo1*'/P(tKB"%[2MelS3l=])KW/6P3rs8i?%6N\.S2\_-IWKl`nYM6I;O$"#%I?o*3EbE-!1TaC#o/758ngU]*0%I#k<jQ6XJjf7\oU@:;unOh[_#B=/9D-:?_$1'LEdb(a"8l[olTAM&:+T?0HqX;TA(dldbuNa4?<+"Xn)C#!<":a"t&+:bj"(lVAR%EQK$d\mQYsT"hJ>N7B=%iM-V$"M,ibr0D%d;B,nS##Z,Hjgps(^g2=;foQ_Z"P5+L\+4Ob68r_GfR8_-+sL'VdqrtY#Hd5W-'R-'%#KA&)$!ATZPADU[:%C[H8f59I+8+$n:FIdHS<*HDEQ1N"691rZ(uR`b"AJ!,6D;XuE6B#'%Oe]o2?7cf#D,bq`R^D)J!l[S6B`'-%#V+,CW/rHu(l)cc]H`&%-kmPfkf@/s[\F-F'9q`$8&9$#NZoquV9*g!iD5+nNCO46^2QP>+Ysj!S`S-[N#-'jR-P&ml_@aA&2fTf%14oqWQtl&7gnj3:nIe'q1`8*'ALMsXN<d]W724nga<[7\OQ[-,*rsi3q:7@#$Y]PY[#JS#fJmsc+HJe.5>]'ic<QfmN1;?[*"^Vq%^<1k+F:C<JMchLH/Sj(1^sEK4i6WN$QAP!CQcDMR*\Q?A(/YrO,dsVi%PR683#^]?@%/cN,^'^:p'5J-M!\maGGfD0`sK2P`I8'[%[><WqYu-5P`4j@e]GPS-&djlYV2.;:4SJ3*.ZM8ue3=_:I,>S^^JLE8%;#YgDDSj\6b2A"lo\`:%/#TK)V`KQ1AV0sOAB9%\2?uc%+3R=njN4m3Ys`)`[P;fhiB@J0nqigB8W6(Rj*q=cg?HR3%2DMUS(tT_&.r%Oo.*rb1BljR/.:WOHY55qE\Wg*B7$km5K..CU)e*#%?kM;3Z!<;*)!47#_(oU(A!'7X?C&JPNuQ$mKjm%^=BNS"!5p+O19NNJ)j[6R!tmP_!WAu&Rfu=0*je`:LLp(d\?EqYf+tY+h8mca%:b376T"r2kA-'SU\^OLF8n+2U;?0Q&=>.(:edTq2PS%N6#[1DWpciE$'QJtSJRt?C>%l0cbt5H;@@;-df,'t16<tXl,8mV@AJtqe%_l\4sh@"'6Rk0dYS&Rds%He((EQ,itl,KGtdH>>N&%S_M2c4iO0+'XcMa^mn=X\TXA9$XtOgCm*4.bFG(cbfr./Q1_+&:)s)Ts[*%Ne7__1rO7,6e7Rc18*X0[EnPd/7<?(\P/^W=Lb28g8p)D/i$:u5(F!8>8(KLOP=7WFR2km_n_4QcIE78G6;NM(tR$3eF^;0%Eg_r%RNC4i_LPjb1_U.Lg9;#V.(:O@[X`Ur:^)_*JMIcG]MhJ]LZo^N!ndQuSNI`;C1u?=kYnQ;as9gQ4;i$e72?u6Nkrb8_W1\$0lU0P%('on"dfm:dn893L$9X68QVkmJL0/a%AdWbk\6-a?L&hM^AgD+d<_Ac4'H&GhUpj06HL+:_Xb#S9b\`8L2K8c@0a&P*&YY%m,7I7H%c!fghOlp2daDG@J/a.umf<Df.@c;L@A+:`ulRYpr][3H.L5""hQB??&TbbiHWF>CKDMno8%O@#P[a;t`LjreEg[@RCMbtV&^u6c8%J;(?8auPC\pC/cd_VjRHXW'afBL?DaO5r7P[MG;Q!+jq(o@\?L*%G.+Ku"Xu`tW)e@H=+gBPS$Y#LY>kXYJ>'GT)FaJff4UM4p@&%eei.#/1X.YG+^TZBVIls.+PiN$0rI&7OU?3!.Ca!.=:Q_L[dN7?\IbQC^q1_gcu5?_%=sE-q&SW)%*5AE!8sZMZM%R'HCDS'hHBY%,V.Y:@I^b&j"c@km&D1j1(QbaX.Y]f6;$7H`#D$SEZ/Ck+db^Vau@_!C8dU*VQ96COhc0W3ca+`QAF[WqZ6"R+#,c.,X7DpIlZFK%MSUFU+O,UJP%pD8=_sK_AmkUs!A!kA0Ts65KCpX56T?lR:;qth-q#)CJ1C[2!_X%!.rc9BBjp"54#J@E5gpI.qS5<=X-pP,!@GB<%6[s+V#I-Lj/+NuJq\Oqe;4:t4R[?7tLHM2B-BQST#6r_7+;I\Pl00J8eS,6<PVO:a&bt.WUf&!o<YK)I8\=Ma_MaX^JP-A^,I'n\%*G5/jhN5NVoY)"7W+@:hZ-"tiPf_'+'rEsQWi]*m&BROLO&@Q;!l!;U;sVOn4BW3$UKDc+m)$W1;E[G:QEH-^,>%>>jg01=)-c<L%Vmr^Vg8.989M6d?b3Vtgj$@Y>_R:it6)A`4PSFhedOm390PujsJH`(s[7Rcbl`4ce2HO1(ZlE(Cn?VsWAY)6Q<oN!s,'5!,kA!>*%8TlSc"D,?tnoU"B-!*PQ*=?H"KJD1I<@!*K5uP97>!USI0MG7Ko+EsF1(YE'9noP9FW2*LZ,NA,2gEQ6S13004F9gPo=5r7M,XR4%6[>L4Zrstr)@K"bib=[Gb32PW5gJ;]4DI$p&[GZ+(_R\nX-S;<88G=/8^:<bF*QE1P`c;4EZ?L0@?Os(=3U1K3CDRRK$-S"U$)WF%k:ebg$0K(*;P$*#K6\_3-t,QC4At+?'([AC67(%e0p^ota<3(XjqaO$/gbEpRF]@d2O6/WfTIXJ0r0q@9J#AkQ:5s'VH.]m'rd&/%#m\:Z8e44k_OADn1`l@+g"`)TE&X"qb`]nTN%L@c@!EQO"ma/A5t'@keCQG%8oOop2ADkH$g#gR0O9pJMFK""!K+I#;48S(S5db/%l*"!YYk(kR#T,nD=p)bf0aoXT(',!1@E=7l]2d4YjAplpE*8Rn&;6uQ@os%>ON)$kGB77oiUF]d<EYS@9N>,I4I`<b_.\NGWj4::%cpF3E,Zll=59(6BPZ+S[lhM_Y9LP+:.>jq>D0>c@V9::;\7)FQfC/t>TeP>_]BPSe"6CU2=/X\/R0Y2E[1\LT6CD<FeKWCX?uee2%>\QsW?_Mn4^M*0U^]V)>4rB)BqAKmO&!^:.I:83\kt>-8XPA=CK$SP9l]l0lbRP:tl<o7c8`;R(!\rf*.V2M/0O-t)*i/q3d^/9u%#W`F+d)(ECJ+BE2cj+$7.cXt:,T5dK1.mJ0IHgQkq$5>BM2B$ZB2OrrO9"Bh)huDA*Dg_=*!7mCQYkn/De@3-P^ADl8sq4-WmZ:s%Gg-=T7&m1rI[D>Jqm9_SF],Gu;55CW$FF,UQ=QtNTJpia_a@M:fKdJf%#sX'&BpgkoY-DYi:*9ZS=+6PG(f&Mlr[,:*[d,+pmoHi%2N+l;RIe>SRP/Dj3"f7[n3S^cZNAf+Z6J]e2:.hQA%#'CL9i)X'2Z@P"q*L_ftn=-MhoCspCls0e1+9u.W,\D,5-],Kd+^F%(N[(%,/Qg,i?aFX'XnB0P`Y6n$$26OiJ:6.RL,9nN9=?(+e3]groh+jHj`upkg#=D=GSoSlR^?u4p;%:Yio@/hJMNC&3_c3V;fcg0]esE%[LWrE*2O05nI_7X!lM[Y_NerSI*([fpncC3a-V\X3q/^ESoACs.irbGZ3H>3DA,Zm4IVfn0AoTPBhg/'I1p+ZaF>(D!X)iH@/E2+%L<;-$M<rYKeBJ9Ca<q$ep+4R.@iea_ZQUWOZ2nG2ltcl;T1!^KANqJ[OTt\8JL`V1SrjN7?l(3[bKA'NaX!-7+cG\65I>WfVAJVt%.=4b:p6,;Obk<6S6Ku8/_6*>#"(Y<>lDJeFkqAD&Cr^*s@R_7J-C-Y-YK+?:L]RcjlbEU!Ug]D<)NgV7LKcgOJPCl1@WT>l(_ol_%-`b5BNKbFI0ps9\"oucT+$sigTW:&J[UP*Gh8$riPYkO02aK81F15N,ZJ@dfZ$F>LQ>uYP<7<P=PNtmZS7?iG81=(i`GeDEj="an%QLXSpZj_5`Y$a'H6`+Z\-mQ+<1;7ce87m=V9sDqH^C[#<PYs%GGUSeX9EjE[@%P^.(lRHM))kJJlP5XRV@1"`GWZX?h.2/@ptc:F%ON=T/LngZ']D]Z;G]Ga,Tg[%D)g%EW/Ya7\*d8dV$>l(A,j[Ka4q\a=4I$SdO$jJQal>i=,KUT:Rb0JENluiHT$E(%Eds=OO^Y,k%gdebSJe=;gFtIdM0^YBUbn8c'd)\oQh&u;*e"AZ5"rk=k-9$QG8ebm=F"L#H(f;'\-f_aodE<eK)7hJP-:>s%F"$36LBekLC^MD_%fG[D3l!nBPm;%P14Q#0/@8r9.*Wr4CR%"["K(]p5VSTWA5R6OV-u5JHA"aW.Rd?CFGn^rJ-=Ya).HZ:]5R1m]Y[sIoVTN:G]>c'.%7#U8Aj(DRm+cC_5qi/Q76(uS6,[=]H&OhC)R_lIbBF<5HHC-2nWe!L>4G3bSn3@EigCUt4]?7c`<-#uRL!5I8Rl3sd7k93P5u>jI%onEgq@;*88+:!cDDQg$*)n=3bQC&TI!NHfk@[HUY;!*V-,[WNgK,%=:*&/psOc'iVUsrA\JUCO$Hof@u+6//S\TSjL4bnB:%FE2C%E%+]s+A2^PUGE=F"Te1H<cBjL)+5<>aNsB2A[[eYA5r,O,t_ZR0G",JTrk8qF,`LU`C^S'LtT`LJ%/!97LJ2/?X0`'9V.T(ASd:^%1\pGK*_aOuZj]aM1(c0s#Y[6_VCD)Z4bL@`Y`()pT#!4t%)b/L^k$,(Q\K4qa>H?JM-Qq5O7[r5P/l91PuDce4u5o8diP_i;X6$a%Rem^[SJtfhq-&Wo7^ZR`8r3Zs`RM^d.giCI]j;].,8-cU9Ea:q]IhM'`Ho_?3%3fqYB20'R8/JWUb.H\3u4hL1[tl&"Y`$#i^ZkH%k=UZuab4_6jHt3dnNa3_SG4<1h6BZ75Dju9eEXT`kb<l$jrr4*Q2#[TopLEo\pWN<M`A7?%ZIF%3.+7B:LP.8O'tKX)iF%e=TWu2%==+[fpo"n5;'o)4H-(mJo,!c)/hf:sns%AB=-BJc%'0f%9>OCY6<fX(1G7h<,IV"u&'5Dt(^<'a%82690Fs(Zb4I6K+%]l(L*/q:%jE_B'n[#)T:(k.fg&TqGqC/;KC[f68jEUipE[!W&_7:jIaXB-X7&Ep4kE`WHakZUT\L!UuN"OS)\L"u7nP2*T"Jn#e+-_s^-p&?p%=ukID%h&gd>iN9kGW>B#(l'2LV&W_a;hpTi9,rfi_HbmSi"F(P`6<n>i1O4IM4DDu-&ulJOFH<L&j5'*Gs6hD9,t<(q'eC1)fbp@%A@'En8dXrO.H)L%;nO&6"=4n%E%[)cb7Ou_n:A\LCGDTiEcR21UGtq:%Y4T(LTP[:9epP(i!2n'o>LpT@kYPq:@jTbnL[E,\-u5-%4Wm*5;\PZ1'-'pa7+u)-+Zh_6LoLj*Ub`!Le\_X.8GuC*-A'M6PF:WBXPcmNAQp,f'--l.o,rMTL_gY[(n-OK&h/VC%)*/\S)L@E%ThkIoWHpaed#ur.97jJ-"Ibu73:00Tou,0(iC=<TP7f8<7*9'+1f8]aPWWSISkL9I=dDPrKSF#oo2(\90UkKoa2R(F,PBP,DA9(j%ZNMX^.7<2TQJ.kP;GKSJ4:kI488sG_E)KA+VK?UY\.2Z=S2J5h_\+^Rj;O;9"";ZA'/khrerA^GPB_[XCd=#C`)YtC:@h;Ch$M5/%\c4&'0N-3P&Y>1_R5ieh3O;5#K[b=Vc&_Q):&pGGb*P4M<]M<u*%N3DTi9r^eH*i<HdmB$BHQoO3ou#VERn[Xfm%ab*r7TfEBu":%Rf>^TJW_rW@Fl-I!c\cE-\aaRW8-8CCRuW!)J\/eSBce$8:#m9JNUqHkoe\\E;6&[L]:LPE$CPTq@0!.aKlnKR>=d'Ce\;<:tG@m%DnCfQ+sTBh_7?biNJBV5DsZiBU6Ya[cIShNi>["p/G,=<a&+'H`>%.-m$o2hHXea?R4H?86VqP)XGW$q6'8OX&u`*Xe.P5W))@Wc%4gXK'"=%k@QnI8r1__<i`k7G4C!5Ob3/eQ2*!:*3mUMp#e(IRq,UMD[&B@$SA0:^8L`Du]eAttS#GTn;3;Z[A#H*+b`rmV\LU)AP%l,Xl_cU^,$M2t@_Y\0&:q-Jf7SO)DRe3gU(`9B)e-aAIL']Z]c2,M%U`KD=o,C:.d):!dbNlJDVK@t#kn?0ukQ6#i=K[rdu"t.1E%;*_LtUR_6oqKs)UPC]1d?"]Y=Ra+i'-l/E6#rK1oN.*0a'dQ8:0&M_Q&Sf,f:-,jfLu&s-9]YD::RZ>uk(ZeLN4s3Ta)Hq*$TU?q%#:%TJAZ3=Bpb?lB72U!%VbFGV(53RKPQc'*#Ooj.$XNPU7;dW4=ceFVXpP!,*!C6%mfJ99U3$X<CBaEh4M+8?J&1ATJI4'UK9PGT%4:=fNB(EkkBlTH(UV`85#R*Fo$m^*LSM]8VF3'#WWKc%5Z'=,pk9#SVWMCCX4d<cbAVnj$O?Mm91!6,37HM19,ZEFVa397k&nQX%%,^lD<Td<.(>S!5-+Y@3HPopuBRMTTA.Wudr%lI>'`3ma<`=](!HPF>(EC@li'#hp+WA09Q.Si8;Q;&@%.ZmXYiEWrFO7s!o*24^_%L8F;^.>Ba/&-mp`+t*_W_fJLho`n4uH"a8<iK;iWb-8i&OWfH2^/\bs\eW4CZ4LW#8ZEN0i_*Pm#=+%56/m]P].?fV,o;\EUn6D!%#P'<K6W0LrCo?dYX3=dgNduBo2N)QRR<Kan$ZfO-N]Zlu'1$!Tdn^&J]WWC*U,:8mr*!t?W07k*[5t;$Ds:qS$ne1tQ:/t6ZJ_/.%7!"#XrI<V9bH<BfOsK`)pE+E9,Z"r"5IMFt'-IfNJ;J!cQ@6jn%$33%):gY-mhqiDU8f7U2_/g!X0+nQ$+^$h2cEZ(\"]%dX<2#B%JFO/qdr'nrLploR\$S4S5#`t@2+PFQnR3Cl\k2,rH.5#><lPiD"u$Kqm9OPqG&PSIK%e(NA^::6r&-=D1>+os]CGFG]c?'!8o@F@%j2lVUcJ@g5qji,k/iGLV;0d?ObUP<1bM0K@\_YFVSgI_LT[/ACTsr:1X`V[p[Q22=/lr>sXZWt+icDPRIg]";brLV6VZVCVH"=d<%NXARfh9FQ"I2G,^Bi+$734`]^AmO!4N5WA9(O+b+pnW0C*5?uN?C%[8>GR$2e):1E?Z.7A\*tof,_[]<fo^T(DO$6-PDr3Nlp3nW%\9/2KL'Wbr/E[d;YQ8FT)q1cdS"bkOmB-'CDrZ7U@ZV43Zf]k-L0Ve/29LX3(3)N:PBt!+bm>0?Re>(SNicG?C=sSrU]A"9!_18`%j%RWAY)2P<-dLbioD-s38t!oGcOQf13X[)hH0]Wh4Du6W7Fo`IZ(P"mBgpq1=nYb>$*KDU?HD0EZhT8DoI53B0@7u7i+Hc&'InXO%)4fAAmZ6B!<I?8fj4U[]U"a_+=!or')0bM0OS#rMS)3Cg\h7LJmcA]7-eea(iaaJ>\'(om8:>5:jWCZf'9[>T^8%3D:QfG%3bjc2%1>*>)$8Y3\lJ>$EeLtgBBhi1(U7CrV&[t'=D7Bkt3SQ^CL,CT6\=;+q;P$_QMp=+Ogpi$Rc_cfELW@1$03CN:r8]E>rdB("WjI%-%(*&4Ol[n)h0Y8c]cT6%:]#%;7,P7dRLr)uik""YpKeZbcL5,*D@%.bDVXJDMaQlY,C3?P(9V;iVk>^5;2U<AqGc(Eo5JG_<5&KcS%.`RRRHZlKHcP>.df_`?HAZ89lLFMgtF_=.Ul"PGCRBFeT]G(t5*ZU[FFe27@<NaELA#Wt'f\8-Q7:l:p'/6g:S:L8+QfY8VlU<e`%:WoHnk%t4I5efJkrjFt+Oj%5u^SPYOCMJ\`,2X8)$coHg&k]I5)iMXO5&J[P23;B?AT0k$4KE^[YkFj?A@J?L2H?;\A(,aLGV.3p%Rb\dYbsGHWlmm4jmcQ"M'eb^kSfp^].D5lk5T$@*?dPl:dM?3:YXV9OXZNsP7\Iil2O#.le9SN+p4hsl](0rBA#a>P[5jn_$r[m"%''?IW@4`=D;Iu/SiN'i-hVNf+m?$e7Z^PEAZKbGs7`;9[388QS(HmnE<U^6P52hp5(_PDJ'X(D6UkiACcLHKg'a.k8\'D;V<<N[\%0)Vr2F=FOf7DutAU,\[s6YW]n=$$`2k1_5nXMsR5Ks+h>0f_k'NQ(&+53?/1;?&OYNqsINpXW%"[#D]]&gskWHd6V8Si#9T1?Obm%jn@,GZ:GUAjC@4jD4X3pAa;qrCL_BDP5i)[SQ_tg`b3??oX<$!boF4;B77&gO:^2d7(9.H>S\p00%X72ld%YkIWPlLFkMpmmpggQ%KA.K:c[LV.L?tm?bYSt<o$0^J44@:bgtPYfamGW]L_k-E1\G>s9u>acGK4FDmF/<6H[erQ3%V;VDtIjJq1oS!64('<ZjJ;IR%"JK%)%oG#_lqKG<UG\_FrLd*@1k%PQ=n[?CIoGAZ'8;V43R!K4o2ZQrd&nYBHS,GbE%([^`hTfX1ZgLgjf0>j%g_o'/N&B[0<t![]QQ>%[`fF/L/fU;nAQ"Z<f72q%ERgd]oD)b77feh/)I,Dg*"onWl-FoG,trKg?1)C4KA$]Ms5nR8-<a$:i1XH*@XXi#q:aJn$S6;+'Id;%;f:H]f/65F;N8J1;a>]\/Fgb2na'?e>*caa/(<_4-7*qD28B6"je:G573NdJYh[)Q'Hs4DZ&r62>;m)F0Gd0!erjk'4)3d@\f.hV%I%AOX'b*cQhS-_.Rc:uf61:"_h5FJU,(7b_(FHQ)[*AJZ2f_Z/:g:?El<Diaqb3_X6R4+VS\s@Tq!e&$Q".*r=YD?X[>TnsoMVD5%\mgH*)""cLh1^AV^fZr1<(G:NaM"f/rn[,i;2Up'IpFXr[-,t^KcP?c=#ad/qK8\'`%#OB[Ec\K<6^]nZ:a^XiWFl=Um[*O-+4hn%/il9B3de51BtLNSlN6nrZEM;i'c&!9)iC>Up*FEkO-Y:YG%k-C=?R,\<[k%bP=)8A_-Z[N8R\`&b30nEPq6-AHX;HLDNf/8$EK#e%;lX9R$4uQu(@?.G0ir^?KRkj6"MA/cD\<F3`beeLY.Ce252%5Lek9M,4)D32Ft&_V+i!W:m0CWs/@/G%idbP6NQ#IEKuP0R`%08I%cVS,\1[+`+4M7/I'q-mM_o_$HS_</6C+L[qZ*D>Ke_AJW>bI,P)[H1!Gp@_;`BG7'pma+o2sC4c4%J+!,4VuIgR3%ca>.=FK2kZV%eGQU(#`e+.OVe@oL@<]j\$/:]=RMDQc%EI/S#ETSEeXp*Z9qd4ZJ=)eI(calTaNJOE@S2>c;I#C:Vho%73:kldA;t"*eg6t3D[-;%Hp),r%4g.X(1H2B8^@<`^1k-e>J`&]Y)4FpRe&G)gV*75g5bG-na'@q7%:!AnLH3!*Ll-*WNBK/N=Yc@":H_9oldh8(3]@:S2O.k%EW4XqF`DthL@&UGl/('j1hu1DDgNO@KoNX`'16UM3l&41$"UlOe2h,AU0>SqQ]>`i=1%"I<0X^j^QS>PV:;acQh(n2M_-r803Z/Q%Vu*TU-]-=p+.gG1*%"hed>a26&b&,1j>Np]p,'%qCbp$[et(26R;/N6&l3jj,OpN%htokq+M7-rZtCK+%5Je+V]WMC2k'2'4;ZW4%n_m%uo4/(%Gn$>s9X399'3e3Ns!tgiA%($lK**h>&&g`E.XTR:)VBHdn'a&HGaCe":\IQ/jtgkKS5eNm4[)!o4u&NX^n-3l_q$!u%1MMkc=9bVQ`e0\A6(R?*.R&Qo<hnEnP)tY\D'P7>3t!R^A$+-qaR9dUE?W)qk/N!LaO(eYBS2)aA?D"?[n"CI4Lr*bbU8+1?nMAp%qt&2RLg.f-G_D_X's&$%+Xkb7e-*.i[rfXa@GH:!ZXeDIkh36+"In&+@HQ[^XBJ\Z/VAD)gu%Ya.S8I?'D)-&SpFAE@Q)=+]'GeO%$Dph7T$o#^rRoOtM3P8Q^+G`Gq0mf%?5(SN4=MH25!uEJe^Z+U&;\GgSNmR&Qj:Sc3i:m8XS69lcSC5Y['rd#0J%!^H1GNP`]kd0%2f*(sB1!Hb_!2h*@EG^7Qq6AdYtrsh>B]1Ak,f(rQ#aNM[cZSFhIUa`5I)8S<2%8F90_el,9,oKqtsUY_gk<$fOlT$2AKk:hH%gA%Y$%buBCs6=g0CBAI3IH\%^A)HA#+IChqF6/#hcVd&]uYm_U!XXGh.;P\i72jrTr2!BR$@f`EB!%cf5T,'U3<DNE`#I1C%R$MA+.>%N\R#W'!%EjoYA"C>!P0[X\F1cJZjpFIho0Xc4R.=/Z]Y&N.n_=D,BAVgWd<h1g\#(&09.DX_.j!)lfoBR31#FJRuFG"]M.#.kd36%KDdjonQdj1%g%)rU>(!bAnL$q=E*8S>OlsYGOAVZ*`JloI7IXF@b#V0VK/<qeNsO/[ao'XNf7^d:IE3<CtWDF)E3ok>K`Q\W*+QX%eN-YT7E=b]d0aKli+\Hh\<'G8&6fJl[=B2f>ue7$BSA#J=%bq,T4UOpNt7:tB,@`,=K`'4&2mr]#NciV#`F7M\SHdq]KbQH*O'n5%/G.W"'"]=u3!,tX/ULURBe!qdj!*)(1UIfGG$a\f`QfumUg_.ad4RHWIE6>b;]eo):R9E\,ZcoI(NAnY]k20QmHJP<W)\sh3V6tX%+7+d8mBX34In?cL0_q;QodhXgTKs4GX7h(X'UQlcj4YRKLYi2OG:QA_qSF/KIpm_&e&1,[$Eq@9`Stq.ei?G>79`2&KpB20XK*-_%KAE#j48h_kHiJo2V*Z`j3gKo#.9=.63qR;kh<.Cj8XlHG"g)jb]%@>?YtadPB$)j`p4]sn/M+l=nd7!>`j?oVMJ$bC(.KTl9A02u%hreR["@G5f]I;Xq1,3^6]i2/\c^L/uZS>(1P@fSNR5DRC)LT0):\fksQQpBF[RbVoeRJs@B/`o:R=mYP7>Yb+UN0Z:B%aD8m"+e^%-CJcTT^JeKf%[[i8u@oh]@r#&!Z]lS#C^jWZF=SbL?9o&.Odumfk>E-JN:Y3Z)"Gc5Hh6_*pP!00LGMM@R\2?DJ@(H1n&`[rZ@VR%g&eBLRF?PJ,j%P-0P0C]'G&dl+!7'rqUR^=Lf(nZK#J\U>F(N?EF`_8Url3>Y>K%CV#\=WboPTDV"2cM*rE+7s)%MNSr,N#Fim<;%k!+!K(B:@j"&EQ16Q_n7f5r%Vh6d(A>$[K+-LX-@D]BpYk4gr4[j>tJqgMNrb:^D(NqM)1qTdi<2mT`q\K6u3eJYNsJL^(mLA%Vi%>aR&/G(2mpj=S8tgD&o+BR;e8lPl/@>Z<V6Bbjc=d;"rXL9!Sn_X)TpLaVArp#80OXeP2>o`t#^Z5k%0g3b`(Eo!YkO7p:^*[tIf%BVEe4!N,V/&j(]D-*OA<0G"s*5$[1b<caQ'9n+ZEj:k2P+"]Rc3:jSZ#[=l5+5]1\jTm>S;/$VrSSe^1=HbYk'%E_:74g(%e=&r`%ND3si7e6bqe)K-@#:5Id>Wq5kU/eRMVHgJME`M)*(I-f<bo=4krIs>\TmW.oSnuHST5q\hlo6Q*eRgnEU,Afg)tV=AOJ.m2<L(kb%/@.kS%<=&'LidHMmrV6)7-unc@oo@fgR@p>ZT<Up]eGq0-#%j/onfOI,6F)fMqYmB3FnX4\#/i-C1W`O]);E?W5q`!Yj@J%ZmIV.%[mC2>g@%J/JU-5r+"$dJ^2)2(fM\"?FW^$R->9c:P181:[4DK<-';0D8&m50pjHg1i%.G36?STBl%Tijl5^4/<dtnd0>r=s8)73C%'bRDb/kU2gZL/fPTBLCh6]o=S8Omt(F,A^\NTr4Vb-T>`;;&cc)nhC@b"#ai2J9OAhHQ"0jNfUM&kb&8@3J":93u;\3)rki1Yc&q%@SZijq]a0lS4c$8H,W\]:dJ?&";aaa&N793buBlQcDkW,*5)o.\o_eQ8$,l[ot;[!26@,.'rO"H1.Tb^SB6shZatSPRm;&+:qWG!%N"UjBU)MY^\i2f[pWW?]mq>'")V:F+epp?We2B^W6lG!,kC2]W6lmGAJ$]$Mrm\Ym?Q:Vm0.G;mC@j`U!*>?LiNi7WoWVc2496b-%eO8d3U1k9`+5/#7Gguq=FZBWf;Hk)@C@IO_kicg'Z[U/`PRP"n/&(FiI>]e'/r$!G3S4fXQ:F[M/\l`+\PYAc^8#<uZYo_B.SX;4%*&LYtj!8ng4*7e+8-q::il8b(oWW.U3>.+IrfC6om^-RFJ,0k\8eHOFUC'5.VO42H)J@>n+VjNGDJDalQ/(>V.^d/G+s-.AM!S%k%M:4U;R]]-7:)_`lkf]@6XOaX/deX'=oj9f>EMnpYlEX5`V]=$$,82H!XP":fD.;6:&o$f^J,G?ZFZ"\]Q)dHC`/:]I3Bhb1g`I:-%>BpYK"V&XHh<2ToTWim9WfJK+*JFj$0V*Vio7KLpL%ShF*Ank,a-%t'i@hES2n%Yf`:gI=F)8geNO6lE=F7^GYAU+2r.`HF\JOB<%[H7439nA:<jWVm:RT#"na=U3ql8RRt]e<pL05;XDK8H$_Mu0NCoPYS;O5$8"S=uR/I$8DO_Qo,NOFFC8H.u`/Xe=4T\$1s)hl=&P%N&U$?<g,S>Z7^(1/kmUFh.D0AMEIcC>FlkYM;I(>UJ5j]+`>s"EGqSl+j3pCo5'\Rqm51`HP8Qn3B`[Wb\G%H*F(8u*SW[mha,Lq%R?Mflf%_<8c?A@%5P;)I/ugOIS(3WD*U%LRs2MFg(k,@pQOlCqfi]14`l\R;k/LHES<$Vbg_)AL_La$4>+/SZgR0dr#]npuek7gb%\RY(1I[:.8:<X4u$l/XW,[=5Sa*-2Ko?b'5mk4?;#kPKN[W9u:Wti'&#7iRqCgul_8OJ3JB#RUEq`A9%Pa$E5OO&YuF2hB'MFm"T%ojr>,\T>JK4HFDh=-EQ.$-cU=g@`<uRVk(TC#2P^EJ`6@c9YoKHf"Y%550?BHQf"UqPXY]\R-^gS`uDgOQ&`fMcr[Bh&qi6'$If9%KWukK8MY$iASof<W[NFnM"1IM<u,MYhH;*Ra'Nn='%.]L8Fl^nS5IDZD*kSI?9/%d`*UJ@He!MJV"aN[<0=j@=m$_rMf$mcM76Uo%X\>NjTWbQZAki*4hUMA-,@_L^m97F)"MC]^.IPdbI#rkWGkQbqS55*SKQ9lfj8S6]ZUpcT]tB13`QAN\,q&-:-1E?9n,BtmZH\A*%gKP"X\qQ?$?K,g#@JW<F/=M'8>.e?BLE=ZBE;=-SFBEHo$8'Hf"ZdZ4e$(R%_J[\X[u?*rUhaD1Xo<a458-[6XaHUd9%I6LM5c\q%[,iIE^\.PaEh+?-UW<OORdW?rZ't6j9b\&'SYPOUpNOt*-p(\Jjk5m9Y0kK@+2-@($[kbK(5%$_G]nK-CU?C@`t"I+<Z*c&6'4n5%bQ%J,5Sc%">s85`_P4p,g3*.Ejbt2.ioI=>=R%eX,GIB&R;ROu,9kap->6&HF#o^kHZ)%X=XF`FhVNVVNnXb%'YomtpWSp.AH[OY%-B=Ve?r^`Hfai&cmajY-pZK:I0<>'NP%QX`$@1ucMdikCIZLX?2$+k:cd8o'4Y!"@)`2WDZYm78k7#M,1W04^"0^>HD?nTpn#!tR%ms`%>-\ul-Ha8'?&Xncdl:dr`5,NF8Udkl9a*dY#>-u2(@%&"frKV<%0Q(Gp^qnb-S'1H9O'DGY,c]a>-+ht"1t5X"/HN(%DVhPf%h6`IIrO]8b?!-dW]D:hLhb,Esn)&N+m^>>97J#t2l2A3ZarEdk1Q-C'F:+0]2n`kulbYKJ.8P)1_^]NtG2<%5:Lg&RiRtJJ1n:*r%93J`lr^>AWhG$@u&!)dfDeCBmnt"$^X`n78l,e`G,4dHM&+tP/UMe8/ki=/,:bMo^;`Z<O/YXk3UfGVM_V#ga;Y&uK@FmQ;RN$"_%,,91h+;FHM/jTo=2RW[QfrBq-Af/BIa<0>14mm6!&qbNkeM&cKXL[:#<T32_6tSm;MVfKL1OLkoRYL_KL8Nhl.@0#0jbZup':>;s%JTdT"jOa+:^VdUm",?O'3\<9,SR%YM]=iqXr:7Vc%esDG^">KT^41uKPbMM"3CUN^4,^KQ>d=\4T%V#<_.rJ2d;mO#D4&tiAJr&5%Hb[;no<"mi)#p0cQmaI=?+f)1!Ss:2#U0caH?RJ$+.isgGKiu!NFhmC:8b+Om"\U"%L8Uj4q-g+aQ0aQ[@7Xr#p&nVS*oNE^Y)Df%;(Sm1o%S0^(!hNN=TLgl$.ABeCt"3$-&H>[I)`G6$?kbG`TXe62'm_9I`RIOhOXP!]t:LDp63_.'@VZ:Li674Y1mOf8eS=:-(`U6%S]?\]b"8_P,aIOh=S1etZ:IU/9eAgB)Acnoeg^[b#b>]K%ntEtOgSh?j/X2Nq5W<.k1@qpGlCenc46q$eT/lK#L^2ehjtQt:M+Lo%)d5-iq<cu5.Gn<b3CG15phLomT$M)4PL@".i5tCZ__Cd#3+(D^JJP)FXdBpq\3K4jR.Vl8\42#RL^Jg[T\<nEUdK<Ap1]e\8Mjq9%i7j4C3Dc%m9\]Nsbt]K2\(jLESmCatfoPAT%l2qC!WsHH=!<+RA<.8I\d8k7a4K1VWKM)T+Gle1,,:fmlp^0pVt^G=,g6'HY$\i3%UB5$IkORu,R*^F$T*g8\`f?(r;,56Kj27Yk4Gh:_1K+.nk;RLn<t&XE7aKH$7[W&uYaNnO@Lq%Y;`7.A#PS%7B(tn>V.&j5SZ@=M%knMUld>8YqqE;c?le(84X7hG"Z".]"OR3WBH#2naJmP[E^euYO@;_QhWO)SIDo4DBcgo\CR<i)aA]Vr7:#n(u4LKS-TF!PO.huEO%<o#UKeBkOuGJD[>E,$_+XLJnsr4#2@T_:5NWX"R#mW(U3_km$M2dadiJDjH4kZgu,=qo4VRD_gNNt9RJ"Ys[Ib4`9f]s#DWmR=OF%W0YQs\qm@LmrWJkLR7DrhsP/9cc"k]0Z_$Wal.)U=\@7hB<Uo3Q&6eJLU<(QiEKgZ8KQQ#0%ko3>0>mC#i7t/_)[0TR+DV!9L#VX%)XZp+WJdOP,TiL=5jRXfa=S,^Rs_X0ZHZIk:'E7RgUURUL+H;`ASIck]hTiT8Yo:E]9g1%QT_#<]p#G/Y.Ms%T9?<'F?Wnu29]`4%$>GA*;m/p^S6ZRJ,@SpKD3QfkjTF#PRjChaHkoa9c12TNN,j997e_u=)2Y%^G^VeOF,!sWBfYQc7:o8ua:M^c;'qe$R%6#j"V<qp%"uOOk8O`\g6XfSa,F-HXHY0`@8/p&sgNBG8+26bk)j25*KTUGlf;G1mIAEHY*c1SuL5]piGCoQNJ7UZQI4i*[Hhp42i\)'DNN)N\%<Un9"ELSb9)g8a)p*f/>Gt.?a*$ais(J&<r%pA<`NDf@-])5CB2Z#N"A&j:-'LqVSlfW77d2ki-8'C7ESERk>7"aurlZjJUBfO8_%7)*j9agPo5U[>UQD-eY2[kF:rJ,F3CU0]Qj(,g#cn+2k*Xm)D,!=G6#.VP>qfY1OQf\m!4E&03B!dC.*^A@g7UrGq^CEkIS5o$&k%P&MJ&PV!tEUVpuF?>2:mBi)d5nC-fBQmT@BHX0^b,5iAAm)2-$QU^$lqsTgMUg\CamDd)%^X\^0Qdt[GZZtY'D_fou.ooo!]O\0R%ZFD)ZZ4*dUD80ieWD)]Ba8JSSd5%;N$uO<4*K<pt&"'kGZEIiHbItW/),\"`53gu.k8.tUHG_M<Naj#4h=g+'3N3juV&c,%$TM`d%cIWsdPG0q'+F3k2q##8.X/9?q?L)9a[3SM7MoVl;\Lu$-3"A%$QSklXKl)b*He:Em+@7`MHF?oAlHImKQt;oO-ECAF76^^"l_L^9%l$?Dep($0ll6E`3RT;RfS'/I1T>.UiFbeg#/d0<5KgcE-7!],Sj4eP)(Lbahm\-a9hB[fOOs]%WoNm.&#%)jPG@D96hQM:XB@]Q%%I*T#KW]K'\!'r;Hd,2'\^+e[4*Zptq02uMD6bTO*dnOXQa(3It"tg^tPR,J6g`QP[ATQU"KD[q!/WoOO*KBYCFQjr2^L`,bg9LCq%IR5Rf&J%AR?U=Lp"'L=W.S=7*2u-Zn\&6cgHXqTEm0.EnT!E`EI:AMgC=_S&AXAQ`2>E7,^0S]^c]T%Ckhc'WHo(_2f:/V#<.al3%3o98hC1^P\dTF]D^0UJN&0>`8Bil9F1@>Dh"\4:rT^&$s[r0KPcWIIH(]:cO>T6#]ZWk?9^d=o>HZ*NMc-[0kRXA1KRY9D!DD,R<%+@iiH=`r,aqTOP319-/U\RjR[0P0[e.LQ[9)b]%&fO9?>q>d(A]1sTOT9@*k!a&g3N.61i@eI/'ms<kVK9JI`]+NalZhfpZ_`+tJ%lXogk4C-HWIi`<IXHC%9cK-W5no),[FsS0cn+@@IMsL4-P@Zq^%D+dmHL!0^3"$i-.j"\=CE0VIZ^uL#ZXG-\XiEsuWC&SYSCsCC%b!jFeq=W\U2YL(h3#uZJ`r<1Xg>p`K9!pgB%uFuMF3[g,rOP(V6sS#ho$rt[U;+SHr/KOF&"+#=G3OA#4^t(C(_0M]6ZHLLWe4[/%0]j&"hKsb<>JqNRQB<Xh`+D0-=I`?^gm4n(a-5pr1N[qdZ2F/tTn47I(?aXfh9d)DgoWOBZ;RL?m+8-_F4a?qRLGsN,/(t+WF#mj%%[]Gc[u\*Tm@mg!CJQiZM0OU**PgaS92egGR`ZlaNXW0WZahW5C/Mnu"gdTKCcI?45[R_EM>,uVf4L(H)g#N]QIj#'gRW!'OZkFU%kl#3[j+(IdR+:Nlm+@JPHjE`+f[6@7\(<":hglbalK>_-a/[R8\M4R>+b^oaTNRsT[7A.!*Q^)X464"i0A'P;TFRrEDo5QPYG`80%)Cs^fiZ&4s`;HA]NkOJRP1=!]E%IHmU0FP(SK>Xc;XoiWNKMg#djZNj-gXB"i[1QP$pG#2aQ;Z@+b+Ag+PA?=`i'\sW8bZVY0I,2%%b[:(fBjJL_a&5%\R2UmDL(_()^JcA4[Q>[i3LVe=NZ.@Jbu89X,f4e1J7lln.O_km#qQR.1@reZm@a2EnP=d<iq!CI$h>^C/^0t%*SaQan^8l:FlbS`c#:XG#,nqe8&q;sN;gJ2U@5b02s7;-n)U+3Sdsiq[h;CIQ8+7\'D$%WcGj[O2?u\*WTLR)Z+I#+SPuNaoNe?G%G0DJd\:$euP\>flM,b8efNhsmZ&dV\Gq-1lgou"*p#[UIXp':JZZS4*1#/tEMPDP"K%%+eMX(C67B2raY7K7`Gn,33p'K;P:RIOp%5l'1TCj_8$A#]1sl/E#WC?MP4&[f,%H,d1W22BIS8Y_8Ino;e0c;>/](F5$f,g]&@Zu#kPiS#e\o*Nn9gO@(/b-%7=q&BY2j5bdY%EQJ=SZT_j;G@%A7/2DM4M(Dg9LjA0o.&Jb&cg.nEb>/s6KhLL#FcML\.$A=<QR$]\i]"trg&:Bn1-M_n,d8qb;EOq)e'a98o9%.W%;ZBXPW4H/TN`JThN]I'DW#3&u$qBR7\L:V+`;L&\E5"s+DVp]__V,!.f28I";JpI&g=Mrj88Kd@qdk_/[OJ=rY%B;N<3oqlJmVfR%\/pVP=UI;<O#jS82bcna_=#JDQcW",P'60&p2C7]=1mUBfZ[u4.b;fc;cp^ZF+2An)^<-dL7=\FHL'V/o4.X'07m:)fm4(6$>+#)%W<KEL$c]1ON?'e)Ma:>7q!^mRO]8P'7mVJ:A96#,L:uJi0+k$I$D,1B8>DPcVF<EAnbpbB""5a<p#LjmC4pP+m..#MV7l]BA_dc9%Hc>C<1,-R@H;^U&.:,Uq:?V"b7&1%;A.5D&&MMKcX$P!#GCOIk;cZAh_*hE]0^<iU()79FqF^!6A%g-H1MAn3M,nB^bQ,-(%Z_5j%c"ig5dS4t(_l,V`b8fj&jF+ti8Q[D'F8Mu<!&:,+S"8sB_Igc,e9p/W],?1*(SL5C<cR0^8^5[c%EjpfD,)%Y<q(4fRiT_Z/p4^k%gM?E=DY%e]EJ##c]tJp7]b2@W\nf%RrNs3f+*&,P8@h+\G!sd<$\PKEWX<$qVi_B74`74ro$npXqQ5nUrU.kCO6sC7XGD3^5<G*n%d'0%T/9K`ZZJ4ErkN]:ckdNPq]Ff28A825!:PICX/LC#b)oZI8j98IVJBROrCH-1.ha[@3qBLJlb)H\;*>S+kPc*8Y(B\8Uq(0]`%TBY*QDbc(oWRm(p[p;g$ZbZW=GZe7=L0^Eo-]TGLT;h9C)cZ`L;"-]&=D(J>$:;XQb+cC/m9O^7H+8S[*+%,/64JA!YIZN\iQ]jA%CeWj-KX8&]9F2nP@;%18lIa?<E.?_efX@0a3oL1a50:aWm[)bUFi@<h4Rb&*g]=k'\3&UmTkUN:?+!#]C!#(/3J*"I$`5dULC8"S%P9(E:M(98J<DK8_SHe#*NJPWa@9j*;[W>g`>iSHeD>SAk.G;^>PSO"Cfc0$7$njj'fs+7[p)RQirhB6YM**saX09P^l`)e8Gub<*%B/=lRlVie3S1:GISda);kKP@3qsuF;\NoOh.',ROOFcR>[OUqAKlE*JmUt#r=P=-)+'qIpJ7u9K+eeV@#[[I_jQgk:r-CI$q\\2I%G$SYj624f"`'c@"pE.0Km2Iqn2>J%[a6E(+94"tmr]*OWT;VK2=<^X[ZJfm4>7@B;EX.I^qLcibA?U_*rWJ6Rc6"3c+&RnJcAI]j%)ck?LlcDsE?ugT:0P71Y6::M<](M:]1*9,-BFsNJi,/gE+kI%@)"M2qGop>pO3Or&YjiSHNF`CGs7NsoU+NtRXpdQ]7#[oG"SKgr%I)>%!2<JP)\EpH#be%-m1G[&7?p*-9E8GG%RB!5?661^L48-C/&V7<gIjV&G+\8[!%fuiS7o2>qD-dpWN1_ON.nW$(BNicb3eHen%_4&@F5(q%o+=6e*1b<<ZIN?$A)][Z>]Ub,&]s4doE7`.FmD1mIQ_Znh(gMlmIS;e>jE2J0c$0r:(/j[FLf*1uF&&1_#Rq.V,Zj^t%2=U`1+c`Q+.A`.L2,4aao_Qo`)Ds(pB[sgLRT@Gqit%=0Zu^I"lq&/YE`D"rA^IkObR[5N_n`7'7"fNMcS)hk:I39.]R5`m+06:B%S/G`6U)/YJqlQO-,!,9aiaEjSSMZSOf.>X;Qq,:=OVO!LK:=OQ<T"o(7FD>!q4*-"TYm$&`leuu;!]:DMe+n/+ZM5$'5(>-#elVr%Y],18bca!lR*OW,8?\Cpgri.P=?%b>3,%K7*P6ueT,8IH+AlrE\1u,@k<ij7<C/SEm7%K0q2j%uBGC'd&2Y+0j=$PLa-JH2ONuf'%Gj,Hn*),obdS_8UH@7neZPqAo3m^MFNX$()Q01#VD.'*[]F6EbJNZ\XH(bck9IbXBB*DOjeKBGtJ_-+Z<LZC#+\$Atn*CR?CO6>'%G?4Z_7MYNf,g"'I((A_MM/YbL7a1'cK*S.LJdB.+AHZ<t,rpPpcrpd4`n`cuf_*ea9[(=_(YUp5ZQLNT!Q3ZXh^BBFhitX[KUarZ%(RB_M".+Hg)WrAaoGAbT1UJ]SW7TL*E_+,L-8f2$e3i0=_-r:I`X!5:a*L.0A(Zn[844BHCXtgR`_^22D:ls8,u!pMd*9n(5%?mf%Xr*4l#)&I2Z%H0Y/[kDZAF7G`M*A4NFpdR\*MSB:j8@'?Fm)X59GCSLe1*U7=@Yg4b_JO%?W,"E(n%*'5`AV8i\2g8"MW2bOt*_R%bTcAJ!djL.@^6L:[#V-+3r!)0oc,`.'Q6CV%JD"RfL7&23r-eXfMpM^2/so<IA%_\LmhL0'PaLBrB1W[Y6Q33qLK1B>[7#Sd?ks/%:*1Fs<*+%C=u-Gp'N44PL!WM_b-"]CaGnS$FP`t@5_Y%@6oGl=$J'fg!TYN!^3uBX][(ZS&6P1L^4t=Co7qH$0;"T43/?!2RL0Yu%XATqb^trkB>c;IDaeTj`6I]mD#>5i)>bH!';?9+j>n1lKP_9iPGn(TOO3UK&f:u_!EJG^^Td*biqJ)O83qJ=ii@1kRM!G<qGb-Zo%ojkFE6=D:"EO"aOkW#Y?B$g$jd*K>F.F)f_nR:?gOW5CX0L>?8MM43/*3$$;@"bCjfG.O[,qmAoL7_o%UODj_a%7pF7>K7AcWN`2%D(Ioo,+56M*rIV+>sidC"B]+@[*F)?QlS1d_[_rPbYS!@+)K.80M)7%5+'ki2+M#LhdI7C^=T2Wjp9mRaIfZZGAJC]0d^cb$#[dQ%SN%-u3Z@!3K)oMWh>(%/#Y;Ce^[S4a!!"IPTYA.m5[LnCfs^dFc)HoE_[."jN&*)f;U+N\H_gk=Lm@D!?6V?JYU*=;6,-CA(Sa#5%TSI3j4r-uh&`&(aKqCcu$bAg7\]YuCFlJ']<>`l6kZ?:*%@*UV1&-ra=R]1*'B5ag&;>]pdG#rSaXN"[Oc"tH$<?T4M$!o2,gp1a%dr&Ktn&-rZYS&c1-hiQe.5jlF$J4LSbSelkq-V=^2+1k&7`^*+J^5PGLV@A=Q:G%4iu_2XL08P]F1aD#@7N=qP)C=NfqLo`aD6Pd%HhI`)#uO/>j!.7BCm)3P<F/d5_'+&7p"iWH<->3!/42&u40f>(9]cq,Q*PFi%>R"r)__6s@:1/]ZU'`R6Qn7)H%^IC^>+<b_qKqO%N!nL@rD;,0[OVpG&O[,f.C:*bb_2WF0,3Uf/J89`UpFQ.="0Z>5uCd+-cu>W/XIJ[C`K<3ns(=-EhObGAQ^L*EMqc9R:kh484a4]%GX9H$=tT##l]=eRUQ3j.=lG!MY94r8e>2'ER'0fhS]7330,AZ_Ysf+c^_9$Nn"7u^%BhKlA9:_nngT6n2kH=I_an+pNj51/jMb+b%TmOd]"/FghYM=uQ2A]:R(8Y:p#gu1eBXTJ0G-#H#"9Hc8G,ks^>%gi"?3Hj:W]>^a+WS5.b$Z>%.0Os1+=\arE&CgSn-A2\[+7-U%QI0Col`mB-<l\TH_(AKt,XL&#VHF1]U<K7:"gGMcXB6q4VUA+Iq;Mu='#sp9Ymi;u1!Rhn(<7P-7$CSXG)<&b7k_tia9br8kS^Yt%p5Hfc0L[h7%p9t4>Zk(M*psd^X>ZJ9OnTAp%,=VV_>o8t&3?3(E?tNNdQEso>.%MLSX_iO3BHt7hO,^jY@qIA*D1#ta-d\t<-enH%`@>6d,:\oACtg4!U=N94?<@9bpM_%P\YaK\I0bHR@A$!n`,#U@2knolbU&1YR\G,)p`AmU1a@VhX=Goa[N0J!+l>!i(J+oI,Q,dl%r"!KOl%q-X7jJ1-'M&<BqQ%RIqN<+kkm:$^):l!B8K&Pm:,!Nj%GN(J($#Jj3F$)8/56iG4QBpMJYfh]2ssZJ:)$Z"dl,ACR*V['%$*"#dMYP>Mljo#FCck6/#hG:7S4B@g"R?ETbn0OlFriM3G`?,XK$u1ZqfZ?"(%^s@4u+(-7eu)-?*H.3%K<VB3@Lp5jasoXe@&q(%W$EWf<DhG]:$6jIY<<p[:'?P1jg/,$)l9bS'HksXrjtI#V(-ld&lXa:gTp.oL:4l0F1R@q\9j4)imi3a5gSal-FWBnC(U!Ha$r7p%J0:eG?K>Xo)[`H@QJ&;P+5P(Kh.Splk[8nj,KdrYo!t1n28=5!@W^L4*:IN=kTe5jOo:ToRT!7gCR^U_?RdR0o?`=o.Vk2^b(j=G%Qm5][@Y$Dj3"__oc-$b9hh44S(Y<+YK%K'C),(gc=tK<(_4N3kR<6d5@i5nLgIMnn*;gBq/I+OMiSs?F(c(S'X[W%*"]QP49pKc(%?LA.a#'SG#H*22bJ89kiM6KNO=7Uf(-RH5:,=!Y+`W%\D,;PP%.'96ugQ#XnXDT'qCpnSr0qJWfSL)jPN:`Q(M-&R205Qc8OK=Rq%S7GS@YV\ESA!G*D\0:H(ml!rW[O@?r-;m*LK/\AC>g-Zc2$644dp"SC+eJ"uU).YpRnd>FUG)euI@BAL*il]._d-qrZ(&![(H_(K%pU.G?%.;mb?C!EB;2J04X,?,UdlmEA^]/KVo'cR5?iItCEN:j?i[FSgDhqPPh)??,Sq6qF8t+si!?MHS2,1KeqS5g$Zb9os3$/sF%?LR<iBski<HN5FZWUFdM+sd`meV<JN+-CPmcmcLUi-Ra_4,P4QC^g]fjn7Qr@KQK3g>r]nA/o-46S."C]@(mGbOElfC$P@k0J]_6%]J(i2^d%T,-^Sd2Y-`S+7K"qRr!*XfYC,m3U56ZHp&rH9T&l[2I8T:GP.6MgN4@iumF^19I=;"cT>-B#r4E")^\j`(f73Y3s7?9^%O8nJ=hg_%j-Kqk*:.2jh=Su#aJH,ZB5CWJ;rqZ6%rKe,9p[oi.N>'t#CUj3g<k.8%0qH)WLSo$9IEP86*D\`*IWX3-49+kTq11<p%YM]?pDuB:kh?`[3(-_Qe^46.UqTlA&i5Q6.BQ4PjS^I_De'/RsYtfBi9F@c<8KG/kVcB67`<.51ngl73!"0e&8B6t<G&.dLnl3WD%L2HRiX.2A8F*0#_roAX/92qHA9EF]6%+`r?F"?^sYfg3c/M`5rV!DodAC+*a(B2t6hV6;tG$Tk'KK'$0M.d9(l6LjD6=/m>PQLf>%g*X(id^Y<c7h_FE&29hteU5ZZ.r.Lk1&'>;0_qkdFOqZj5tD'QRm^;hU<5B`=OZnn/[S5Kqh:[D2^Bqj'#!Gk=!)%laV+FiH&WUg%C:2F"38;Ru0?b&k2B`+>*2FN7CZU*K<Q6t5jWQZMVVK&.di9*0_:OWE<W\Zoq:fc5bI(-Lpc'\[#mn;,'H`lV7a4<OU1rm7<g@]>%$04O+Y6C4\.4GQ2'ln2P/*4sUc[siX(NWmD.RG/9LmZ'YV,Lf"e0A'N/RkEq%<RD83YQa;Q'ApUcA4IFlflG:8*uc$30rU300a:\%3'F'NM[6X1$q,3;H(36$@J,PRL0eJ_3be6h`i-P-dARS:_Q[J=Q!Z-aWLMt00u)*^:;V9HM(\MMFQ#^4UsR(jYT)*dGlUtc`S:bm%1!$sSMHF>#KbMn'oI;ed3S&hJF'*6iXWcBc]S>P/$I.A/=\/9#+q#ZD:3,@a5l_Vh+K>:$'lu^&4loNU/bD>GBp;kc\rA#nX9(L)%Ep_`QTYP`]S8'F<=09C*2-,qCC>l+#:8<Mc:^CD\%Z:CO^73S+Z'&A^%XEteXG\emE3*L.BYh:UF(`(q)g?tU;!,EY>1,I4,nNJ:%OCYWt.;1h-nA48CVt:Koq)W4c2gkur?_0^s3V\IAb+YeA0UY$BCK5%S>JR?3h[\<J`S4DC2]HRAf)un/<K`U?+&O1YecO+83ig_,%me.WI'?/R;l7<"E+XoXBO(+(QRGF2q-S3/D)#@b:H3gUC%@o>abi.(Y_E17*!(TI(=O)Vf*N;1NL1V"W,Ki]e!(Fi65e:g;S&M@'%5E5-DM,&OGCQ@>('K0=5?3:(d7*bHO_'+VHqdl5G':o.Y#%NZ)T[tSbhHXEFqg_M?W(Zu>He+On)24.pQSidS:VQ5JT6jc^kVGn2%-#$s!^5S5'B'5X!33+[Sl!DR4P^.RDiu)#LVX3UW"X72?]368LbQCQP%^F3aV/Wd#b^;fq-p24e'(C0H;g>WA8@N:VL+++gLfg<1%2TgW,gUu6_4,9nWVT_oT/$]S@YjaiJFAK(cWt%k09_oDVOHX#6AQZ7eJHlG(7]%"!VB)IX[^T8q!1'0/fBF:pFq%aUN&QC*N3PF"%f]RF55FIOLUb2,cG=T.PQ;"X=9c/sf%Q6Pb(h?q(bd.-)j%O)n2T,X,.DuGVa5a(V]NAb%$1IE0%cW>q8=V_t(s6fSUH/]edBf="%0D(FiP9/,(KEe\=qMP6g[Noimo:s2V"Z\95?b!-Q8P@%ZG;Qt1eU>UBDsK[C#6a)F`Uq?;3]u<Q/C)G'NG$/rN!69sRRPa.i2]n/%c+IS"E&_JS,\0OQfB\jS+I:ijI>kW6^;R8fVlHVnUNWs9OgiH-AM1)Tp#k,QbbQgffK!O`5VeHhl)_scU*P*P^VGaIVHlb$O7<-)%Rr6P9+NPm@Crr8KF>Cb@8K&&]V!*R#fqoTl254o></;Gk7a!4Iae@H"AgH>[K0&@T#(LW--QR!M&C-=$1k)672>;\qU6N\(L>!4=%?L0Q8VC3`7M<e9.a:tB1N[P$ue4nn_Wa=Gs7o5O1?3bLIEg0-@_]]on5^s#B]rS6OW2,E38ab3DFDD>8QFPQj"nf::O_%M?mm8R7%\f*Lo/Jn]h1i-$4gS1VUJ&!mJ``.m3Nd9ot5&%="CpMcpGAD&X-$:Xn*Eh=".`seQZ")P)@gJGpoQEnGA/VdDD`^>Db#<=3b",73%'f3*DLh2q.(j0+(%N2km_$kElQ`Cgc8=44GgbSQ>&rj;9$ST!M_kRRZ\l*Lb-Cs#bZ=Z4OVmk=eX6fDOC,*\c?=XV3SLqBMPQ7nn%#HNfga.U_8/_+Ds`R)2(En[$HDqQ<)-I_lh"T1?97`]!F)18]i(Boh7$<?&SA^I%*>f,BQ!mYI8NCEX4SUYp)Go5q0q-Edmo.U(8%B4"9>o:"#=!i*G0d#4atBD>><XX_9iEB]0F$!8m+d:qpkYgSNBG`2.n`2M<UV>Hr=m:FDUccp_mje9/Le[/H6[Y2XZ;<^-"B8)),%6S'%bPE)"!?:NolJeCBk7O3rhm>N7BaQT<2DcKJ-=js,tG6GCgAi&M&%J"Ec0t_F_<5#Ua4j^+P6bmno<R\CBX+2L*rFEig]I!gm%F\5R2k&"$*BUF)`=9XZC:g$&mc&m:s5XE]+6\jhJo;YmG,W!)[>8@Tb""e3m;iiu'p50[baG<iI<cH(E:0UE=#E*TkV,2)lOPkE+%(K=:I*1ZfJ'd4W;AD!38o`E!HHZ&Jhch>D=EU6(62'a`<&)RA%4S2jHiOMPm859/lE&Kb6*_r`@l<Xe2N`sQ)QhKW+MMa1I%o(Ui%6^u/*BDQ/.ZFdWEMjNrX&>L3d5S(8],\_L`k#@A,U0$lm6YIZo[c9%J89l@c<X_-#3Z(`+=5ckT3e@AaWun;b;EJ2CS4=aMd2%ON%7Hd#YB3FeuH*+R;W9=?%):0_BmW99)qrgVJJc$)iGTK:*:t\cIS-i$e0_2Wuj_7R;6<Q"*5$RI)SJV:hn-HHa]bIe.+H5@Q#=h@]%WP><D7+2[Z,6%s0^P]Fj\d\\'H4]]Ij1AX@oTpRRdgXdtHB.pF2u`YpDi@X3psJ=NdilRj!C\D!UN.<KAXH?'r),Dt9W\P5.YrIR%,o7[rDqMD!rZN`Hk2o^)Y(]fFlQHkF@>EDfHl#as:<7At,L?"M^otFjK0TDI2\@+?39HHFbV,)X;,H7jnFO]OBT*P2Uo4rm,6kQT%3/H'P$\Hcd0m*b'TR"(VPPjr&q<m%.;cmN$#r]FeD,u\rI+W-kf18@Yc/#Y3d1^#l#1SN3)6m=)KcSlab<6kANCXQuge5"C0Ep.Z%5%MbiS21TGb^<8U5;9+D%:t_?@acnV5g]q<'I#;`,%&>ujZ8`P.+^KJ4AcU?Cat0_DDE.X/Q86Q+I5rU^96Pra".9>_B6sh0C$ue%Nj-!FJ9&u0/tO;s+DMX<fO*&kCuUhS+5cf/=;:`8K5S?\B3tB!:VID;D`QFSnV.k9j177b40.%/4#15Ec46DtBGS%mru$j"=F?a!%8CEN/WjLNS9*()YRi(6V$Y+;k%GW5Q+[!($+$(Q5(=@,FDd/SmS#^LPT9SJ94B*3#A*7`n8*+t>e3,R[X\:>p91u+i<^9hY<n*LV%FM8Zk1b@1p"eKmr^YC11=[Y?m;U!'mT@L_H85l8;%POpEnd7?OGq"(C[:u[:0/gpOMjQjX`6e0&GRA#:7r&u@/!h%eUW>(Y/_'%Y%NVN"X]bcP:Hg)tNmb'>fNr4cf4aQPAdm@&Dkj.?!'=5?B(Q;Pufn`CORoPpE1NrW-5s=s%bWfT[0,ai)p?r0R(ibFq;"BXP'^uG6%U^!=p)N-G^p0k!`J=]7\=mI>ml.gUXr9NFK*:Z]WrFE[0B->D9B^[o.)IUpQ6R$'*b`8?"p"CN&;ERS>aSFu&=_)1iJJjPm)'D@8%5Vs"okYl]Jp\5W,HdAgcQPFdFrN=Idh<Qm`BJ$KCiP1WAILS?Tj,dJ";bA.m-c7I?[BSX0/jl<Je4/fgq)9_'BQ2F[fp%jLZ2K=?%EQPX%mG$]La@CORW2UL57iOZHX\4Y'N$<<4GUjiVX<h<;-NW6_\%t,hoaM:](%)OW3()i]qQOH["a7D-AYa\_V,JLON)<ck@T9FE%9;A:ZLf**)G5!C[]Ef'>BVpajd/bEO0$K)+P]AqA>MjW+H^d)5o9;H8%#k.-cdUV$,YQ_oW))lXr*$1K*-B%-nI.#7bgnb)S>d*T%YhUV3Ye?C0$YK5QX62&A,l<PN]l%W`$#:WpW#i`EBQqnU2Z(GmLuk`Gg:ee[m3gRFqhuBXG:MJJ,?1GJXY[T?W/F)KI:-lZPn-:7%RLgVs4R)"D,4$q*S4NE;Q%;*d%VBUG!`nmr=INX*5hP;AMtQkRL[B8"<)^kS8HOa8[)H:T@+"$"14PEob#>Mu'K96J\5q/0C!_sU%&JQgNAN05Q0A,@P;:%E#7<7G*+tN;3k62KNhK=3R*%X<nJJ`ScfO[!F6Ti\:mM(rpIpZY9r;ZQ$81kO!=*V^U>BVb*`\"UA1QY7^%lC#JP]R$ea%7)FF@^>W92OcR&3u1%N)'k9I@"nUc]UbScOM^,T_1OQZ3j[KP29H&00#IRp*fB(`3t6ZEb'=1gii>F+HpkY1"t$%B%Xq'oK;3VJ5X_&W8Setif=-/W"R(P.pYp;*#$OG2b((2QXo;CAA'UR_bHN"*`j5\5!qD3s_7XGP+hc\tDGEV\:[:@08)<7/o::7BC%R`03Gbu00F?Pm.-;*Mn?m6`(>&Jf_g:CKPN,9#c@%*oPD^6lZfZQq7gU,R"\c1oSO73Ih(L7R<,&>hZP8r*/G(n3V<`nMnL+gs5]%pJN8U%+(bcoD#t;ahsd$/p$pJq\2/A0NE.J8$CU&lOV6V.R=eF:XPF6>EJ(3WRcu[$GcoUH""Xj;%>)2K=aHd).o3T!u,hhP8OIH%2doC(Le!93=sm,Gis4Z@M2^?C4*\TV#<P2l#et&9LkMf!RuV`'Lf5H!RqV7WO@fr'755i`If\mYp*ZkBLR/sd*++:E@H;_eM=QJB%@C00Q\c@C9L?XS8i'@s%d,k]>$=\d#^;0M@l[e/G:^%UB)3'6b.X!9Oj:Tcsi<Ba*Lrot>:4dmFB6HG_GladmN1)7K#]HR'?2B0]%0s$#]qr""ZMaNAS-c=Dg!1]7F1K`QudghDC;K/%?@07kHH#YkR"qdI4b#L*r*9pXTQePEE,ke<Mm8FnScNk)>;A-0uYb8\Qh2Brt%o%L7p'.LSeEWqm0TXatkjaT`"-fu"3GSIsdkbm-7+X(Xfn32[pP_J.?LW'&a,(qL94Tl=$9\CX[0"F`H*K`j&acW,"Qc<k`*^?$q%=n6]MG^*<n*ej6:;\c]#W4FA_&O6aO(QG0s]+,ZaXE'75OY\Guj1^=X9u`#eOjEk4J\siRV^.,d:gcmJ_W*G?I\Q!!Kbmgh>c5?m%ZCSGgobIL)4g6_=pXuh#'aV*0SRX;l'Jm`/1'G6^$Z27U7E8!1`$e>:n(U@n[,dN!3'UnuV]/E;+`cahVQ0-IcCh?lS)-?M<Aq[)%&n,hS\_$#Wce'>nAS2GLO6s7B^pEk#9%>k?6lAKm`/BC/LCNhE-\h<lkSD*aD@2VB(>1qHWaC8@<KoAeX]]+AN+%GE$lTL(Wk-MZ%S+'@PNd[UgVt@+S$1V#4e%g9/?Y2HEM]SklX[dDt?,h-dGWQAF4S!,9n&-[9LX?6VX!fJ4WR[!'mBNn^89-c_0Xhu;CdK%6R:>lq%@SpRt_iQC[NAc,,?82&j`2uob@&4EAh(=rP3gl@I$dA!`q%6c$^3rCqT%ccN+@BZ"hT\.9V"nHP>-SSu69(leL_<'R5Y&g.?(f11%[#'LQ3"TW3Zu$,-$qkG\9N#S7DQplHcAQLa,!#^f$F@*]UV\R<SQQ4McCeKih[b4X1L@*Wrhk"\'PUkFXQprFO$Em,_DDfO"oeR]%f0?cV!Rj;'/t+fU\AmESfrmX519q?O["epX2NJiBgn0-hK,h1CQ_PK`@ZBZm;oEr@Z7qp_;5PLNI8V4t$cOqod0NSPQI)4HRY[6=%"8*L$)gm8&[O>@.XrjA2L$JO(!<QQ[E&^@@oH!2*3SNUOk"ROH-+/%3''h?'P\oG$lf5LWmN3]KN8n\.\Hrg[GFYkYqkLj/X_?Xh%aO^9EW8/&?[,X=/!WEck2Z:HTJ(YED*nS'nKtmYn?[qWX+k*.i>2'JK;-LRj_g/I?@%1mJLf0O<kq*b>d`Q;WkJ#4jARD[?a]?`s%3X@"\/5u$_6KM?7Vm]E1j.[f*bT>m("t>SC=o$Iq>kZ-km<1^1Nf%US<<sLU+)kq'D-.Pn_L$F,pu!dG\nSqPMFCh+bTH_^7dLq-%QQhe$@+bBj-UhMGV^S&ncIT_>/bK)3qdQD>[)hYL=2&P\Q6\gmh"_3L]J]t_`!kf>p;J,fm+7kWfnYRW2jc[]?iFP;6UFt^6MUJE%Q5+1gYcl$31]<V*Zn*9OSKf[,8F:pr;Y#^fD<':.K>raR(hh%P2R@tuR*)a(bDZ6.6]sE2nFTQLM@CWOfI;FXN/%i2/;"03*]<**%/@((m@kpfgLiQC^Jsc.oC?2s%QFtCF\hBQa8E6/NKrRn:4)4?7h>o$aABo2M<ur4'hGMkTA-Z5<FNCFeZ\M^ZM;'M8iH%)F!`R)K%`:Bdi-#3`:S$E=Ag(?6d[SO5^6aLp.'aAN+[WMSD2?9rDEr=p7);mVfMegfKdK`Ze0Cu,Y&MSo:WWittfq8CH=Jr"K3Gh^e#N'.O%nSt-?V[UeoG>XB9%)s[DlR"3.+Uql*pl7+MA<ppJ3HBqaESra$>0=hc$j(Ykb0b*mY"fipZEA.&EdT(V3sFN-q[WkoD&VQO00h2j%&?W9QYUHX)r<Qc6l7rH6hBCEmT=5p!"JOeN%J$5DF8Q\)qt9,Y2Njm?B1,s`(MBNiphK*i2mlSK_HT)(Fb"/`*lXNGXg@a445gkH%?bbDUg[j0t/U?*YT=4H1s5-tt-Ur.:2Xg"rSRjrJ*ss*MN__%HkEG+M@.@t"VqV+1HTrSo+6F6Cr+9Q#mJ"ALFL"=R^_*@[6Y2Tk%lDV^qDH#UQ!G@ln&?lKHU17b&7,++Njff?NRr0kb9U&Jr3=AEj+_b)[:L+HW"XY#c'Dn9()IXs@Nf3--;Fpg\\>Puj_ookI'#YW@%%kCpY&W^U82/<J?(X8I\m]77$P\H;)d]?K85tmR+T@^!M-U"^lGJd&9kG'f=f.dZ3a&&af=09Sd!1>-P(lWO8J0>F]_k>kQRD'N'%'hh-s1D7#/8$o2eCf^d`a(g84A_aA?DnER.0Y<DPC3.fV0s$m3+ESn=1d(kIlBD>iGaFZjKi?`r2=W,Xl:lW>m!"L-1X-KmF.jr`%Plp4MHi*`]V^\'F-#54rLo'f'&#BMeXH9I$O0!91*OSS%8oJ',RGMD3EH]t=(YRf1-g!e\&K0YMEMr,?n>rn^:=aaCj?Gh,jp1a2%?gL!,#'#V!p?,tMjc$PG[G=J-g>k*')YZ/NSV#P?kjn\IHX;";rkp[<g#VV8m+7kW)<`68qT%%+^R^@Y8rmh!Lj9&Y_Roj!)>egu%I)>mK\+b=Er-$tTpYG[c:Z$BqSND5Y+a6\&j$ku!p%WnSHoa,KSM$O1U$HFC+rK%%G!#EScc4"B8oKkarAFQE^S(&S!:TB:?8J8I%#phm`kZ#-g;DJkF')VP!>G/8$J;0?WFlb`I$5,^/Mj`H_/STog.5@VV?o2g%(17u3VaW=QcY2:Q7c_R6V)ecR$\OAbIU9UCTt&BJ%2ProoD7FOn#[_&R;RO2h.WV[Qg+O=Noij82#TMd1`d8s#3G_rHVornh!4OH52[7_W'GnKj.s;b:B6U`,IM.M-8nGa<NP1#r2dVR_%Y@Im`BjKM83@a/6S2i<1W(uBR$GJZue-K-)?/:>4\*/)L]%aS5C<X9X3r085"VaN>dsB^l_j?$nGM37F]o=NsQ\jZn-[ed[C1pTg%pp=\SQf#sE2Joe6a:6=Q8\^Nn]NpBhep(b8EM\#p!0(jgjPGP=3&+[+rk[i$h6eq[=*-;Y`c9#'!*c=8)^UX^qL8l!1cR>G6b:6S%@9IIHEb2\I:9:jNk*s7NSh6%r*R!$e^I;K<(?9N.j_$E_@"(s1AH&\iPZ8BkB;C?f-:0R:qQ4i[-bkVXG_dT;..e+"P<5-`5@1"_%EWZ`8Pn9Is!?oWFTQ$S+$G-#X>7l$4*GXdL8=Td4@`r%#V6C2L%(\:tX94>+#8A`t`aMd0]Y"S)SQ(E?h$T,npl/Vm&@il,a.VY9%XjSNMV]tasfFhp>m2M1D7g^`_GnkNUo^%*=@W05.gj>r^Qi`0?$n2-`h"]<3FuOA@,ANu5Pnt/HGnR.Tip(cd5N/+])TB/j2(Q:t%1PE(o`W`ZsZ<ZY+<pH1l,LpJdAEC3hViPnA`;na%]bk.QFTrQ"!^Las`'E=<!YeePqLY'lZGqP##N/+k%R3s*3hY+q.'ssP-nSGh%44sTtTRjf3K.,a!p_`A.peJMdfqO+>q."5Un?2]^,.9M#LDDnN_7S:"5!H0N8HL0*Z\,;W6u,Q[@:LaRU/XAi?X@N/>Jk.FrEBjW%5_p=3A7]El?5oF4"mHoHF5fsHRMh?ipk!ZeH_8Je-TTtBfXc(g:5Kd&'.Nd2cCi^Q)^(dZP"`12Xa8jB?pP8*#K`qnjS4Cq)f39N%S$]N=?.l]nC3QCu[`:,e=?3f?H#_TB3@1]e$n/XP#>Y'h`#`>;GgRuE41&UdB_B4Xca%j9";H-]^'mE4/7LPaa7pdc7JcNsX(O]!%5_'iU?oO"%CEh!CPHq^1DGa.pMtc#4WVG;BfnioJ'%>DRU/r$F4N56GO9LERrla4_[o(_&ko'dKdRXF.-t[J0.!gPN&R0k-!0!]@%"fW%S?4hrs5aYkooUqM[;eZOT>T>d*;'>P2)g@29<Tk]G?*mf#[M]?D"I^RRaE4eHc1Kt(k2MS3O:8RJ6<=VPS\9GOh!-YpmFL*O%WdP_GQ:<u/\#/3dQ?u&PCNW26V`Vl#`:%2IQu>'Bj9^qRlMu`FV8!$>ma`1S2Z")o,e90K`N?%`F^A,pU)`HK=9NCN]*hLTc+h2D%?dPVB6c3RQYtV1l@:&o'H]\'C_p$!4E?.u`#?;WJLrFlLeb.HsR1nAaNT<Jm+T]T5=ak,<8i2p3FomodJiNj7!>9&9%)8IEFV/E$%6Jb+%%#r0N]4rr8%#?dF/2%4'o4N2bJ']K7Q432_()Mk[Lh$1+V(3/3acKu8>mGD;44JdBUsD)HL1o"WefMA!75J>)+[*elZa7TK%Xru^]XFW?k5,J^VI/N-,N!aOmA-jr[?U_^#-pCKr%OgO4Rt9la/rcEAQ@'_9(JMcn(WTpo6q!o6rLs^,Pf4O%S-k'b"`c=-*E-R'%pf*(lZeKng,<9s5XRnAB5NQ,F)q3E24sZb?UZmo@Y(fQ/kP5UDS`F4Ug0tlB17bsWKC8BBVN\/+ju^:q:rfQY.nq&S4_tK[8?)qD%)SQ4:r*MQO=]ti?Df;0<(ZaF%^++#k]XN*Co<V,FH("rE*W,\&\XM#1Y6/7Q"\iQTfJo.XLi-Y;fc'PZE#LT"4Bk:;N&DQ7LiLbS%Qo)F%cB9uC3b2]taS[oV.[O%Bb.(S;>8/'8QNiFsVrT$g8CCf[YPOcZ1p>>LqGu%paG?d>Ka;d.e\8Z*oEZW*-4<&QI?9o4#f]??%ef+n<8e%lfnj7NmN.bCL;3<$$D]6eQ=VD]4*udCK@CM5Z7fu\ti^RW09bd/0WIDdlJl"fG1;ifI+UX"C)IoP)#.bi#[X`&AY\Nh/%>CBLQU%mlOBmiglXr>uh0_BSn"m_<EU)9=e/Qq,nX!C&lgrhD^V>E,!*UIU":Iq$sS?-oe2!i/_[e!Ye$Rh&/'^+IVBk0Sf_'$/Y%.TsT79H2&hei?@b"P(G.qT_kOZdC5Z.4!6a)o;J<,O<:9-BP96,di1'W=9a+U4qlRJZ)cjd]d3pFtH,C#mEeU<%\dLari)E.'*PJ%I6>bD%Vq"p`&=pb7Qp.7KehL&1R\)?5k.rAn]@Nl@+A*(]ID@\(Qb!tecN:FK_2)bpUVu6IBYt$MEn%+-!A"7jp.dTTk=4]J,6BQ%O&&E)Ps(hq`e^DWm;#iDEb$o,;iNhg"]YPZ;]J?Tdfkkc""Zi/?pTT6JhI-2A'Yl-BMfY3a951g$$,`LIc+HM6STW]*\8JYc_)b:%rAoY,j(VudK*o3N0]LYs7$-=)!Z7Gf[T,@biRGXWl6UH%,$&YV53rZG/TD26irRkoXW*lm;pn3PCd9-_:<-fEDjVpc:</mA8rb"M%ggJmphk25'6d,s2`'GZZ9$T!C6Q6ge2?UZB7+EI]j=<PZI5IZ`!6>c6rd^-:%i*"Cdr?-'P0=,r[`RO!d_MN!.KG*&"sc:mk!NQR%Qc7b1=sUCL>:9T:]i4eRSeb3>pipOTd%G'8)_IutlAX(@HqA#!"_cOWa4d^JHr](lMe[u_4m]L%,NdUe2BSjVN>d4'aD67-'KAKp%_p[qE@.-4FB$8(g]#HZZll\dN\BV7IU"(]o`d!r5imqBtY&$O'DSj_AVuSqu%4@@<;0V;FUCCADDT8\:LnVf0N\)$HBAC)H1>K@C%H:jr:SAud6TD%XS@I7jULg'?LMPL$=k<1GF:eT=ViL.+#cL\7sU[k:[/&\9'!/,"9.=WBEBW#g$FU=K)6rb50SIBp3i]Db"6Pm^i%/,)o4=m[^3qZIOY#WkP^;n^N?/!-F+j>@ceR$FCCn.^'eV@)_]qVFQq3PgD2LgtD$[+J'X`%Yme4%<6i"VN$\&fUg<?ocf6Re*&_%hmM;gb,LP&/@I24P;bsO_MQ]D4RPVS\;'/?3lL(Cgh2cW0n<ZbZ)=<!+C+qg@PEV"djm.miC>a\OK<c'W/pl7Y92'EkNu4YB'UO`%'mEm\k,Rr1LDNW/806N_W,5nTNh6/SmF=dFFKt2EB<`UG5"1SpY!o/FMVU-F4BssMJjZVg3)\Q6;T&.h(NJna..7cgJC)SUKOc!S%>8QB0Lb6(r3pcu!>2D-KQt?\qk!&OYG^L3]rYfoYl(hH^*V\6lh-S+"[u,eA=K$m<BHKWD#r#0uFQKSR%fJQ%_of`rY+Xr9.#hC&%h#Ym/NAB'Ak/Bd*$oYO0!Y>qpko7X+j0d@%4_=0)E291["]cF,Ou$A=E^2%S)#<#PY$Vp8qYhV_M31;tV_+Ai!"0GJ0WZmWhurj;%g101qHjmtM'mBNR!l]^2P9!gEMPWYR^E@MMn2h8@PGu9>=*'-8i6L%bhlE%qT]"Juq>3^nU-<]95O+m0mE*[%;>B(dpJQh&[8V]'%\FhbL*)73PjGqp":G'`<K\ip^p$;?&(7Z!C[B`LIT.c"J.Mn'8YVCeK!2jR1Ql2!IS9Ptn?k/;Y2hc;Ri?$eh(D_g/_PVVa^quQM%KT]R`$L>e]iBEN0"\)Ou.8;o_6?%cUD%;*;_?>fa`,"]bO)7eq8q#T7C7Wj>%h4/$0B^7+6s+eL&/X,F`R1XL/ca>CHKIf4.J*oC%4N+i-^=rB6&-hh>4p+P6-f(j.-%IG>G(^>VZQ@o"7-S5>5\RQ.eV+r!7@q,'pI8O)+-MV#$;d3mB#,;L5nM=NDF@oE<UGKVH4;.l%O(:(#4rU[8I64U3Na4^Ug_O<1GQ.L7^lsCLmt]TW69X;HWHWb@\<9J9UGt$(]Wb'h]md/:aUtX2TcW]ri%cj-E8a0\h59CJ&uH(F%4HRdhg/Vm@%YOnH3Rd^>WX`Ts'>M#MVX=nHHpHlH"c;jEHe\koSgRnN@_2ZfiI9oYg3:[EWUg1J)1pA`g<]XK@JgsWjI>gHWD>d(%2Y\bD_*7[!nHu3Obodg`M:JL=1,Gp]*c@2dBH7fu%sg42%^nZ+#H=,t)NOW)O:&A\fH\#6ku0`n`9Kp:=h,hU-@=,OG*^PU4Ws;8%6!#0SglBH2*E[!UGt&c'ddNA'!2\+l[)F+h#cJVLL3DW=7L!ilPZ3YlhZmAqJE^H=D;&Z+*fS6C!>-I`G&*_j@Grb1,QeG/4bu's%`30]`lREqNM!NKOO$Xn71jA:!i6c/.r"mEda565;TBq"/VA[h#![60sq_f,>kanol86kBA^o0P,Z3;iP>dgQ2[94HHAaKDM30eAg%r(eCFqS.K@Ieqi%9)ABbh^pi?L;a6glNMsKZu$:&M9g__QE1Nd*$7.Bplfd'X`c7eX25s/`J4NBWNL@I6?CnYT$Fu%c[H0_%>epC%pK87cF/ntk;dr]7SjTo13#5uU@BNa/gH^9dLP%EA**W(B?1HlUX1.LS.D&C/Pep.-H!K4%pWk3Z;;/UKp(U5M6"jm%$&115LfYUF%.XU7Z1]%hjoRMm#<LEk13bM6+7j+c:KM@!k$+'Q917Jd^,@T,`7^!L:Eg#^tM;J<,UF1r@:GM4_2M1/V>!a/6)MPWUl_6FI3#8J)%YF?h'Q.Fl>EfVF4Q`KQ-h,KK0Oo9!\1bd$g5%)uU^"IkLn$:8ca(mo6pKHpi-$sts/;'qLZ[iJ!$_sN+3$u3]4GZjZCEUMb"%*88%1P%b04TOD1062qFl^4-rZ</`+c%5aW+=<TKoWgO+Gtu=fO\6Bi`So'Z&WEt9.8f"mg=o\/_*+,#?HsA9I^Q,u#)5VUaJ-sips+sI%*$gU"E\\n+[gA7WH_9TDLZo>1dkC`"qj5n^L.q,r[no91XgZH>6R=&.#Ct9KFK5[(\,.A1HjSXq)2$aYkH\3GitP<::'Dl:CSn@9%*%j,12_`!+UsW.T.@$[Ba\#@$J[O48bbs-XR,8cI*VK<E#=6M>E/Lk(>8AL7A=o!eE@f6^W^e]LV^U!qVE&GqjuU..epNaEg=B`2%+jOH,8ilhjA#'UAl!.?q9ChC1;66g>M=4+;'hMMu-p3(,+&3rG/4N8?*?n^8F9JQFd/gR8&.m)i`6($$H6Ffb(#5]4MBrb`a1!#[%HU(P8;i-nW%>#tHRIt2W4mn8MhA\QQf#0"ur_()akG'qb#lG[.^2T5UXs5cKc'8;B'9GFKWNl%<pVa(`gD;-&$LcGoO;t_!j!ZZ1%UUbBpn"2W-#F9o'e*=P9Ym3TU``HTJkZ]bL_XeN0$W\"S"W`J`^JPb3].E*L'\@eB@OiZ`!]gkV,gNAf9Q;VK9M'@A.H-5)bF"%7%"(/-&D[sRc6)@mOBBB]q<q%F-e7lOY>3XeoUm;c2CheZ'[*uss=]&dB<1+JZ1.=\I0U"`^<6!nt*E79!RapBmfs0)`0n<-GLq'H$%r;`OG(+md>>s\g+`;S#_X_`X7`3[B5+CrKu7/&r5:S3\Yq1JW"ZYU+oeY3CE5a9s0fX<T?TG8#^>T2t?0Ere5.@eQp:'3J]_TZcU%HecWiTWVI@Cc6gmAE;.8DTQGLp*a?7-rhg\We4aGN8E25"pcZ&aaTrIW'tdaE]@P5D61+N"s/H4?ST]E*MHJJS0WA5ap@qEXfts:%b!8_(_B#n/52+OKbN]rs_LcT:)97;i6t_pHGTW!gq%1.Z<LrQ0:^lU_brR;5!MSC`5%H2]eMnCUZCbj<+**AK%@@=rqIc5HJ^D?s%01Njc<>=MlIg$TE1eY:\5\o&s'NdIhRqPHSX2aD[0[elVHY?CQGT\ocNq1BpUKWCMrLn0FU3M679s`,YLVC$7OJTr9'EBG[=aK0S%[N7"K*WZgEZ\UIL1Bd!&KjHLKm;f0B7H(T4Ql?-q;M,hIcq<X0aFuoC4ts*HAWoH+o#uEb1.9n+P5EceDR9oo4jp)^r]-RqE:g\$%.RGNS..MED\?hUX2#+Sg@<5<mR7qF5fBdAZHqoko4W0+(#&gpeVZq%SPZSJ0`^l<<j>a24gVgd'>Xlb^S^V<X,-1Y1JT7*D<Aq!O%&ILcOOnWW*-I]+AUBP$`9+#B`WGcgqefrj,&1U<!QpU/-*/D&JBuHM]2$PU*SWi?qk>aAoIM2+EEI;1Q-YA7=^D_XVFQL$Ia*]Yb%.DP6]/_$"EPRH3s+IUVKB^MU`S0D"oFAh'Q8c#H"N=L;M6PuY:K+8ZC%.RW^0LZl];?QcAbjmQ]POe7$;'R`T>NAJ=hkYq9Hkm9.%+cH2\!26Z6)0;9:[TX+X^WF!P8`J9b.FF5WLKSh`j[4e51XY:Ia[M5KL<L,N\SpN/SDloCb:,W*.Aq,,eT%dQYST^]mZMV5ilpr3%im$J9mR?F!0O(h7C)n:HYc&0G&5gG84)74'F>=uJDEHRb2h25R;F)q5.duA\ApH@ekdZ_j0h)jUWe6,:l(D&8."%PG*ErI3rB+$1%F<;!Ncd4$00bq][iE]F\ban8TC6#Ve].k^*&sK8CE#cq]3=4Xaj9ruLU=iLql8Xa<*tH51D*%P.)Zku$Sll4*JC%]e,PsH]OunpU%<LDC3Sco!/65gEHK<QL9`!VIs5nc#naXFKi+8N!j>SSJ?37;A8*t$3n/_UR_:t=ja'#UQ>LHFl\K<3QsaBU%6)#=.5naqk?p"Qb)%K0>fL]G3>aY!E5MD_VGAjQ).ELL\q0!XRZTRP),F6_m&o.lbq]gIF9G,QrdU_mDCTnCY^!VFcUKm4+C]!(-*5S^'S)7KIj:1)EDF%6gQpS<'[7mN&ITm>GU<#+q$d?8jajlNqTt@%#8i8/>P_r*FM!g6%Ys@El")>@mgb6RXpN*VeHK8a1baFP8tMH/JZ`K!VtBuk7;VH%6j4jGb9X\;DPJW]k60I#?:Xk9V;,(>I%"TJ_Nus#Hot,^0l\B5Nm^U:P#0dIm-.8?Nt3KOKQl(N3%YW>6??=F5-o8nId\-M0%UVk%7i*HG`V7P-lIX]$:<YHYJ@;Q&q`$<$=G!pl#[IQKXUdh0SPtli!N!/o(K#E-6q3OXj<)eF=lT/;Y!VMNEch@=.*V7LZr-6LTE(af%AsNtAVKZXZc#Kh-c3+BgD4==Rdh0L5;TFYb!S^7s)R'Wn5l8:UOG"RA-NcM_d?,pk#@4Y^?OjHb!0LYK3XP46LLRk,2NMp$d1jRI%!/X-H7Q[0$F#)2Zb5jpWQX>5;Stm'cd%jlYO`X#s78@^%'*r^`cNml*o$M^k6s>t8ojF!m[YG$")('bOc];3]Pka$qH5"Cl0nQt.%e0SB?<`\n_5f1mu??[BT(\?UG?Eh"u`=+poY<K&g;7JBh!g13ujnHS5Ajj@iMVs`L+n&Y5HK*/ljfk/Zr#%2&nB$%g;rpQi"GDrn%4?CgrR-Y0TNgn;mfjt-;DFnS^^^W!bNMnpohmAJ=WhjuWp-2@<*J_8n`1<-=$&"b`Zr?L0pMGp'B\:J@h;5&'aVrQk.A"='n`A0/%d@W<k2('+0Vp+FaH&=cQF*_mM@mA)=kP]%j*Rbt1\WM&^HjT17UTEUuAhPYKCX82h/l%apAe$eu6^"JnfZcJ%QCX)]T%9@.M<\`F%GFREYe#B\^]M6#`8*=KVk,an+3glNAfB?rB)L.ug3JB,^HTV15UlF4pTiAj=\OEMn_m2-Y0YZE]&?af]l7kQ6DFP[e+*R``5[!dE%rm&hl+5NmpNI>p/l8nVTN&-%TEoD`MpUD]C7c;Xoh27t"3rpM>(c)aE=?-=.Uk$Ia\5&><Ft.Z#BVHLXLRSB==bKb_g04q*'%%hE%bquq:8AjL:"%%/j.3CB9&EhV$g"R,!$t4+<`to$-]8:):!)PsJ=[P5O0Ho.OncJufoUaeuVq/qa:%u#%#UCbPfFO&d+sS'g3A[`U%fV,>dTTa+?*35X+k#&Y5Nn6j6+b7o?4fJ\EZ#5jGB3R3CnVG0N`M'n]3\)RP@_65Cm;&!%H^"UI!1cHO4@h>[EDL.a<N8!6MXoH#%Bd=EC<uFu;j;<7rc!99q^="EGp6`O\0K@OB>!'uU"UH^0*P(U9a(:T_=o'cBZG2]MZ1Br3@hHm8!a=s[1%H79@[H2P4F\L7Ds!V2%imK_c]5XCcfQ\Ee:ad@qnXRR9eF6/k_,MJ=&`h,*Q#XSNWSSTi*hPp8UgM):)jT*&B0;4c%#WMe,;(AB_f&;F&\UEQ-_i/!@GEuF%4$jCW(9`/T8@QP+=,a.V8'$&n(;-'T-t1(P1-jf;Z,:`ajc^(HW\;0OZ5lq_Uujb"Kq*''*W:?V3*B"5$N5Lc*^c"78&rL-oP%Fp%V$BDcdP"P:M`ciH:td"UCORi.c46ioNhNJi&$R2(L7J2<6Mf4,I4,\dA,>pM(+N&a7,j&^WUq==-Puif"%$Hei]t7$ME1a7UV]@@%1,k+]0KVrC%uM"8(>!c!FOhEDJ^T%/(>D;?UO\'[%VO/&H"eZAq\34=D9\@[N(=36WnA`nRhUY]6tR.V<:CKQ(5e8ZdS(I(Z)>j,%@:5dM9e,u/'eG&AQt^G?>\7bL/P/bmIGI(j8EVEKa!Lr&9&*F;Qoc8cHr@Zqm\mdYBi&j-ZX\n$3!,lOB+,(!SWWsG]#okFK<iLW%d=t\H[]gGN.^=6UaI3Qsa29%C57k!_a;PLXpaTW8-Ut#n\!Wn)\&GDbaulu`*WU33-1tcX;p!2ulGrD2Os)8BU-;qN4PGaQRnD2j%iF8!#4G"_LVMf5M;6KD.F6/BkZjUh`osSA;T79h5`A&j']R?b8]onA7:;n15'Z"k/#NRGQI<O75<\4TRVHH(mHp-9k.($?YT,VWU%*p!'/Mr0UHffVH[;@qKVAERZ'/W(?q9hMh<,OY:V`oF@dmIDK7F&J`X$-jQbmA_C'_#[#;C[i=!KOc__4G1JR/8jL^7A=XVi0/cZ%)e,01W"LtkM4*_W[]&[1c]X);D6R?Fe#*X\0e)#7Co6P/#MsDVp$`,]WbWe'N4^;WRNm:c7Zh:F=T]]NGP%[t/dEA@_hGSGK@TG<%Ta_6#_6g#,-dSPfCW[OdA6F@j!!_k[XT_8<#!s'&&D%,@1H6"G!MrXU:8_T.Xm,[)R9.^4*C042e%*c9friq`FcP`I:&E5FNT.3.%GY"X7S\lKZ#8mUW@2q$:bu53?,4tSf=YL-q7uL#4Q1J[ledr.DL\$@;=Zcm2&r-s";eG.2K32tbaX&$OBJm`fB-H8rHln>HK?==G%IG!f9"%I+3T.aZX4C4uL,[2=djL!eY[hjgF*i&9oJ-B.?7ceu]H8=1deg0%eDQ$F?4+YaY5"\u\66ck_T0*=1SQqrT9*R.JeqtbF%?oT1P;NPIuI*A6%.6tuGLHWoO3M\sDrYkL7qP5$?XVo\Ni05^43N+B?%#`EMp[e>>o>[Q(fV4a20UooC0tuoiQo-cjAJ$\ef77Sf%)&.(1@)+mKjHBfm)pY&A*:>kGh5&\3[7Xs%@;oi)32^XP.%(NT&=u?"PQ&[$jo0!)RRLd-blE0"S*'#1KlfNd!e:0WCoU)]T$$q[%G&2=]'JS*n3d!tEaLPMOg?_e5s+4JW:]M'sf4@lljmc='#U!!(IQUaA!s"8VS\#V.?mg`&n=FfgarCLlSVf32nDro4JX)9NVJ%)0%%H9,[G;N\/&kikGm0ZE&<0.7?)bh#!Lr>O?#*m6<L<ZkL%r=7L@R3XP=B)pXAEZKBL7.V18fQi="p0f)T/Z,gqf];A$V%<mWBgsj%n$:8UZ&Ff$?iX#FWkp$7^pLm9\=p4gWEL'&=SCn4*HdG?=A7kA4Frhfmq32$d!6+74L;=f>P+'%"WnNi#_3%n^Q[[;"*ls+TM<*L%Q]Z5EdGd6mN84%TobrK';CcLed"$nN(O)%6gZW>FC^b-qOOnI:UVB1c^?Do3F,#l9!8rDEV/#MkF[hsFc7D&r%?C_b.2??6TZmZ#%GPSD,+4IApmHncB_u\>i;)NS@keU]iau>0dWFe)NW7N(10iraY%5^-W$<ZqK7r1fi)D.C62=LC>$gfQ%"!]c0)EEnGOO\QkmPq]T%]!Z^G"pNiAT_9.1(D&@M5nCbZ;*6Dl0dmqVBq+:;jT'JeTk!:CN>t(Fn[Xkj#8N@1U)sjh&u7c\d7ONY43hYhWC%ge2)<aH*ZmrM%lQaE6Mrg1s'Ds\#r>?GFo:2i=Z^_E6$huF,)?;:uH7-H3N-a.3P7!c_JmOSlh!r2g.cR"_AP>2ic"G$pQ(%4)=GQEC,jKD"lXi8>%AFJ]sjp*.-O^QDViM*E/[(uoWk-hd<GHfG78.Yh<Z`kEHSN%\9rH&HaSe;-uHiNb^/e3Vm;\D>0W]jF=$G]7TVEgS8cB3lioYB=k%Lc%36,G4\qH$?d\nYpJ9+L,4&`3K>GAN!VMCKMDq?cH"1FWV$X>TO.pp`5#*De!86Ei?<LS\`?UC/@JX+=tNW3q`=NZ1ZE$qWk%G%[bL*pf;bk85?1B/#H>N0pcTVXo;^B3f;OW>IRhFM+L1'G4G,fE^g`5BRR)6(5t'8u;t[*iYS<T>g]l;o";si!EpT);ni!HbGeX;f%QU>14D3Us^kZ#2QLfR/1]CZrEi0ROG*mmJkUhq!e7*C!K(BXjaEqJdQDgpJtKQpbZYncfH_r?XcEtj^q-Zh^X&D@EY$PDTCPm"LS%(74.8lGk,e@EXL+!lp3$*A1oMW\F\h$"+4!)M]\eEdj(]=S1u[.C8`M(,U(#T3;#qVTn\h8PQ[cF%/&,7OT2\O=7;YW\Pi%O)3@0%#-jJYK.NC[;sF?t6C%;DFrVPR=_Y;n)-@ql>k`<\'+fdeC<7]X+%9\;X]kLAl(SWL<GPXoYF*j;O5fDM34$\HB-<DF)sM_d/6LQ0%Zd393)f4d+6'ENu/ss.9+sBihI`o=O?8e62OG$9t7Kp0ljDmf/"Q@>b5dnRbQ3]SeB9<$L\3r])$Xf2=&%*f'L12kgW9&4^%\'L0%55\llUk`K,[-J6dPOIPGF$+5Lc#g4&@1^;cA^an$AZ2f!(mf%D8>t\oOYF@)8ai0#IH['=#qOP:F_ga%C;F@\!ue")n(\POgum4'%G(tM?1ABt/h0Osr\g+NT04#q/F4f>D$"0[ZT;)M[d!4HeOiI\="iAHsg+R0<f<\nO^:p=WPcOqf&KGY`7Z#qEMPH55$Lgs8JY`r&%rW&[(P5*XjeZ"7R79/2CF`)]D@Nf#`OPgok7&Tkr_c#S8JHVr0A9%5m0G_g=X:_#?U+ifoEm+SXkFO:g$7K^?.B_df`L2E#Nu8_^%Sm;X9(e]j\UO-/2M`Y"1K9(P;:%$gAN)fGNmHps$fpkY@"2]Kn-!p[_Pu$_*q`<=()CC2%!\:Dej5rG@;N!>s?3<*)"`WVh6+LG"%H6H^4C\PmiPuhLQc\B@mMViO9'Ks"9PLWCa-,6Q]4A;/j];EfkNMq6LUF$p`#9+lBGKa^d[C8%Sq,2Nc(7#BupF@$2!Fa4'T^7]^%2$uFY@/,8`94u6Z@Ep5SL2iTo!b%W&*DleR#!6AaVgWW3"_7Gll3fN+Trf?qXaSIS>Jh4X$Gr>h=*gG'NO#5[@0B3-o5'.oNI0Pf%c,&0SL^Z#k6O$i^A3J]f#h^o`R7+YL3dC7)]:(te$'tpdh<@U+hda(:)cXk(h^9M5@[?mrp0$Xdql\"QOB._apKcI/l,/!J\A)sk%:^0U#W$1N>@k%_[E:*O/:/g:@"/9;@L51LS3!,hf1camuNdV)N#!aSCc&A=./e5/h&H\<BoK@J^"NUt6?`8MV$c3=*I-U2[+6HKf%e@T1BE@;$Z!b%"EN^WUF"2'UVf?W1[XOu,ZAk6(,mGnGj[KWQ;K0Wt-;kGK]loO(NI-h#hRo9LE>o7<@(`GQ/C-AsHK<9R%d>CH!%`jH=DN]LV_o8j%e*'(PdAk`-[V/&@Ve@28#"hj/JMbaCGZA?!97?T*H/ENkC.mgQOEjciqZh$.1Ss9p\)FBK0!&gU',XX*?"X@7.%B-5$X>7N_U&kaSGq\9JB,2Z_^WihJoejc5(Z--.9V2!(NOFp4A!f4@]=sF#UJ=N`O\8SYre>MB1Cp"/_XI?L-K&n\g`[<GOH@P7'%KC!.uTE7`>8RrGGfCa!M)`)c**l0=Mfk'6s\Y!]1Z.Bk<mVfh0BCr1!?WuX;=$R\<N^__o7u\7IrS42r8lC+d&ErakpVp"S\PujT%MK?)qV*0k9#+OaSjEj*jgo'?G3hSH`lf7ERAj.Jo(C4m&dX(W)R6p;^KbZ1EWC^*FMg4B)eU;Ss*GZ[-)O-/)3cG2B\YX\*Rs(E?%14mN4d,u^s#[^4>b;"''jJO%F'mP`Q7hX3>M"]1j3M"VT._od(VqH2[fZ(.)Ekb=Lg1+FKP]`34&>$2&`'7(N1r.SsTqDs3Ni2+b%&QseW,fY?08H%BOd&6KG8`Q#<["d6JQZK8b2.Qo=SjJY9,Mgu66g%@&F\#f*,=OR`%QJ)_8Inli\R6RK"u>F!oO/2+3,ZVZ[pG/h%Xp^tKDIE+$g\b>Ml0/DHJDfe,##*>5JHchT/-Q>=KJLg9`],4_4_9DfL29bM83k*-:\Xhgj[ji_`uBgY""Y=\.RTD++45%\psaII%c"S^`U2W6T,YQfA9T6M*Ed+m'Vk4l;&7`/]IBn6'$1d7]5#"hokTa^/r(iX"#OU0m8S0ZI0L@!E>ImL\#g$+Xm7DcZCdPo_k/k1;%HC*[18)]G#5It&[l08!G[tq&+Um#RuCt#XTD0$#F+^71L<As)q]5ON;]$)N\cgJb*,7h!_^cMeuGZJks9e"p7pAQmN_)F4*D//+S%2VXHIVS?r2:!i!Ph:t4?D9$da`&'S*>^"r2ZctO&D5YC\S8f#jSc\_;B2b422f0$)c=9%"nfB=NfkH@+fb;IE&06+m>kMu6@OhRG%="]f$e@9=ImJ4%?/1BF=;n,dMQt<,+,og4V;6h9LXD:`ViaSB'8+I98S'?JjPA]dr;H?p2,lNW/MU--@B/AtB)qjp@YC&+b7ZH\:%N>\8[WMojoLE5pX&UWmc`:@u3<k"]>f]`n7GO0q"LAu2DX+L@!;HDM3fQ1D%C;((Mitn+Re2r%\c?.0_L]ft:8oqGVK!O^\;]I&:%`HCZt!ta=O4Fi!qcA86f>ek$<Q$4m!46tD3D\BrIUt]\,Qn-/S"/2FB+q$So*bie5hqR<<ncng^79-;pn0C"lX&%N\\7Rj@%-Htc%?iY:m4'2nYH<knt1iE1o"Vi]VV!J5<O"[P,:hW,(B44Ja1Dg+f:o?<PD2F/<#F'6;rAEoB%$lio5XEpl'Oc>Io!qrR_Qo31A)#_.%$Y&/4CPn4_6XPJ@'\:[$dJatnqohsLlk&^A,Tc!T2QU0cSfu;,]I=n4lU&=dgg9;KN\H<#-EP_-?U44u/SEb]'bZ<[NECigR`L#Q%B\?l?F-5@hp7lR$UmU>S4(WEL/(dNII@"Lqq3M5p3?p#cO"Vnd0o0Q^iNkKFN\Z"[(<tL8[]Ga:6LR]?kbUQH_K_5lWH9sN#mcR!%5YW<!).]'^0t<.m*22nbgUqSR@QLY4el>M0N3Xue!H*_sc]:u_^Jqkf-fF:EH[I>;)t</tI<07:e`k=Ld//-<jpHV:^qu]cfKVTI%TbenpGJ#_,S3/'`c-el2H8&<U%'mV.$8t9oki]<k#3"`;X;5Yr1O1Tf?A&?TD9F<'knP&QZB/Y7TEL\UmPDX!nM]p`Dtir#$;;G]%Hj'C5#DEaE=C[cD,?04#h`/`EQFBQu(DFnAb@pMAln6Z.iXu5,IXslqAYq-];069X<`,+3DG^a,M^p(^W`b)N.<O`pJ96a$?@9<T%:oB.IGd;5Lf)_$5)0<Ug^#PHL,6,0Um:Eu_V"&h_WG>P8m39@!StsmhR@Ki[D1hT/VtcnFhZ`[/*Mb+6CRKB9RcTkhZb%71f849t%Md6HVWZC`)caF"QjtIlT0!]&%N/5<@EYcSkfV-)_$C%`i,U,D5&PF:6V;qJM(Fg%t*-bMkO9YHfcDk#j5o=TA'U+Dt;4=8nK0gf'%1qK*H>a1L87($ua0V!-Iqn+hC,LC?jlQ_bnlaQ[P`?-DS4q"ZujXZu8mrP!a-oUk)!Q'r?FsINLA8'_EQ=9DWVEk/mR,t2hI`lN*%OQV8pO32tVZLBeAi*heX^TrpjD!I7[@P`N_",?WC!-E*jp3I.1kGCBA5^6$2Lp%9dTPeOdU-qj$1^N>_23WeF*%0ai`ijX#Eor&*%X>qX@_cH_k9V.<K%;j%O1bhMZH('s(%7J>"m^%o;%[G#$h#J;Plp=%^YY`hn4pi'YnUjSQq>GnA7N#/l"J`sSTY,^k"9"F1GYeBM%k58HqV:,G)AlN1I!9;Mu1>=mgg`;$\ONn79U)F_\jGe)T=RNP@INnN/j\Olie6\Z[\KJ2%*EueM+;AOf`Du)f@<__3U8S^Gi.nHJ%Eg"M./,HhmZnJ[^8n75(8%eFQp!RS'f&7%58mu"5=>FO-&YOd:;lhZY&5(K`n:U&U@&=X/.s"r<oLCm<f!gomY+BL$Xqnhh]36V@%OJ3B@WH5K%DeU'eqXT_G$jAGZ\,Mi@BE$j&s1i/AQ"c=q/N)%8:su/1VDZgs21ja?p&Li'TkXn$0DRW`]s"!SUPt?Fj[h6:dbdrn%%OQNB9r9O44K(Jd0e6IV+,sE+KJ-qKc@7n_*r",,K\=a97dN*]#*qik9'9JL2h/.9j$gPSgncHr!QjAlLY4LDOK6[ua\DUO%KJn#%K>Ka:C",HPo9`cMc'nCqJPg3:#To3;p2u&T\bZGjD-_EP3C:JjHC$_"+Wi*Vq_&4j&H\^jf(CZL<Jl*[&KFJu$Wb:%A6N&L&J.M;%b!KA\eRXZ0;h\#BQGh.u6=4L^[?SM24t/P5QH<G[Vsl:eekRrc+'BpPN:LMM%OrY33N]\1-G*h1'Xg4U]G+jH^Qr]P^BZ[?i_GKE%!Es@Cs'K3d\g'pI>b@\H@K*>2QE[AEX7GfpO0E0,"iplebHe5Bn1DA%ZYSqPA)?'b,0l%dhJ$(8==1J_.P!/lO#Tf9HF#p0*-fgD%"D6i8;-GBji%Cqj[76`q;(KC0qoL3u->?/(D@-qgJhTb#.n>6!8D9BT;I/DFgl4epC^S#Cj.1Kmc6Pk\j_PLZX2;KBZ:nSA27Hu>%SiW9D%17_oT^aWgorLo#6E9l""F%';Vt_$@oXjWCe>\s%=hLCeA']Hlcs6I5-Fclq?__2fY,oq1l-r1h),Rj)`5<=GYN%cUHXJC^%LZ9ZI53TOQq&RJ[G0%W6#Wt=nX5RW33esI>F*^O9afe@[+kaGc;i3-NL,u*=a-8@Ebpaq)0o5/'/ENJ:E9o')@dY*g/.CQkRQWI<%5uFd5`E"HI-g,5)(DEG!%aV+c508FhcE9aHA,/)"N(OeL7kC[t3*.0YDRj+PJjFAoU[.F.IQUW7YBsfV*LhCabouYldSBU&.NmTO%425#$,Sfde.H]?_6`!VZB"hRYS9?o@QoBqchO-[=@]7ngRM^ICf'AO!Id[@e[FYr1H@+!k-F7e__->TFC8#mG=P;52&!M-RY)7RR%&j*!ff*6pL=/$;Y6=]0I"2tDC/XVB9Bsg-b:T'e?)+:A:e!cR_KjKbL]>jma)<,`5^7`EUE88%)V+D/*UgK84S.4M<lk[sh3-4L>%DWjnkS(b-sTdJu<i_knL^UO&!G?1t%/&Ooc3Y1-rmZC=11`s_-&b611dhT1t50T2AP./e^P]esE3..p=%ae;TE2[(bNgc:!iMc9f%r2><8A%E*thV-P?&,bfiM<p=+LT3/\\ZHdSk+$.CeNU?:m'UeLi!8!!)b/,*1`%T.`I3$a^OJg]T3S8*c&6=u()9u$`hR&m=6(M7%45-2#OVgf@GqJ)VHWQWM'c9+3/WSJqN&l-50M8VL%e9OP6>&Gp^@UngJDc_8]cbLn]@'2ii[cLuC.=[N5HnE>OP0I5[*Vg46WP_5%H\q/>Fp@ZGlE5C`EY&j(OI3:N*a.rQ^:-4_1f2&Cj^N)nlG$9JACMr47_6h5]i::T//Kq5E4%Jl6(Y(0&VJuSF.2]r?DIH/?%3tO%JVd+X.MDGYShBqmNCbDMH5.B/'.UYP%\C06$8uNU5KqKT:=O.K;Y/CXKIPZ$hUIqic#+'f$@A;_&eu>%G'2:=<T63n<idE%HmLmq%Ms&=XX';!C3>)%:$Z2o7>a[/A7;"d,?UW"p?%bT@B=#/78[&>9f;MH@n5NlD'JCcB8=>E0"gePi%H0Mf([kq\";c(?4=uu&(kli4%d!BOdi2Ib'Y,%H(ST&4*L]A\m-F4E&fb<W['68G!^hNdbr"Aaa:\lI.)fPH`lNjFQE1tlpD-IZg.RrjV0^DN'-'hSJ:j]+3Po,eP%]7k9//F-mD#a_0gA<"C8f,<4!3eN!fh9D@RgG\+:-t\,Lo[dWF'XVY2r$2PRR<7KmXI_)A6[=lKpBB9[hk-8:J\SAZ]G:9JK[F'a%.Cj)dik2679t2np=.(6Zpejrd,+d#'",.TJ];hdpVXA@`Pb>O@+fNSqm0SQi*8I'qTHijq$5!E"!QCM&_jd'_==4neLX=\IAfns@%Zh?Sfs13i$G#%2THdY/fbO:/UG^!Megh0PbGP-A!B$@m7gbF>NI3rfS!B_R=A:!r%B=7e3Y%?89NE2DuTK)Gm6LY^*ZAB+(<7h==%=U>k7>"7o%7F+I;rEu%U]9P'a@[$1O"TZeCMu&rrik!c7E?DhYAM?kR:\.Z[,-D'O04/qZWh#/N!Kl1)8Y2rVVXZZBJSF%@>`L,C%7bq4rkl'N2Vm@YBFOa+b6%m\A+^\XZQ\;fH)ne:`D[)*jYA>!cRd1`@X][(+aNY*UE?No@"!i&F-ccZD-FAF`A-?BOa!!-Ycs/(8%!YT,4#.kFX5]JAT5W!Df[XL/1VRh47RY_LU:#U#7]UtGn_Fe5R$8`Q$U)Cq718NfpMe8fi?FH:1d[1V&L[0BpG3X&0q_F2iQTgFN%+?3Ak'+#aB>o!nb=*n4[7qd4=-Fqc)VUei4K:@EQ;V6LdRG!h/;tllXbt\+a&3.$WIfmM];o1@u1GC?fHeTtbnr\KNIS.4S:#5&<%7,e`o6l2o'78%V@QR^4<P:=JDb[T&VjJ/hj&SLgfaTUV!#YQto*E-Me[2'om%@YM+mT26pZn#,?OM5tH(9/!s"SjX*Ok);,AdGIE%MG#DhqJ0(#Z6W9E7[s/&0&H(G0dmf3![=?$_GiAVZP=9+nH6bFXJjIV^>@c0%mQJM%#Xk@:?Ej4NWcdB@4p&(P*<H!pjRgE&qAs%%T"R;?8))iDBQHF96D\rdRb`H:3e6-bH`Ud7K!?C`4M9@Gg'H9fQ8$O)iH*q=)Su2Gi]2POiY5N&G5#$p#CLStPH0(V3._!n$*a)O%I`SLC=@S`IolQ05mY.3^,gL35h]!8g';32</(`kTFDO%T'@'G&d@fB]FLBE/YKs6&kEm!BQYI*XH_TP"o)RD^8ZP;Q:P+G&79*%,%ZXCc`8#tQV.D(*aLhKZ1>U$PL\27[N_K*!pHVqJ>[LO!Q)g"c$(hp&X1lC*N6(R"Xmd$i>BLSSJ/9S[-<8B"m&Yk:"Zj#dSH5H7F%cURL%=es^FpF[/p*3kHZV$G`-M8<g7OD6MOZ6u$r_f')U_*BijrEq/_PU75I>Ku8$7ioR8eZ%#%`VWE$qC7-a<9)kIm]MW-QO>&q%X1ZmkY);i5/m`7ncEtg4PZA+I6Pqr*V32e+E/Xqgd?O&p36:9\['+?r.)>#Z7@DQIB-JHmL]uP`\/`!l[dM#-E+rdT#[nb(WW8g`%O?hbEC3WIQ!`"%U-t_H!gJ5QgePLC.kKW9+-<gXKZPa+;Xmti%l8*i-L+O\"a(c9?+P%ng`/Q>l(TNga<L+6JWh?#(=t3S'7$k^&%0PUl1eER<T<L=>\c\,G$"]!n5$6b]&0G#j##o*,U`7pBAjX<7'8l7lqCIZZZ7WHGcK#m%FHh`&_^m]iX+`@.#<Afgkn7krlS5pS9%(MgfaD6/o4]*'BpCUocG#elPYVWR&aTb'XBLF#$^ZL!80K_KiA^d/YlbgHqt_(>-BBO$oREsTZU[RCAcE34CaSmOW[h^6:?H7W`/%Y'(pr<Mfru(%iDQUb(:*`E4CL"I<COAW2-Tgti4mTgZXtaaDh\cHW+?66dbZAX3]m+H%u@UlCoU5@^0f7mH(Wd3`:h$5iA=%c'DW%T];+N9l8m_T;]'P]pa(1k[`k:Ym![i1m>WpWr(6_W$X^j>Qb\.hObKd<#6&gTFm=n"P7=NZBM=:RPSVF5`9:(FXC3B&DR7+l4:2U%0</:N*0Um7Yd+S#m87j`(>q*;:hKT%:NEAUTfU,<KOht1CkVH&,79t^0o+Q8,*X;<5&K'1)9i9&Go>\_6-a$hgQ..P4"">2a._FF%)`RRuJiiO'Zm??0Md8l7+jii\[1bQ.Yi$%NSG?UsYGtU%.bEF'1TE2oQ78]l'"\7\p.Yrbp3l3!p-do.*'AGBf2\M&f96@i;I)LK%a]YGSgf$'f]$?t1`O_N3B#EDr&_chKnT/`VZ=:LeE9QP6RDlf98d^!\Y"&[]:/bE]<)l_!\]`,A2YN6iFEnY8*1&-pZFt:_?'MYj%ojOnVg,>s4#nhUPRLV/g[2%MD\QPBJ%,;GI;+H5<Rr#XiPA"V4O=NfK5*4,\c(VHfU:sW,(eTan4WU,4Q=:=c(l_)/.6^tg)l02A%DE1U,<qKDVIYB<R*s?Io^p[7YGaVJ6R$bm<OtmkT_`6Drda\F.1kmm!X8.(20IeauL-j0^Q<0L_A'J3H(Ft%?qtO80+:>f0[P]7,%'RRsb+t9SbJYL4a,<S?3FkVt_+*0IBd=0$LZ\%RFj&ssCjZ8D>[!=@TF?a-A&30."'=R?cV2Vsse_Ke<4qPq(W^L;<`&@Fe@HGSM%1^_%hV$,c-2Lkc79\$WlNHlcV>/l4>M^6#[8[!#_]g3Pb9QH26KqTBtDnU6)phm)k<.ZnSDQP<a)WNa@7$2E9[`CSN^L\+n6qYp#%j!!)h4Xig/GuG#dXDNp17aa[YO5aJR&0b1@3>5,+`.]4k5!RKnSnO*MfJEVn/2F5*8iFO1K&CY`^)qD>!W^Ts=Q$"(P7h)O]5%ln%eAus7Djj4$L<W9J$7;!2+:tI,->6`S[oa)6<Ikd+fN4M9S*l)I&4Q-FGB[VYdqZe3YcOOVH.0-q]`G9cAss,dr;KP35"77A<El5c%MS@o+jpXqj#7@5U8gFuPd?qg.j\o![P:;?/6'j$JG<+gtMX^o!LbdqjPc6Jde7;b>hc(]YF&NJK1cM1@kY1)!Aa!,C31s@^%3u-h%VXo41q3Z!EJd)>?g%-"$A2<j1:Lp`Q[-kieErQ[YINE"9l^Z(0<%Fg[JZnj3Y!Sjf'KK@%C^dX!W4'n-)(pijA@$gUZ\%0l(6uQ=%(er>5d-"cB*`Hs:+Ut.Sn"Ch@<rWa2Eh%Rh3+sn5J8qK;5Tne*&t#9V>$@'7`^gkcC4aTVTNIS#V9fK"PD-T@\SGWM3.b"f4(QMc%P<.?1Ah*$QN*L^=+pC:G;Z:gl3&KLdGXIna);^&00YJDC#TbGnE9!P1[]d<"7cKuD&``KO$ghC*G$V8;G"Et,Y(c=M'=iRMoGBAl%YVWe2kdb80"epqFFjS?]BrB+LMIk"r,rCWW@-/Y"GhnSf,he3^9`<4j)5i<[5do/+Mr<I;/hj0Re6<qlG#q1LKFC38O0)^N#Bn4!%rT)5;h@EHS_[1qP8YFr"7-C!rf2#`)Fe$<=[&9B(=#<V"C`dcEZfte'k!HIMV1:.51>);=YQm!5hSTN]=Is%W,3D,B\f@@*lj3u2%VG/ua9Fl&=&KcdVg3JAQ/%f$RKecEg18akL[P],Pb_mW%&2_ub?ueNLk>[jLON50'%5TscBUkD!d&A?mh4%i'5i3;I0(_q"5'3A1%Tj%iHiSc1b;s*Bb!HXBGkG^+/qG&Y_jIV=TUCn!^iGWp2kSJ0H>k7Y%=$3+\.hed/9<O5Jm#4="g#Ye\)p6>T)&(8iP#5,I0pgap%H7=!qS&LT&+OKaESpTL.OeL6X?)G-r7h1-0aDaZnT>Jg0Mm(3X"jJ%#p[r`#A2AWNqjdB1P8j52]pd=*6$(>o6>R3<8;j['io7-R%aTe@j't^#!']$Un`7".aX);D+(ffBjI)uJnR6!&ZQ3r9(="XXh\m6B<T:SF#"_hK#\]ljXZUHcQQZ[+JZY`61>^8))^.Z:r(?ZI8%^*GIg\u_Q'R-Yp5_!;YRiJ[$%K];'c(fNiciq="c0=C68QKoXE%2;mt3e^]8VY^a-D+EB(HO@q:Bn;k]'_bmjZ7*FZbX[S2]3(CR%i;8fhA+mWP>VP8<5k%Ks)t_OWUmRa^CeF"+gY,=D_O,o[]tp.120j3f$iP3#$RGP:qSc![@?qsb!c'.Om.,7So7KBD06tt,k@g'U%PIYd0Qs+J8n6W0-pi+.-re+PR86`V)R]BJ)iK,n$>ef*DYX;C2Tkk._!2;S\>a"Z$F-fu"EF)AVkk"tn9E"Kr$r]]HYl/Wf[mF3D%T8^OQZq>hR$YW^6,?5M[3AZ`1\Jnd7dCftflNK<>*#hE)l%-9"!GO&$V0]mQYc@!e6LRbA&/X2(j%sk?;I5WhjbFRPd$,aLYY>/H%D_S=JW?oS6GJiilom@r^[sF7q-6fjk*@7C81!rnLE(;I%fX"?Eg%'Ol9%Ht^4p\r9$"Z(#^5Ri))fo(.H,J8LhH'o;jJFTF+6QKV%#39$<.)4Ci[BLe6#]??g%<NX<dHnN[Z:SNM7T7:$-WHK\-5`UIn]/I@Zo"SE7q3O@U2akO(#6-Y%l8``)b1@d$lQXBN/_9V9,^\2%+g_V<eQkVK[6GE)9=5oaXfER[='#D9e9l@"_>k%^i:Y]up<W:c(G@ial3t("=[&30484MA3Jau("9Phj&@g8G@Z#f/dhGad_4e4N%;TC7BrUX]3"ROTD/.Q8^N?.()@L`a?51nJ4o$CJ?d:r;*.UT7^kFq03s7^t#gc?Im*'G";(sJ%Bm[[(,WoLqBGT>W]'oTnPDkTcC%.^C$5'*K7#@PH:/W(fj6\V+il*LSqlMH?Z*9hT)^DmNfi?irb3)-PGZS258f\-S0_^-@R\97K!)jP,UjPRHrA8p)Of8u%Pp*[+Q!%bt.YB!U#0q.ENq?e_:broo\gk:OZl,%rM%l'JG2h$,0'7TOHOX6I)t+OmN*cA)4U)G)-E].2L:@K0M8:@6p$1k;AX9UY$SmS.cNB%Y+L`Cgu))->X>7+i+f\_(7;Sa>^'+Y>ih;5%%;4q[5iH#J.(mr-jJ]\lDF8Kf1nQfgfC3Wm$XS8(,l\/RZ=PbY`?V<7AJ3U391EE%-b?N%Tom`2G:I?F$<V's$UlE43TQ%]_37rh5;Y5_Gm\SXkpa[aVIL`D6>1=9_H4L*WS">Kd?9ujP[0_b)X8-`p]Fbj]A&,YkUPUY%cWk4bniassCPU>hnp$%X`\Be,a0@U0_Z7P5ogTB8#u1(d-AOhN<8_(]a#Je@)j*aV+HOOAfQ$2XWZ>e?B$H[ebkjR%De9?-inOT3%"K&)b4_neo4PfNFB]e]q!C#@L]A)1Q#V;@>kh"YI<TH79Y`"=!$PFtq%dI@V.^F^6Uu,E1og1AX&RUpuB'+Ft::[]SH^:US;)P.a%3^,ciI+MGO@%hGgTJ0[am9]'I>a(,i4A^!L6"(6A4T;E3@3<UMe84Ii$&W!u:`*nNSlHDHg9)/=INf0+o0LdG0?h_E>EfZuJE,S(%_;L3>2?L8.MPiVMk+8k(fD+b_A#<.X2j^f+E3;NDloGJiqMC;jn_)%X,DbTo>CAt>Q:PJh.M["qQ_AYY!)s[!%1:*tq4UgE;E?HM%ML_d$[0"-@."lSVfY`N&\Oikh%Qm6<;#E#q_[N@6_T2iF3D)=':W/(6:7,j;)<JP$+]C"H@LC/gMVaMhh"VcS9L/22)]n`/W3#+H%-aeirotK$DWCg@EO7"s168iQ!rq??]e=VT%7[fbF&Y:C#!79hg)JTC4f]_jV`iY/qAXhaFhK#`mN)0X_r?.?OASecL$9R*C'Z7*5%0`aZLRVVkcmJ<Q=fI5klZ/js)5mSe]`"`Xu.*`A9Wpm'gU)[$L2)gf6D$mjDco>(J$A.XXj@V$=l*BZl"VT-:5m_%j*[h.F!0+QR%!<lS.N"+qjA@jUIe</SMqhIMd/GL)(jE1AX!m*G>.-s$>ZP6H&$t6:TU5[37oRlL>/UsQWO0BV)g0+q$9>B=-'aqIFH/&9C],OE:%_#9+?H;=A&M(e#iWBqOqJP]X?4t7=_Y2uEhSm]&u>_VlR!:7Xpl%Q:i:[Z,U.DUB0(Vd\$07SKM(\n6ds'.+)Hhl&BJ,8bDrSm!)%HboHjro9%mdVl:\r9_\tnqYtV>-rp-//CEp^KJ$"3uJ8:]]uX@<oKdWb[ALD'ahUBRI"solY+Eh5,u3<;\T4EDmT.>-h@qqalLNl%Z=cT.]/a3kX]47%<Yp(c[s^Uc'B#<b\t-adDEHT/TLXS-(#KA1V-(n+1gfT;K:-R-:;VZ,:d&i7lB\1@m+9uV>\j$@/?Sm6^Z5@m%h/0pXEe!ng(V#e-rpki2If\;TL@"s8fBq\/hIFKXOtj(_CW8;F9?D\XL3YEK=jDkI4\Rfi=?V\q9>:%f3^$KnI.#B6!6\hd0.QP:%Ge>(tX7tb].Qn<#7ak"hAUFh*/QnI.1j-#jZ(C2KCg9%r`F/k!HT'icgDTt&:M/QNl*(DFelAW:/ZgVDUG#6a!hCBIc.sM3rUOVZ%!Ca#?>Lr,s'-&l/MYf!p'c0bU2bpdc]c1K8?!urM5,de8m$j%69?/MJ>@)6)B0EQJD&_j72S,BO:,;pYP1\;+chCK?-R5/@]kFA3%]c&m7gn(NC9pm6Y!Bo4Q:jo+_>:MhI1h;$-aZ^bYp;>_8q;Oo^1n(+]^K#G#J4'j%]QSHoc=nJdYE2U#s$1A"i>(KZ['#IED9L/t%/rpB/"_apKU29<li]:_8U0Z[IcKN5,e9#jI\E4p^5^(M<YOcmN?q%!Bg8ep-3g\NcF:cpeDU%q>cD)f%hm+WW?t86/ofM/$L8'(C%Cat,LH60W!0C9!$hC>H[/;T/&;=i;CeYs3E"8WLE@D#fGC3b%m<EfKAc1ed#rV#]hZ`<u2]X7.:ZflXI)pZ<H]_L#GgZA=l#luJ[%J'60&Kq-cUg_;i3h\e6c''1E!2q<G\[%6@"3#/#Ld(jViaOAEhB[U58]6Q>O?_1tU)`trWJ))4aomOORS!7=`+88-B"="[+GOQ+*%<h@#afQMOgXjg7q]!bWVOSB+PiD#'[\[eA]+K:C:R^`.I8cC@Uk;o$T-s^NJE,N-KY?6jA#Kh.t\@!(@(3F2kH7Q+(d+E+rCu^Fs%0R_>P-[;B1Gq_RocK(XNnmO(JpqfM8g[R+iBX/TSrQ0o83Hd-k?\3[;KK.JtlXX6e*9[p".eKHbRM\7>;''0UhebiKOLX[=07Q`"%p]3gW*Gci#TkYn7n$dJGH]nb\Imn.<o`Q_f>N68/@IlOh`h#@EXWM:R5TAm\%Ar;Y%gC<ZN3R:f>AUWB*sk*'9dZ[(;o-"=8$?Og%B:ojaEb!Keh2"U^TrJZ/^*;H<,_k#\V<Rgk,FT)^ncCc2/@m=LXD?1_"%.XZAsJah4W:=PO]4:6O^5.kP#^E'\-'ut9@0%\Zi4hq%g7ReL%(&cjO=KQL>%)f(q2/L9^9#CpkYO[:bp@jp+q)RKcB[[[(/<UDErM(SODT57*M?f>46&.(ZM.mB7]:"e4q+q`DHE$9Da;-P%iO#l3-D&N&2L$BFJq1L>[]?%cCSZ9&]RkU>]aCbG#c_2g[B,Ke!O5kkKEpo*N-FD/h\0K5ec+Vo5d`FG&"8"KLMC.^4e-UmK17,F%!Oh$0kt2p6B]JE&K$B6,g.k-cBN0:DMr#X9Gou@D]mZ)n^\mL+%?2JNXESLIOAiV;*]LOl6?(W"Yq[u2DMP#-`d/4m>eI>h&T*On%kCm">5@Q.&=WZG5VE2tb;:_4"QTd5/P;%)B>H$Xt6M4QM1=-#l<GjS(JLX4d^pZ/8B3s#t9I0=TgL>)X+mP%ur(%""XYlbk4QO;U%SC)pk0TmsN<-M8`V9(gg5Z/i!g#IT(lF4.EjA=%5Q)7T-o2KaJY<BQrAF?t[m^&9TX:5R\HL6g%FndjWH+$<)m"KH#FciAO=o-A/%dQ#(%4O&5U4H#htMhdTV((6<J(-HQadCH@8G06kQe(^\mVrA!-b>7G'rYkVqR=d)(f*kC!4E>u\"juA5iLC5l^:TP`FC`Gr&&@8c%[6BipT>-S#9MMOp/T2!(qM)pP^F@]sbX#`[aLE&RTR%^3o:mFXIF'n+l-<_mERU1*3Ic-BaK?e\5HRP:4erD;kkf4];fXJD-]Z@9%D`.O)8;G.#??GE9b'L1#A`"2X*-L67@T\mY_+XqJI)W(.46dPCC6q=3eq1YgbM0Q$QlMT/2$G'+$7[qA>Vt,#UXFEl2t-V.6W<CA%=N7;iFj_`Q#7pE0TM85sUGU6hd*3Qo!+D_6$S1&&JiZo'6dXJ7k`h2jp*gcKo1dr#a;XqH(=#9,cr%j%=A%8OTBaB13nAh#[?c=-%.!:#[!2.Yu[XW5Hf<ISsfQun[;!>!n^k_E^O024`!$h!&1O@Zi2dO_V:T\>tSV-+qRY3J1+;`"";19LjdTuQaMMmOhVFR=[N7"I+%'SY&WQkJk].ZLu!YV?VHc2;";Q>#!Z*s/pk.sR3nR[WoFZ8fEVl7<aM+&_Qb,i35"ahdCG+K6W/\L`P5qneE@.[i2a/NT0[j-HIf%<5?1)ES6DBM_1QgK@R52)h-iU_TbXsDTI^-L%msWA7dj`LPlY='?*o)BWLu\hjFJOO)m0n(.*c,SOJ)GD/\.'>nne%8t[3*gc*S>%QRQqRiA5/=rE3e,?ac=$>IeM=3XQ^6G.K</M?oRnZ.-!])7%&qO+<ql[N8/2-6F:A;o2t:rO,q]K)`aU\$72!g(%@DQqD$j6K*?d%.D=YW@kIR$3uNKp*,"c=/]bZ*j[*V5kdstQ*aIuc/;6eY`2^V`gJEYk;+Ab-al>&WW!+6!Y[$U68D:Zo4#3l#^5u;&FC0cs>0hl@%a/AGXd9OlH)-LSF^]'3]M>3W$Hgdg?EKt`>c_RQ2l+W*VmF2$Uo6tqP.ruX+VOh2/.c./W_VJmSW`g!u`_b9Z*bc.GZW03M:gtop%],>k;VKU4jHX7A&[N)MuXiC>"6gVoB`L$-dhG+%C,`s^>$^);i.%/q/3tI?RArS<ehg_*.U+u3M\N&2&>0ST>](d)q0$b?R\k;`g%H[MF"V,:*sl<enY:pg>_gdTlDgf8#pg#r)?&&Q56I@DlSqXMaIronV+X4nFTrL<E9IeNGQmpH(ae$hR;amG!>Iei*o55jd$0E:Y8%Vf-LgqsMZ-rUf[Bf3a%!q_*I!l$ojcoCBM35CN;'Dnc2Bo%eeCo*8*p+o;!N?i97,Isq3D?I@jF~>%AI9_PrivateDataEnd